<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<device-support>
    <operations>
        <!--
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/netmask</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceNetmask</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../ip-address != null)
                        ip address $../ip-address $netmask
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceNetmask</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../ip-address != null)
                        ip address $../ip-address $netmask
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceNetmask</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../ip-address != null)
                        no ip address $../ip-address $netmask
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        -->
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseInterface</name>
                    <type>PARSE</type>
                    <command-string>description $description</command-string>
                    <command-string>switchport mode $mode</command-string>
                </device-operation>
                <device-operation>
                    <name>CreateInterface</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($mode == "vlan")
                        interface vlan $l2features:vlan
                        #else
                        interface $name
                    </command-string>
                    <command-string>
                        #if($description != null)
                        description $description
                    </command-string>
                    <command-string>
                        #if($ip-address != null AND $netmask != null)
                        ip address @convertToCidr($ip-address,$netmask)
                    </command-string>
                    <command-string>
                        #if($ipv6-address != null)
                        ipv6 address $ipv6-address/$ipv6-prefix-length
                    </command-string>
                    <command-string>
                        #if($ipv6-address != null)
                        ipv6 enable
                    </command-string>                    
                    <command-string>
                        #if($speed != null)
                        speed $speed
                    </command-string>
                    <command-string>
                        #if($duplex != null)
                        duplex $duplex
                    </command-string>
                    <command-string>
                        #if($portfast == "true")
                        spanning-tree portfast
                    </command-string>
                    <command-string>
                        #if($bpduguard == "true")
                        spanning-tree bpduguard enable
                    </command-string>
                    <command-string>
                        #if($broadcast == "true")
                        storm-control broadcast level $level
                    </command-string>
                    <command-string>
                        #if($mtu != null)
                        mtu $mtu
                    </command-string>
                    <command-string>
                        #if($l3features:vrf != null AND $l3features:vrf != "GLOBAL")
                        vrf member $l3features:vrf
                    </command-string>
                    <command-string>no shutdown</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterface</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($mode == "vlan")
                        interface vlan $l2features:vlan
                        #else
                        interface $name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterface</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($mode == "vlan")
                        no interface vlan $l2features:vlan
                        #else if($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface")
                        interface $name
                        #else
                        no interface $name
                    </command-string>
                    <command-string>
                        #if($speed != null)
                        speed $speed
                    </command-string>
                    <command-string>
                        #if($duplex != null)
                        duplex $duplex
                    </command-string>
                    <command-string>
                        #if($portfast == "true")
                        no spanning-tree portfast
                    </command-string>
                    <command-string>
                        #if($bpduguard == "true")
                        no spanning-tree bpduguard enable
                    </command-string>
                    <command-string>
                        #if($broadcast == "true")
                        no storm-control broadcast level $level
                    </command-string>
                    <command-string>
                        #if($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface")
                        [no ip address $ip-address $netmask]
                    </command-string>
                    <command-string>
                        #if($mtu != null)
                        no mtu $mtu
                    </command-string>
                    <command-string>
                        #if($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface")
                        [no ipv6 address $ipv6-address/$ipv6-prefix-length]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/description</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceDescription</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($description != null)
                        description $description
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceDescription</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($description != null)
                        description $description
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceDescription</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($description != null)
                        no description $description
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSnmp</name>
                    <type>CREATE</type>
                    <command-string>snmp-server community $community [$comm-auth-type] [view $view-name]</command-string>
                    <command-string>snmp-server source-interface traps $trap-source</command-string>
                    <command-string>
                        #if ($all-traps == "true")
                        snmp-server enable traps [$trap-type]
                    </command-string>
                    <command-string>
                        #if($snmp-version =="v3")
                        snmp-server [group $group-name] $snmp-version [$group-auth-type] [$group-priviledge]
                        [$view-name]
                        #else
                        snmp-server [group $group-name] $snmp-version [$group-priviledge] [$view-name]
                    </command-string>
                    <command-string>
                        #if ($snmp-ifmib-ifindex-persist == "true")
                        snmp ifmib ifalias long
                    </command-string>
                    <command-string>snmp-server user $user [$group-name] [$snmp-version]</command-string>
                    <command-string>snmp-server view $view-name [$oid] [$view-type]</command-string>
                    <command-string>[snmp-server location $location]</command-string>
                    <command-string>[snmp-server contact $contact]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateSnmp</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if ($all-traps == "true")
                        snmp-server enable traps
                    </command-string>
                    <command-string>[snmp-server tftp-server-list $acl-name]</command-string>
                    <command-string>[snmp-server packetsize $packet-size]</command-string>
                </device-operation> 
                <device-operation>
                    <name>DeleteSnmp</name>
                    <type>DELETE</type>
                    <command-string>[no snmp-server group $group-name]</command-string>
                    <command-string>[no snmp-server user $user]</command-string>
                    <command-string>
                        #if ($all-traps == "true")
                        no snmp-server enable traps [$trap-type]
                    </command-string>
                    <command-string>
                        #if ($snmp-ifmib-ifindex-persist == "true")
                        no snmp ifmib ifalias long
                    </command-string>
                    <command-string>[no snmp-server source-interface traps $trap-source]</command-string>
                    <command-string>[no snmp-server community $community ro]</command-string>
                    <command-string>[no snmp-server community $rw-community rw]</command-string>
                    <command-string>[no snmp-server view $view-name]</command-string>
                    <command-string>[no snmp-server location $location]</command-string>
                    <command-string>[no snmp-server contact $contact]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/location</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateLocation</name>
                    <type>CREATE</type>
                    <command-string>[snmp-server location $location]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateLocation</name>
                    <type>UPDATE</type>
                    <command-string>[snmp-server location $location]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLocation</name>
                    <type>DELETE</type>
                    <command-string>[no snmp-server location $location]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/contact</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContact</name>
                    <type>CREATE</type>
                    <command-string>[snmp-server contact $contact]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateContact</name>
                    <type>UPDATE</type>
                    <command-string>[snmp-server contact $contact]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContact</name>
                    <type>DELETE</type>
                    <command-string>[no snmp-server contact $contact]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/trap-source</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTrapSource</name>
                    <type>CREATE</type>
                    <command-string>[snmp-server source-interface traps $trap-source]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateTrapSource</name>
                    <type>UPDATE</type>
                    <command-string>[snmp-server source-interface traps $trap-source]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTrapSource</name>
                    <type>DELETE</type>
                    <command-string>[no snmp-server source-interface traps $trap-source]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/snmp-ifmib-ifindex-persist</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>Createifmib</name>
                    <type>CREATE</type>
                    <command-string>
                        #if ($snmp-ifmib-ifindex-persist == "true")
                        snmp ifmib ifalias long
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>Updateifmib</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if ($snmp-ifmib-ifindex-persist == "true")
                        snmp ifmib ifalias long
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>Deleteifmib</name>
                    <type>DELETE</type>
                    <command-string>
                        #if ($snmp-ifmib-ifindex-persist == "true")
                        no snmp ifmib ifalias long
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:features</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseFeatures</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($feature-name == "enable")
                        feature $feature-name
                        #else
                        no feature $feature-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateFeatures</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($telnet != null and $telnet == "enable")
                        feature telnet
                        #else if($telnet != null and $telnet == "disable")
                        no feature telnet
                    </command-string>
                    <command-string>
                        #if($ssh != null and $ssh == "enable")
                        feature ssh
                        #else if($ssh != null and $ssh == "disable")
                        no feature ssh
                    </command-string>
                    <command-string>
                        #if($tacacs != null and $tacacs == "enable")
                        feature tacacs+
                        #else if($tacacs != null and $tacacs == "disable")
                        no feature tacacs+
                    </command-string>
                    <command-string>
                        #if($udld != null and $udld == "enable")
                        feature udld
                        #else if($udld != null and $udld == "disable")
                        no feature udld
                    </command-string>
                    <command-string>
                        #if($interface-vlan != null and $interface-vlan == "enable")
                        feature interface-vlan
                        #else if($interface-vlan != null and $interface-vlan == "disable")
                        no feature interface-vlan
                    </command-string>
                    <command-string>
                        #if($lacp != null and $lacp == "enable")
                        feature lacp
                        #else if($lacp != null and $lacp == "disable")
                        no feature lacp
                    </command-string>
                    <command-string>
                        #if($bgp != null and $bgp == "enable")
                        feature bgp
                        #else if($bgp != null and $bgp == "disable")
                        no feature bgp
                    </command-string>
                    <command-string>
                        #if($hsrp != null and $hsrp == "enable")
                        feature hsrp
                        #else if($hsrp != null and $hsrp == "disable")
                        no feature hsrp
                    </command-string>
                    <command-string>
                        #if($dhcp != null and $dhcp == "enable")
                        feature dhcp
                        #else if($dhcp != null and $dhcp == "disable")
                        no feature dhcp
                    </command-string>
                    <command-string>
                        #if($lldp != null and $lldp == "enable")
                        feature lldp
                        #else if($lldp != null and $lldp == "disable")
                        no feature lldp
                    </command-string>
                    <command-string>
                        #if($bfd != null and $bfd == "enable")
                        feature bfd
                        #else if($bfd != null and $bfd == "disable")
                        no feature bfd
                    </command-string>
                    <command-string>
                        #if($vpc != null and $vpc == "enable")
                        feature vpc
                        #else if($vpc != null and $vpc == "disable")
                        no feature vpc
                    </command-string>
                    <command-string>
                        #if($fex != null and $fex == "enable")
                        install feature-set fex
                        feature fex
                        #else if($fex != null and $fex == "disable")
                        no install feature-set fex
                        no feature fex
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateFeatures</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($telnet != null and $telnet == "enable")
                        feature telnet
                        #else if($telnet != null and $telnet == "disable")
                        no feature telnet
                    </command-string>
                    <command-string>
                        #if($ssh != null and $ssh == "enable")
                        feature ssh
                        #else if($ssh != null and $ssh == "disable")
                        no feature ssh
                    </command-string>
                    <command-string>
                        #if($tacacs != null and $tacacs == "enable")
                        feature tacacs+
                        #else if($tacacs != null and $tacacs == "disable")
                        no feature tacacs+
                    </command-string>
                    <command-string>
                        #if($udld != null and $udld == "enable")
                        feature udld
                        #else if($udld != null and $udld == "disable")
                        no feature udld
                    </command-string>
                    <command-string>
                        #if($interface-vlan != null and $interface-vlan == "enable")
                        feature interface-vlan
                        #else if($interface-vlan != null and $interface-vlan == "disable")
                        no feature interface-vlan
                    </command-string>
                    <command-string>
                        #if($lacp != null and $lacp == "enable")
                        feature lacp
                        #else if($lacp != null and $lacp == "disable")
                        no feature lacp
                    </command-string>
                    <command-string>
                        #if($bgp != null and $bgp == "enable")
                        feature bgp
                        #else if($bgp != null and $bgp == "disable")
                        no feature bgp
                    </command-string>
                    <command-string>
                        #if($hsrp != null and $hsrp == "enable")
                        feature hsrp
                        #else if($hsrp != null and $hsrp == "disable")
                        no feature hsrp
                    </command-string>
                    <command-string>
                        #if($dhcp != null and $dhcp == "enable")
                        feature dhcp
                        #else if($dhcp != null and $dhcp == "disable")
                        no feature dhcp
                    </command-string>
                    <command-string>
                        #if($lldp != null and $lldp == "enable")
                        feature lldp
                        #else if($lldp != null and $lldp == "disable")
                        no feature lldp
                    </command-string>
                    <command-string>
                        #if($bfd != null and $bfd == "enable")
                        feature bfd
                        #else if($bfd != null and $bfd == "disable")
                        no feature bfd
                    </command-string>
                    <command-string>
                        #if($vpc != null and $vpc == "enable")
                        feature vpc
                        #else if($vpc != null and $vpc == "disable")
                        no feature vpc
                    </command-string>
                    <command-string>
                        #if($fex != null and $fex == "enable")
                        install feature-set fex
                        feature fex
                        #else if($fex != null and $fex == "disable")
                        no install feature-set fex
                        no feature fex
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteFeatures</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($telnet != null and $telnet == "disable")
                        feature telnet
                        #else if($telnet != null and $telnet == "enable")
                        no feature telnet
                    </command-string>
                    <command-string>
                        #if($ssh != null and $ssh == "disable")
                        feature ssh
                        #else if($ssh != null and $ssh == "enable")
                        no feature ssh
                    </command-string>
                    <command-string>
                        #if($tacacs != null and $tacacs == "disable")
                        feature tacacs+
                        #else if($tacacs != null and $tacacs == "enable")
                        no feature tacacs+
                    </command-string>
                    <command-string>
                        #if($udld != null and $udld == "disable")
                        feature udld
                        #else if($udld != null and $udld == "enable")
                        no feature udld
                    </command-string>
                    <command-string>
                        #if($interface-vlan != null and $interface-vlan == "disable")
                        feature interface-vlan
                        #else if($interface-vlan != null and $interface-vlan == "enable")
                        no feature interface-vlan
                    </command-string>
                    <command-string>
                        #if($lacp != null and $lacp == "disable")
                        feature lacp
                        #else if($lacp != null and $lacp == "enable")
                        no feature lacp
                    </command-string>
                    <command-string>
                        #if($bgp != null and $bgp == "disable")
                        feature bgp
                        #else if($bgp != null and $bgp == "enable")
                        no feature bgp
                    </command-string>
                    <command-string>
                        #if($hsrp != null and $hsrp == "disable")
                        feature hsrp
                        #else if($hsrp != null and $hsrp == "enable")
                        no feature hsrp
                    </command-string>
                    <command-string>
                        #if($dhcp != null and $dhcp == "disable")
                        feature dhcp
                        #else if($dhcp != null and $dhcp == "enable")
                        no feature dhcp
                    </command-string>
                    <command-string>
                        #if($lldp != null and $lldp == "disable")
                        feature lldp
                        #else if($lldp != null and $lldp == "enable")
                        no feature lldp
                    </command-string>
                    <command-string>
                        #if($bfd != null and $bfd == "disable")
                        feature bfd
                        #else if($bfd != null and $bfd == "enable")
                        no feature bfd
                    </command-string>
                    <command-string>
                        #if($vpc != null and $vpc == "disable")
                        feature vpc
                        #else if($vpc != null and $vpc == "enable")
                        no feature vpc
                    </command-string>
                    <command-string>
                        #if($fex != null and $fex == "disable")
                        install feature-set fex
                        feature fex
                        #else if($fex != null and $fex == "enable")
                        no install feature-set fex
                        no feature fex
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/community</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSnmpReadCommunity</name>
                    <type>CREATE</type>
                    <command-string>[snmp-server community $community ro]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateSnmpReadCommunity</name>
                    <type>UPDATE</type>
                    <command-string>[snmp-server community $community ro]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSnmpReadCommunity</name>
                    <type>DELETE</type>
                    <command-string>[no snmp-server community $community ro]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/rw-community</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSnmpWriteCommunity</name>
                    <type>CREATE</type>
                    <command-string>[snmp-server community $rw-community rw]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateSnmpWriteCommunity</name>
                    <type>UPDATE</type>
                    <command-string>[snmp-server community $rw-community rw]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSnmpWriteCommunity</name>
                    <type>DELETE</type>
                    <command-string>[no snmp-server community $rw-community rw]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/snmp-server</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>PARSESnmpserver</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($context-name != null)
                        snmp-server host $snmp-server-ip [vrf $context-name] [version $snmp-version $community]
                        #else
                        snmp-server host $snmp-server-ip [version $snmp-version $community]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateSnmpServer</name>
                    <type>CREATE</type>
                    <command-string>
                        snmp-server host $snmp-server-ip traps [version $snmp-version $community]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSnmpServer</name>
                    <type>DELETE</type>
                    <command-string>
                        no snmp-server host $snmp-server-ip traps [version $snmp-version $community]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/snmp-traps</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSnmpTraps</name>
                    <type>CREATE</type>
                    <command-string>
                        snmp-server enable traps $snmp-trap
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSnmpTraps</name>
                    <type>DELETE</type>
                    <command-string>
                        no snmp-server enable traps $snmp-trap
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/snmp-community-list</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>PARSESnmpCommunity</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                    #if($group !=null)
                    snmp-server community $snmp-string group $group
                    #else if($acl != null)
                    snmp-server community $snmp-string use-acl $acl
                    #else
                    snmp-server community $snmp-string [$permission-type] 
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateSnmpCommunity</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($acl != null)
                        snmp-server community $snmp-string use-acl $acl
                        #else
                        snmp-server community $snmp-string [$permission-type] 
                    </command-string>
                    <command-string>
                        #if($permission-type == "RO")
                        snmp-server community $snmp-string [$permission-type] 
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateSnmpCommunity</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($acl != null)
                        snmp-server community $snmp-string use-acl $acl
                        #else
                        snmp-server community $snmp-string [$permission-type] 
                    </command-string>
                    <command-string>
                        #if($permission-type == "RO")
                        snmp-server community $snmp-string [$permission-type] 
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSnmpCommunity</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($acl != null)
                        no snmp-server community $snmp-string use-acl $acl
                        #else
                        no snmp-server community $snmp-string [$permission-type] 
                    </command-string>
                    <command-string>
                        #if($permission-type == "RO")
                        no snmp-server community $snmp-string [$permission-type] 
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:local-credentials/local-credential</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatelocalCredentials</name>
                    <type>CREATE</type>
                    <command-string>
                        username $name password [$password-level] $password [role $role]
                    </command-string>
                    <command-string>
                        #if($strength-check == "disable")
                        no password strength-check
                    </command-string>
                    <command-string>
                        #if($strength-check == "enable")
                        password strength-check
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatelocalCredentials</name>
                    <type>UPDATE</type>
                    <command-string> </command-string>
                </device-operation>
                <device-operation>
                    <name>DeletelocalCredentials</name>
                    <type>DELETE</type>
                    <command-string>
                        no username $name password [$password-level] $password [role $role]
                    </command-string>
                    <command-string>
                        #if($strength-check == "disable")
                        password strength-check
                    </command-string>
                    <command-string>
                        #if($strength-check == "enable")
                        no password strength-check
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:local-credentials/local-credential/name</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatelocalCredentialsUsername</name>
                    <type>CREATE</type>
                    <command-string>
                        username $name password [$../password-level] $../password [role $../role]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatelocalCredentialsUsername</name>
                    <type>UPDATE</type>
                    <command-string>
                        username $name password [$../password-level] $../password [role $../role]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeletelocalCredentialsUsername</name>
                    <type>DELETE</type>
                    <command-string>
                        no username $name password [$../password-level] $../password [role $../role]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:local-credentials/local-credential/strength-check</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatelocalCredentialsStrengthCheck</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($strength-check == "disable")
                        no password strength-check
                    </command-string>
                    <command-string>
                        #if($strength-check == "enable")
                        password strength-check
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatelocalCredentialsStrengthCheck</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($strength-check == "disable")
                        no password strength-check
                    </command-string>
                    <command-string>
                        #if($strength-check == "enable")
                        password strength-check
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeletelocalCredentialsStrengthCheck</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($strength-check == "disable")
                        password strength-check
                    </command-string>
                    <command-string>
                        #if($strength-check == "enable")
                        no password strength-check
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ntp</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseNtp</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($ntp != null  AND  $access-type != null)
                        ntp access-group $access-type $ntp
                        #else
                        ntp source-interface $ntp-source-interface
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateNtp</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($ntp != null)
                        ntp access-group serve $ntp
                    </command-string>
                <command-string>ntp source-interface $ntp-source-interface</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNtp</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($ntp != null)
                        ntp access-group serve $ntp
                    </command-string>
                <command-string>ntp source-interface $ntp-source-interface</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNtp</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($ntp != null)
                        no ntp access-group serve $ntp
                    </command-string>
                    <command-string>no ntp source-interface $ntp-source-interface</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ntp/ntp-server</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNtpServer</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($ntp-peer != null)
                        ntp peer $ntp-peer [version $version] [$vrf $vrf]
                    </command-string>
                    <command-string>
                        #if($ntp-source-address != null)
                        ntp source $ntp-source-address
                    </command-string>
                    <command-string>
                        ntp server $ntp-server-address [use-vrf $vrf] [$prefered-server]
                    </command-string>
                    <command-string>ntp master $stratum-number</command-string>
                    <command-string>
                        #if($authkey-id != null)
                        ntp authentication-key $authkey-id md5 [$authkey-value]
                    </command-string>
                    <command-string>
                        #if($ntp-source-interface != null)
                        ntp source-interface $ntp-source-interface
                    </command-string>
                    <command-string>[ntp trusted-key $authkey-id]</command-string>
                </device-operation>
                <device-operation>
               <name>UpdateNtpServer</name>
               <type>UPDATE</type>
               <command-string> </command-string>
               </device-operation>
                <device-operation>
                    <name>DeleteNtpServer</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($ntp-peer != null)
                        no ntp peer $ntp-peer
                    </command-string>
                    <command-string>
                        no ntp server $ntp-server-address [use-vrf $vrf] [$prefered-server]
                    </command-string>
                    <command-string>
                        #if($ntp-source-interface != null)
                        no ntp source-interface $ntp-source-interface
                    </command-string>
                    <command-string>[no ntp trusted-key $authkey-id]</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ntp/ntp-server/ntp-server-address</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseNtpServerAddress</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if ($../vrf != null AND $../prefered-server == null)
                        ntp server $ntp-server-address use-vrf $../vrf
                        #else if ($../vrf != null AND $../prefered-server != null)
                        ntp server $ntp-server-address use-vrf $../vrf $../prefered-server
                        #else
                        ntp server $ntp-server-address  $../prefered-server use-vrf $../vrf
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateNtpServerAddress</name>
                    <type>CREATE</type>
                    <command-string>
                        ntp server $ntp-server-address [use-vrf $../vrf] [$prefered-server]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNtpServerAddress</name>
                    <type>DELETE</type>
                    <command-string>
                        no ntp server $ntp-server-address [use-vrf $../vrf] [$prefered-server]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ntp/ntp-server/ntp-source-interface</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNtpSourceInterface</name>
                    <type>CREATE</type>
                    <command-string>
                      ntp source-interface $ntp-source-interface
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNtpSourceInterface</name>
                    <type>UPDATE</type>
                    <command-string>
                      ntp source-interface $ntp-source-interface
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNtpSourceInterface</name>
                    <type>DELETE</type>
                    <command-string>
                      no ntp source-interface $ntp-source-interface
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>



        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:logging</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateLogging</name>
                    <type>CREATE</type>
                    <command-string>[logging $ip-address]</command-string>
                    <command-string>[logging buffered $buffer-size debugging]</command-string>
                    <command-string>
                        #if($no-logging-console == "true")
                        no logging console
                    </command-string>
                    <command-string>logging trap $logging-trap</command-string>
                    <command-string>logging source-interface $interface-name</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateLogging</name>
                    <type>UPDATE</type>
                    <command-string>[logging $ip-address]</command-string>
                    <command-string>[logging buffered $buffer-size debugging]</command-string>
                    <command-string>
                        #if($no-logging-console == "true")
                        no logging console
                    </command-string>
                    <command-string>logging trap $logging-trap</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLogging</name>
                    <type>DELETE</type>
                    <command-string>[no logging $ip-address]</command-string>
                    <command-string>[no logging buffered $buffer-size debugging]</command-string>
                    <command-string>
                        #if($no-logging-console == "true")
                        logging console
                    </command-string>
                    <command-string>no logging trap $logging-trap</command-string>
                    <command-string>no logging source-interface $interface-name</command-string>
                </device-operation>
            </device-operations>
        </operation>


        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:logging/interface-name</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateLoggingInterfaceName</name>
                    <type>CREATE</type>
                    <command-string>logging source-interface $interface-name</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateLoggingInterfaceName</name>
                    <type>UPDATE</type>
                    <command-string>logging source-interface $interface-name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLoggingInterfaceName</name>
                    <type>DELETE</type>
                    <command-string>no logging source-interface $interface-name</command-string>
                </device-operation>
            </device-operations>
        </operation>


        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:logging/logging-hosts</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateLoggingHosts</name>
                    <type>CREATE</type>
                    <command-string>logging server $ip-address [$severity-level] [use-vrf $../context-name] [facility $../facility-name] </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLoggingHosts</name>
                    <type>DELETE</type>
                    <command-string>no logging server $ip-address [$severity-level] [use-vrf $../context-name] [facility $../facility-name] </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:hostname</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateHostName</name>
                    <type>CREATE</type>
                    <command-string>hostname $hostname</command-string>
                    <command-string>ip domain-name $domain-name</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateHostName</name>
                    <type>UPDATE</type>
                    <command-string> </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteHostName</name>
                    <type>DELETE</type>
                    <command-string>no hostname $hostname</command-string>
                    <command-string>no ip domain-name $domain-name</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:hostname/hostname</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>Createhostname</name>
                    <type>CREATE</type>
                    <command-string>hostname $hostname</command-string>
                </device-operation>
                <device-operation>
                    <name>Updatehostname</name>
                    <type>UPDATE</type>
                    <command-string>hostname $hostname</command-string>
                </device-operation>
                <device-operation>
                    <name>Deletehostname</name>
                    <type>DELETE</type>
                    <command-string>no hostname $hostname</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:hostname/domain-name</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateDomainName</name>
                    <type>CREATE</type>
                    <command-string>ip domain-name $domain-name</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateDomainName</name>
                    <type>UPDATE</type>
                    <command-string>ip domain-name $domain-name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteDomainName</name>
                    <type>DELETE</type>
                    <command-string>no ip domain-name $domain-name</command-string>
                </device-operation>
            </device-operations>
        </operation>


        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ssh</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSSH</name>
                    <type>CREATE</type>
                    <command-string>crypto key generate rsa modulus $key-modulus</command-string>
                    <command-string>[ip ssh version $version]</command-string>
                    <command-string>
                        #if($scp-enable == "true")
                        ip scp server enable
                    </command-string>
                    <command-string>[ip ssh time-out $timeout]</command-string>
                    <command-string>[ip ssh authentication-retries $auth-retries-count]</command-string>
                    <command-string>[ip ssh source-interface $source-interface]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSSH</name>
                    <type>DELETE</type>
                    <command-string>[no ip ssh version $version]</command-string>
                    <command-string>
                        #if($scp-enable == "true")
                        ip scp server enable
                    </command-string>
                    <command-string>[no ip ssh time-out]</command-string>
                    <command-string>[no ip ssh authentication-retries]</command-string>
                    <command-string>[no ip ssh source-interface $source-interface]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:vty-configs/vty-config</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVTYConfig</name>
                    <type>CREATE</type>
                    <command-string>line vty</command-string>
                    <command-string>
                        #if($acl-rule-number != null)
                        access-class $acl-rule-number in
                    </command-string>
                    <command-string>[login authentication $auth-type]</command-string>
                    <command-string>[exec-timeout $timeout]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVTYConfig</name>
                    <type>UPDATE</type>
                    <command-string>line vty</command-string>
                    <command-string>
                        #if($acl-rule-number != null)
                        access-class $acl-rule-number in
                    </command-string>
                    <command-string>[login authentication $auth-type]</command-string>
                    <command-string>[exec-timeout $timeout]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:http</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseIPHTTP</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($no-ip-http-server == "true")
                        no ip http server
                        #else if($no-ip-http-server == "false")
                        ip http server
                        #else if($no-ip-http-secure-server == "true")
                        no ip http secure-server
                        #else if($no-ip-http-secure-server == "false")
                        ip http secure-server
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateHTTP</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($no-ip-http-server == "true")
                        no ip http server
                    </command-string>
                    <command-string>
                        #if($no-ip-http-secure-server == "true")
                        no ip http secure-server
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteHTTP</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($no-ip-http-server == "true")
                        ip http server
                    </command-string>
                    <command-string>
                        #if($no-ip-http-secure-server == "true")
                        ip http secure-server
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateHTTP</name>
                    <type>UPDATE</type>
                    <command-string> </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:http/no-ip-http-server</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateHTTPServer</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($no-ip-http-server == "true")
                        no ip http server
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteHTTPServer</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($no-ip-http-server == "true")
                        ip http server
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:http/no-ip-http-secure-server</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateHTTPSecure</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($no-ip-http-secure-server == "true")
                        no ip http secure-server
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteHTTPSecure</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($no-ip-http-secure-server == "true")
                        ip http secure-server
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:license</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateLicense</name>
                    <type>CREATE</type>
                    <command-string>license smart enable</command-string>
                    <command-string>ip http client source-interface $source-interface</command-string>
                    <command-string>end</command-string>
                    <command-string>license smart register idtoken $license-token</command-string>
                    <command-string>config t</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLicense</name>
                    <type>DELETE</type>
                    <command-string>end</command-string>
                    <command-string>license smart deregister</command-string>
                    <command-string>config t</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/acl:access-lists/access-list</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAccessList</name>
                    <type>CREATE</type>
                    <command-string>ip access-list [$acl-type] $name</command-string>
                    <command-string>[remark $start-remark]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAccessList</name>
                    <type>DELETE</type>
                    <command-string>no ip access-list [$acl-type] $name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/acl:access-lists/access-list/acl-rules/acl-rule</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAclRule</name>
                    <type>CREATE</type>
                    <command-string>ip access-list [$../../acl-type] $../../name</command-string>
                    <command-string>
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "cidr")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] [$dest-ip $dest-mask] [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$acl-typesource-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] [host $dest-ip] [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] host $dest-ip [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "any")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == null)
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] [$dest-port-operator $dest-port] [$match-packets $precedence]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateAclRule</name>
                    <type>UPDATE</type>
                    <command-string>ip access-list $../../acl-type $../../name</command-string>
                    <command-string>no $linenumber</command-string>
                    <command-string>#if($source-condition-type == "cidr" AND $dest-condition-type == "cidr")
                        [$linenumber] $action $layer4protocol [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] [$dest-ip $dest-mask] [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr")
                        [$linenumber] $action $layer4protocol [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr")
                        [$linenumber] $action $layer4protocol [$service-obj-name] host $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr")
                        [$linenumber] $action $layer4protocol [$service-obj-name] any [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup")
                        [$linenumber] $action $layer4protocol [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup")
                        [$linenumber] $action $layer4protocol [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup")
                        [$linenumber] $action $layer4protocol [$service-obj-name] host $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup")
                        [$linenumber] $action $layer4protocol [$service-obj-name] any [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host")
                        [$linenumber] $action $layer4protocol [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host")
                        [$linenumber] $action $layer4protocol [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host")
                        [$linenumber] $action $layer4protocol [$service-obj-name] host $source-ip [$source-port-operator $source-port] [host $dest-ip] [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host")
                        [$linenumber] $action $layer4protocol [$service-obj-name] any [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "any")
                        [$linenumber] $action $layer4protocol [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any")
                        [$linenumber] $action $layer4protocol [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any")
                        [$linenumber] $action $layer4protocol [$service-obj-name] host $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any")
                        [$linenumber] $action $layer4protocol [$service-obj-name] any [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == null)
                        [$linenumber] $action $layer4protocol [$service-obj-name] any [$source-port-operator $source-port] [$dest-port-operator $dest-port] [$match-packets $precedence]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAclRule</name>
                    <type>DELETE</type>
                    <command-string>ip access-list [$../../acl-type] $../../name</command-string>
                    <command-string>
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "cidr")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] [$dest-ip $dest-mask] [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host")
                        no $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] [host $dest-ip] [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host")
                        no $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] host $dest-ip [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "any")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any")
                        no $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any")
                        no $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == null)
                        no $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] [$dest-port-operator $dest-port] [$match-packets $precedence]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:clock</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateClock</name>
                    <type>CREATE</type>
                    <command-string>clock timezone $timezone [$hours] [$minutes]</command-string>
                    <command-string>clock summer-time $summer-time</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateClock</name>
                    <type>UPDATE</type>
                    <command-string>clock timezone $timezone [$hours] [$minutes]</command-string>
                    <command-string>clock summer-time $summer-time</command-string>
                </device-operation>
                <device-operation>
                    <name>Deleteclock</name>
                    <type>DELETE</type>
                    <command-string>no clock timezone $timezone [$hours] [$minutes]</command-string>
                    <command-string>no clock summer-time $summer-time</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:banner</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateBanner</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($login-message != null)
                        banner login $login-delimiter $login-message $login-delimiter
                    </command-string>
                    <command-string>
                        #if($motd-message != null)
                        banner motd $motd-delimiter $motd-message $motd-delimiter
                    </command-string>
                    <command-string>
                        #if($exec-message != null)
                        banner exec $exec-delimiter $exec-message $exec-delimiter
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateBanner</name>
                    <type>UPDATE</type>
                    <command-string> </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteBanner</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($login-message != null)
                        no banner login
                    </command-string>
                    <command-string>
                        #if($motd-message != null)
                        no banner motd
                    </command-string>
                    <command-string>
                        #if($exec-message != null)
                        no banner exec
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:banner/login-message</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateLoginMessage</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($login-message != null)
                        banner login $../login-delimiter $login-message $../login-delimiter
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateLoginMessage</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($login-message != null)
                        banner login $../login-delimiter $login-message $../login-delimiter
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLoginMessage</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($login-message != null)
                        no banner login
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:banner/motd-message</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateMotdMessage</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($motd-message != null)
                        banner motd $../motd-delimiter $motd-message $../motd-delimiter
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateMotdMessage</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($motd-message != null)
                        banner motd $../motd-delimiter $motd-message $../motd-delimiter
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteMotdMessage</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($motd-message != null)
                        no banner motd
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:banner/exec-message</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateExecMessage</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($exec-message != null)
                        banner exec $../exec-delimiter $exec-message $../exec-delimiter
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateExecMessage</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($exec-message != null)
                        banner exec $../exec-delimiter $exec-message $../exec-delimiter
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteExecMessage</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($exec-message != null)
                        no banner exec
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:service-time-stamps</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateserviceTimeStamps</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($service-timestamps-debug == "true")
                        service timestamps debug datetime msec localtime show-timezone
                    </command-string>
                    <command-string>
                        #if($service-timestamps-log == "true")
                        service timestamps log datetime msec localtime show-timezone
                    </command-string>
                    <command-string>
                        #if($service-password-encryption == "true")
                        service password-encryption
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteserviceTimeStamps</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($service-timestamps-debug == "true")
                        no service timestamps debug datetime msec localtime show-timezone
                    </command-string>
                    <command-string>
                        #if($service-timestamps-log == "true")
                        no service timestamps log datetime msec localtime show-timezone
                    </command-string>
                    <command-string>
                        #if($service-password-encryption == "true")
                        no service password-encryption
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>


        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:spanning-tree</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSpanningTree</name>
                    <type>CREATE</type>
                    <command-string>spanning-tree mode $mode</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSpanningTree</name>
                    <type>DELETE</type>
                    <command-string>no spanning-tree mode $mode</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:spanning-tree/spanning-tree</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSpanningTree</name>
                    <type>CREATE</type>
                    <command-string>spanning-tree vlan $vlan priority $priority</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSpanningTree</name>
                    <type>DELETE</type>
                    <command-string>no spanning-tree vlan $vlan priority $priority</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:call-home</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateCallHome</name>
                    <type>CREATE</type>
                    <command-string>call-home</command-string>
                    <command-string>destination-profile $destination</command-string>
                    <command-string>no destination-profile $no-destination</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteCallHome</name>
                    <type>DELETE</type>
                    <command-string>call-home</command-string>
                    <command-string>no destination-profile $destination</command-string>
                    <command-string>destination-profile $no-destination</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:tacacs-conf</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTacacs</name>
                    <type>CREATE</type>
                    <command-string>tacacs-server key $tacacs-key</command-string>
                    <command-string>ip tacacs source-interface $tacacs-src-interface</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateTacacs</name>
                    <type>UPDATE</type>
                    <command-string> </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTacacs</name>
                    <type>DELETE</type>
                    <command-string>no tacacs-server key $tacacs-key</command-string>
                    <command-string>no ip tacacs source-interface $tacacs-src-interface</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:tacacs-conf/tacacs-key</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTacacsKey</name>
                    <type>CREATE</type>
                    <command-string>tacacs-server key $tacacs-key</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateTacacsKey</name>
                    <type>UPDATE</type>
                    <command-string>tacacs-server key $tacacs-key</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTacacsKey</name>
                    <type>DELETE</type>
                    <command-string>no tacacs-server key $tacacs-key</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:tacacs-conf/tacacs-src-interface</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTacacsSourceInterface</name>
                    <type>CREATE</type>
                    <command-string>ip tacacs source-interface $tacacs-src-interface</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateTacacsSourceInterface</name>
                    <type>UPDATE</type>
                    <command-string>ip tacacs source-interface $tacacs-src-interface</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTacacsSourceInterface</name>
                    <type>DELETE</type>
                    <command-string>no ip tacacs source-interface $tacacs-src-interface</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:tacacs-conf/tacacs-servers</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatetacacsServer</name>
                    <type>CREATE</type>
                    <command-string>tacacs-server host $tacacs-server</command-string>
                </device-operation>
                <device-operation>
                    <name>DeletetacacsServer</name>
                    <type>DELETE</type>
                    <command-string>no tacacs-server host $tacacs-server</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:aaa-group</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseAAAGroup</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if ($tacacs == "tacacs+" AND $tacacs-server-group != null )
                        aaa group server $tacacs $tacacs-server-group
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateAAAGroup</name>
                    <type>CREATE</type>
                    <command-string>aaa group server tacacs+ $tacacs-server-group</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateAAAGroup</name>
                    <type>UPDATE</type>
                    <command-string>aaa group server tacacs+ $tacacs-server-group</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAAAGroup</name>
                    <type>DELETE</type>
                    <command-string>no aaa group server tacacs+ $tacacs-server-group</command-string>
                </device-operation>
            </device-operations>
        </operation>


        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:aaa-group/aaa-servers</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAAAGroupServers</name>
                    <type>CREATE</type>
                    <command-string>aaa group server tacacs+ $../tacacs-server-group</command-string>
                    <command-string>server $aaa-server</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAAAGroupServers</name>
                    <type>DELETE</type>
                    <command-string>aaa group server tacacs+ $../tacacs-server-group</command-string>
                    <command-string>no server $aaa-server</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:aaa-group/authentication</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAuthentication</name>
                    <type>CREATE</type>
                    <command-string>aaa authentication login default group $server-group</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateAuthentication</name>
                    <type>UPDATE</type>
                    <command-string>aaa authentication login default group $server-group</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAuthentication</name>
                    <type>DELETE</type>
                    <command-string>no aaa authentication login default group $server-group</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:aaa-group/authorization</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>Parseauthorization</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if ($commands != null)
                        aaa authorization $commands default group $server-group local
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>Createauthorization</name>
                    <type>CREATE</type>
                    <command-string>aaa authorization commands default group $server-group local</command-string>
                    <command-string>aaa authorization config-commands default group $server-group local</command-string>
                </device-operation>
                <device-operation>
                    <name>Updateauthorization</name>
                    <type>UPDATE</type>
                    <command-string>aaa authorization commands default group $server-group local</command-string>
                    <command-string>aaa authorization config-commands default group $server-group local</command-string>
                </device-operation>
                <device-operation>
                    <name>Deleteauthorization</name>
                    <type>DELETE</type>
                    <command-string>no aaa authorization commands default group $server-group local</command-string>
                    <command-string>no aaa authorization config-commands default group $server-group local</command-string>
                </device-operation>
            </device-operations>
        </operation>


        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:aaa-group/accounting</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>Createaccounting</name>
                    <type>CREATE</type>
                    <command-string>aaa accounting default group $server-group</command-string>
                </device-operation>
                <device-operation>
                    <name>Updateaccounting</name>
                    <type>UPDATE</type>
                    <command-string>aaa accounting default group $server-group</command-string>
                </device-operation>
                <device-operation>
                    <name>Deleteaccounting</name>
                    <type>DELETE</type>
                    <command-string>no aaa accounting default group $server-group</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/dns:dns-server</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseDNS</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($domain-name == null) 
                        ip domain lookup source-interface $lookup-source-interface
                        #else
                        ip domain name $domain-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateDNS</name>
                    <type>CREATE</type>
                    <command-string>ip domain lookup source-interface $lookup-source-interface</command-string>
                    <command-string>ip domain name $domain-name</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateDNS</name>
                    <type>UPDATE</type>
                    <command-string> </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteDNS</name>
                    <type>DELETE</type>
                    <command-string>no ip domain lookup source-interface $lookup-source-interface</command-string>
                    <command-string>no ip domain name $domain-name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dns:dns-server/lookup-source-interface</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseDNSLookupSourceInterface</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        ip domain lookup source-interface $../lookup-source-interface
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateDNSLookupSourceInterface</name>
                    <type>CREATE</type>
                    <command-string>ip domain lookup source-interface $lookup-source-interface</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateDNSLookupSourceInterface</name>
                    <type>UPDATE</type>
                    <command-string>ip domain lookup source-interface $lookup-source-interface</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteDNSLookupSourceInterface</name>
                    <type>DELETE</type>
                    <command-string>no ip domain lookup source-interface $lookup-source-interface</command-string>
                </device-operation>
            </device-operations>
        </operation>


        <operation>
            <target>/controller:devices/device/dns:dns-server/domain-name</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseDNSDomainName</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        ip domain-name $../domain-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateDNSDomainName</name>
                    <type>CREATE</type>
                    <command-string>ip domain name $domain-name</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateDNSDomainName</name>
                    <type>UPDATE</type>
                    <command-string>ip domain name $domain-name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteDNSDomainName</name>
                    <type>DELETE</type>
                    <command-string>no ip domain name $domain-name</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/dns:dns-server/name-server</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseNameServers</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                    #if($vrf-name == null)
                    ip name-server $server
                    #else
                    ip name-server vrf $vrf-name $server
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateNameServers</name>
                    <type>CREATE</type>
                    <command-string>ip name-server [vrf $vrf-name] $server</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNameServers</name>
                    <type>DELETE</type>
                    <command-string>no ip name-server [vrf $vrf-name] $server</command-string>
                </device-operation>
            </device-operations>
        </operation>

        
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface</target>
            <platform>ALL|ALL|ALL|UCSOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseInterfaceVlan</name>
                    <type>PARSE</type>
                    <command-string>scope eth-server fabric $fabric enter interface $name</command-string>
                    <command-string>set user-label $description</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/interface:interfaces/interface</target>
            <platform>ALL|ALL|ALL|ACEOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseInterface</name>
                    <type>PARSE</type>
                    <command-string>switchport mode $mode</command-string>
                </device-operation>
                <device-operation>
                    <name>CreateInterface</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($context-name != null)
                        changeto $context-name
                    </command-string>
                    <command-string>
                        #if($mode == "vlan")
                        interface vlan $l2features:vlan
                        #else interface $name
                    </command-string>
                    <command-string>[description $description]</command-string>
                    <command-string>
                        #if($ip-address != null AND $netmask != null)
                        ip address $ip-address $netmask
                    </command-string>
                    <command-string>
                        #if($ipv6-address != null)
                        ipv6 address $ipv6-address/$ipv6-prefix-length
                    </command-string>
                    <command-string>
                        #if($ipv6-address != null)
                        ipv6 enable
                    </command-string>
                    <command-string>
                        #if($alias-address != null AND $netmask != null)
                        alias $alias-address $netmask
                    </command-string>
                    <command-string>
                        #if($mtu != null)
                        mtu $mtu
                    </command-string>
                    <command-string>no shutdown</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterface</name>
                    <type>DELETE</type>
                    <command-string>[changeto $context-name]</command-string>
                    <command-string>
                        #if($mode == "vlan")
                        no interface vlan $l2features:vlan
                        #else if($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface")
                        interface $name
                        #else
                        no interface $name
                    </command-string>
                    <command-string>
                       #if($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface")
                       no description
                    </command-string>
                    <command-string>
                        #if($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface")
                        [no ip address $ip-address $netmask]
                    </command-string>
                    <command-string>
                        #if($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface")
                        [no ipv6 address $ipv6-address/$ipv6-prefix-length]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface</target>
            <platform>ALL|ciscoAirCt2504K9|Cisco 2500|RTOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterface</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($name != null AND $l2features:vlan != null)
                        config interface create $name $l2features:vlan
                    </command-string>
                    <command-string>
                        #if($name != null AND $ip-address != null AND $netmask != null AND $gateway != null)
                        config interface address dynamic-interface $name $ip-address $netmask $gateway
                    </command-string>
                    <command-string>
                        #if($primaryip != null AND $secondaryip != null AND $l2features:vlan != null)
                        config interface dhcp dynamic-interface $name primary $primaryip secondary $secondaryip
                        #else if($primaryip != null AND $l2features:vlan != null)
                        config interface dhcp dynamic-interface $name primary $primaryip
                    </command-string>
                    <command-string>
                        #if($port-number != null)
                        config interface port $name $port-number
                    </command-string>
                    <command-string>
                        #if($l2features:vlan != null)
                        config interface vlan $name $l2features:vlan
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterface</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($name != null)
                        config interface delete $name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/Wlan</target>
            <platform>ALL|ciscoAirCt2504K9|Cisco 2500|RTOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateWlan</name>
                    <type>CREATE</type>
                    <command-string>config wlan create $wlanId $profileName [$ssid]</command-string>
                    <command-string>
                        #if($interfaceName != null)
                        config wlan interface $wlanId $interfaceName
                    </command-string>
                    <command-string>
                        #if($broadcastSSID != null)
                        config wlan broadcast-ssid enable $wlanId
                    </command-string>
                    <command-string>
                        #if($enableWireless != null)
                        config wlan enable $wlanId
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>RemoveWlan</name>
                    <type>DELETE</type>
                    <command-string>config wlan delete $wlanId</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface</target>
            <platform>ALL|ciscoAirCT5508K9|Cisco 5500|RTOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterface</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($name != null AND $l2features:vlan != null)
                        config interface create $name $l2features:vlan
                    </command-string>
                    <command-string>
                        #if($name != null AND $ip-address != null AND $netmask != null AND $gateway != null)
                        config interface address dynamic-interface $name $ip-address $netmask $gateway
                    </command-string>
                    <command-string>
                        #if($primaryip != null AND $secondaryip != null AND $l2features:vlan != null)
                        config interface dhcp dynamic-interface $name primary $primaryip secondary $secondaryip
                        #else if($primaryip != null AND $l2features:vlan != null)
                        config interface dhcp dynamic-interface $name primary $primaryip
                    </command-string>
                    <command-string>
                        #if($port-number != null)
                        config interface port $name $port-number
                    </command-string>
                    <command-string>
                        #if($l2features:vlan != null)
                        config interface vlan $name $l2features:vlan
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterface</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($name != null)
                        config interface delete $name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/Wlan</target>
            <platform>ALL|ciscoAirCT5508K9|Cisco 5500|RTOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateWlan</name>
                    <type>CREATE</type>
                    <command-string>config wlan create $wlanId $profileName [$ssid]</command-string>
                    <command-string>config wlan interface $wlanId $interfaceName</command-string>
                    <command-string>
                        #if($broadcastSSID != null)
                        config wlan broadcast-ssid enable $wlanId
                    </command-string>
                    <command-string>
                        #if($enableWireless != null)
                        config wlan enable $wlanId
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>RemoveWlan</name>
                    <type>DELETE</type>
                    <command-string>config wlan delete $wlanId</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l2features:vlans/vlan</target>
            <platform>ALL|ALL|ALL|RTOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVlan</name>
                    <type>CREATE</type>
                    <command-string>vlan $id</command-string>
                    <command-string>name $name</command-string>
                    <command-string>
                        #if($mode == "fabricpath")
                        mode fabricpath
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVlan</name>
                    <type>UPDATE</type>
                    <command-string>vlan $id</command-string>
                    <command-string>name $name</command-string>
                    <command-string>
                        #if($mode == "fabricpath")
                        mode fabricpath
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVlan</name>
                    <type>DELETE</type>
                    <command-string>no vlan $id</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterface</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($mode != "vlan")
                        [changeto context $context-name]
                    </command-string>
                    <command-string>
                        #if($mode == "vlan")
                        interface vlan$l2features:vlan
                        #else if($visible-interface == "true")
                        interface $name
                        #else
                        interface $inside-name
                    </command-string>
                    <command-string>
                        #if($mode != "vlan")
                        [nameif $inside-name]
                    </command-string>
                    <command-string>
                        #if($mode != "vlan" AND $ip-address != null AND $netmask != null)
                        ip address $ip-address $netmask [standby $secondaryip]
                    </command-string>
                    <command-string>
                        #if($mode != "vlan")
                        [security-level $security-level-inside]
                    </command-string>
                    <command-string>
                        #if($admin-state != null AND $admin-state == "UP")
                        no shutdown
                        #else if($admin-state != null)
                        shutdown
                    </command-string>
                    <command-string>
                        #if($mode != "vlan" AND $acl:acl-inbound-name != null)
                        access-group $acl:acl-inbound-name in interface $name
                    </command-string>
                    <command-string>
                        #if($mode != "vlan" AND $acl:acl-outbound-name != null)
                        access-group $acl:acl-outbound-name out interface $name
                    </command-string>
                    <command-string>
                        #if($mtu != null AND $inside-name != null)
                        mtu $inside-name $mtu
                    </command-string>
                    <command-string>
                        #if($speed != null)
                        speed $speed
                    </command-string>
                    <command-string>
                        #if($duplex != null)
                        duplex $duplex
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterface</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($mode != "vlan")
                        [changeto context $context-name]
                    </command-string>
                    <command-string>
                        #if($mode != "vlan" AND $acl:acl-inbound-name != null)
                        access-group $acl:acl-inbound-name in interface $name
                    </command-string>
                    <command-string>
                        #if($mode != "vlan" AND $acl:acl-outbound-name != null)
                        access-group $acl:acl-outbound-name out interface $name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterface</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($mode != "vlan" AND ($acl:acl-inbound-name != null OR $acl:acl-outbound-name != null))
                        [changeto context $context-name]
                    </command-string>
                    <command-string>
                        #if($mode != "vlan" AND $acl:acl-inbound-name != null)
                        no access-group $acl:acl-inbound-name in interface $name
                    </command-string>
                    <command-string>
                        #if($mode != "vlan" AND $acl:acl-outbound-name != null)
                        no access-group $acl:acl-outbound-name out interface $name
                    </command-string>
                    <command-string>
                        #if($mode == "sub-interface")
                        changeto system
                    </command-string>
                    <command-string>
                        #if($mode == "sub-interface")
                        no interface $name
                        #else if($mode == "vlan")
                        interface vlan$l2features:vlan
                        #else if($visible-interface == "true")
                        interface $name
                        #else
                        interface $inside-name
                    </command-string>
                    <command-string>
                        #if($mode != "vlan" AND $mode != "sub-interface")
                        [no nameif $inside-name]
                    </command-string>
                    <command-string>
                        #if($mode != "vlan" AND $mode != "sub-interface" AND $ip-address != null AND $netmask != null)
                        no ip address $ip-address $netmask [standby $secondaryip]
                    </command-string>
                    <command-string>
                        #if($mode != "vlan" AND $mode != "sub-interface")
                        [no security-level $security-level-inside]
                    </command-string>
                    <command-string>
                        #if($speed != null)
                        speed $speed
                    </command-string>
                    <command-string>
                        #if($duplex != null)
                        duplex $duplex
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/hsrp:hsrp</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceHSRP</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../mode == "vlan")
                        interface vlan $../vlan
                        #else
                        interface $../name
                    </command-string>
                    <command-string>hsrp version $version</command-string>
                    <command-string>hsrp $group</command-string>
                    <command-string>
                        #if($../mode == "vlan" AND $auth-type == "md5-key-string")
                        authentication md5 key-string $auth-key
                        #else if($../mode == "vlan" AND $auth-type == "md5-key-chain")
                        authentication md5 key-chain $auth-key
                        #else if($../mode == "vlan" AND $auth-type == "text")
                        authentication text $auth-key
                    </command-string>
                    <command-string>
                        #if($preempt-reload != null) preempt delay reload $preempt-reload
                    </command-string>
                    <command-string>priority $priority</command-string>
                    <command-string>ip $ip-address</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/allowed-vlans/vlan</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAddVlanToInterface</name>
                    <type>CREATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($../../mode == "trunk")
                        switchport trunk allowed vlan add $id
                        #else if($../../mode == "access")
                        switchport access vlan $id
                        #else if($../../mode == "voice")
                        switchport voice vlan $id
                    </command-string>
                    <command-string>no shutdown</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAddVlanToInterface</name>
                    <type>DELETE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($../../mode == "trunk")
                        switchport trunk allowed vlan remove $id
                        #else if($../../mode == "access")
                        no switchport access vlan $id
                        #else if($../../mode == "voice")
                        no switchport voice vlan $id
                    </command-string>
                    <command-string>no shutdown</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/allowed-vlans/vlan</target>
            <platform>ALL|ALL|Cisco Nexus 1000V|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAddVlanToInterface</name>
                    <type>CREATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($../../mode == "trunk") switchport trunk allowed vlan add $id
                        #else if($../../mode == "access") switchport access vlan $id
                        #else if($../../mode == "voice") switchport voice vlan $id
                    </command-string>
                    <command-string>no shutdown</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAddVlanToInterface</name>
                    <type>DELETE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($../../mode == "trunk")
                        switchport trunk allowed vlan remove $id
                        #else if($../../mode == "access")
                        no switchport access vlan $id
                        #else if($../../mode == "voice")
                        no switchport voice vlan $id
                    </command-string>
                    <command-string>no shutdown</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/allowed-vlans/vlan</target>
            <platform>ALL|ALL|Cisco Nexus 1000V|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseInterfaceAllowedVlan</name>
                    <type>PARSE</type>
                    <command-string>switchport trunk allowed vlan $id</command-string>
                </device-operation>
                <device-operation>
                    <name>CreateAllowVlanOnTrunk</name>
                    <type>CREATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>switchport</command-string>
                    <command-string>switchport mode $../../mode
                        #if($../../mode == "trunk") switchport mode trunk
                        #else if($../../mode == "voice") switchport mode access
                    </command-string>
                    <command-string>
                        #if($../../mode == "trunk") switchport trunk allowed vlan add $id
                        #else if($../../mode == "access") switchport access vlan $id
                        #else if($../../mode == "voice") switchport voice vlan $id
                    </command-string>
                    <command-string>
                        #if($../../mode == "access") spanning-tree portfast
                    </command-string>
                    <command-string>
                        #if($../../name != null)
                        no shutdown
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAllowVlanOnTrunk</name>
                    <type>DELETE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($../../mode == "trunk") switchport trunk allowed vlan remove $id
                        #else if($../../mode == "access") no switchport access vlan $id
                        #else if($../../mode == "voice") no switchport voice vlan $id
                    </command-string>
                    <command-string>
                        #if($../../mode == "access") no spanning-tree portfast
                    </command-string>
                    <command-string>
                        #if($../../name != null)
                        no shutdown
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l2features:vlans/vlan</target>
            <platform>ALL|ALL|ALL|UCSOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseVlan</name>
                    <type>PARSE</type>
                    <command-string>scope eth-uplink create vlan $name $id</command-string>
                </device-operation>
                <device-operation>
                    <name>CreateVlan</name>
                    <type>CREATE</type>
                    <command-string>scope eth-uplink</command-string>
                    <command-string>create vlan $name $id</command-string>
                    <command-string>set sharing none</command-string>
                    <command-string>commit-buffer</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVlan</name>
                    <type>UPDATE</type>
                    <command-string>scope eth-uplink</command-string>
                    <command-string>update vlan $name $id</command-string>
                    <command-string>set sharing none</command-string>
                    <command-string>commit-buffer</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVlan</name>
                    <type>DELETE</type>
                    <command-string>scope eth-uplink</command-string>
                    <command-string>delete vlan $name</command-string>
                    <command-string>commit-buffer</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/is-commit</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>PersistContextConfig</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($is-commit == 'true')
                        changeto context $../name
                    </command-string>
                    <command-string>
                        #if($is-commit == 'true')
                        write memory
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l2features:vlans/vlan</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVlan</name>
                    <type>CREATE</type>
                    <command-string>vlan $id</command-string>
                    <command-string>name $name</command-string>
                    <command-string>
                        #if($mode == "fabricpath") mode fabricpath
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVlan</name>
                    <type>UPDATE</type>
                    <command-string>vlan $id</command-string>
                    <command-string>name $name</command-string>
                    <command-string>
                        #if($mode == "fabricpath")
                        mode fabricpath
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVlan</name>
                    <type>DELETE</type>
                    <command-string>no vlan $id</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/TrunkPort</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createTrunkPort</name>
                    <type>CREATE</type>
                    <command-string>interface $interfaceName</command-string>
                    <command-string>description $description</command-string>
                    <command-string>switchport mode trunk</command-string>
                    <command-string>$interfaceState shutdown</command-string>
                </device-operation>
                <device-operation>
                    <name>removeTrunkPort</name>
                    <type>DELETE</type>
                    <command-string>interface $interfaceName</command-string>
                    <command-string>no switchport mode trunk</command-string>
                    <command-string>no switchport trunk encapsulation dot1q</command-string>
                    <command-string>no switchport</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/CopyToDevice</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CopyToDevice</name>
                    <type>CREATE</type>
                    <command-string>copy $srcFile $destFile</command-string>
                    <command-string>reload</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/CopyToDevice</target>
            <platform>ALL|ALL|ALL|WAASOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CopyToDevice</name>
                    <type>CREATE</type>
                    <command-string>copy $srcFile $destFile</command-string>
                    <command-string>reload</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/CopyToDevice</target>
            <platform>ALL|ALL|ALL|ACEOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CopyToDevice</name>
                    <type>CREATE</type>
                    <command-string>copy $srcFile $destFile</command-string>
                    <command-string>reload</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/PortFast</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePortFast</name>
                    <type>CREATE</type>
                    <command-string>interface $interfaceName</command-string>
                    <command-string>
                        #if($isTrunk == 'true')
                        spanning-tree port type edge trunk
                        #else
                        spanning-tree port type edge
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>RemovePortFast</name>
                    <type>CREATE</type>
                    <command-string>interface $interfaceName</command-string>
                    <command-string>
                        #if($isTrunk == 'true')
                        no spanning-tree port type edge trunk
                        #else
                        no spanning-tree port type edge
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/VlanAdditiontoTrunk</target>
            <platform>ALL|ALL|Cisco Nexus 1000V|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVlanAdditiontoTrunk</name>
                    <type>CREATE</type>
                    <command-string>interface $interfaceName</command-string>
                    <command-string>switchport trunk allowed vlan add $l2features:vlanId</command-string>
                    <command-string>$interfaceState shutdown</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/VlanAdditiontoTrunk</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>RemoveVlanAdditiontoTrunk</name>
                    <type>DELETE</type>
                    <command-string>interface $interfaceName</command-string>
                    <command-string>switchport trunk allowed vlan remove $l2features:vlanId</command-string>
                </device-operation>
                <device-operation>
                    <name>CreateVlanAdditiontoTrunk</name>
                    <type>CREATE</type>
                    <command-string>interface $interfaceName</command-string>
                    <command-string>switchport trunk allowed vlan add $l2features:vlanId</command-string>
                    <command-string>$interfaceState shutdown</command-string>
                </device-operation>
            </device-operations>
        </operation>
    <operation>
            <target>/controller:devices/device/l3features:routes/route</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseRoute</name>
                    <type>PARSE</type>
                    <command-string>ip route @convertToCidr($dest-ip-address, $dest-mask) $next-hop-ip [vrf $vrf-name] [tag $tag] [name $name] [$metric]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/routes/route</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseVrfStaticRouteEntry</name>
                    <type>PARSE</type>
                    <command-string>
                        ip route @convertToCidr($dest-ip-address, $dest-mask) $next-hop-ip [vrf $../../name] [tag $tag] [name $name] [$metric]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:routes/route/options</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRoute</name>
                    <type>CREATE</type>
                    <command-string>
                        ip route @convertToCidr($../dest-ip-address, $../dest-mask) $next-hop-ip [vrf $vrf-name] [tag $tag] [name $name] [$metric]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateRoute</name>
                    <type>UPDATE</type>
                    <command-string>
                        ip route @convertToCidr($../dest-ip-address, $../dest-mask) $next-hop-ip [vrf $vrf-name] [tag $tag] [name $name] [$metric]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRoute</name>
                    <type>DELETE</type>
                    <command-string>
                        no ip route @convertToCidr($../dest-ip-address, $../dest-mask) $next-hop-ip [vrf $vrf-name] [tag $tag] [name $name] [$metric]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/routes/route/options</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVrfRouteEntry</name>
                    <type>CREATE</type>
                    <command-string>
                    ip route @convertToCidr($../dest-ip-address, $../dest-mask) $next-hop-ip [vrf $../../../name] [tag $tag] [name $name] [$metric] [track $track]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVrfRouteEntry</name>
                    <type>UPDATE</type>
                    <command-string>
                    ip route @convertToCidr($../dest-ip-address, $../dest-mask) $next-hop-ip [vrf $../../../name] [tag $tag] [name $name] [$metric] [track $track]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVrfRouteEntry</name>
                    <type>DELETE</type>
                    <command-string>
                    no ip route @convertToCidr($../dest-ip-address, $../dest-mask) $next-hop-ip [vrf $../../../name] [tag $tag] [name $name] [$metric] [track $track]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

       
        <operation>
         <target>/controller:devices/device/interface:interfaces/interface/maximum-segment-size</target>
         <platform>ALL|ALL|ALL|ALL|Cisco Systems</platform>
         <device-operations>
            <device-operation>
               <name>AddMSSToInterface</name>
               <type>CREATE</type>
               <command-string>interface  $../name</command-string>
               <command-string>ip tcp adjust-mss $maximum-segment-size</command-string>
            </device-operation>
            <device-operation>
               <name>RemoveMSSToInterface</name>
               <type>DELETE</type>
               <command-string>interface  $../name</command-string> 
               <command-string>no ip tcp adjust-mss $maximum-segment-size</command-string>                                           
            </device-operation>
         </device-operations>
      </operation>     
      
     <!-- <operation>
         <target>/controller:devices/device/interface:interfaces/interface</target>
         <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
         <device-operations>
            <device-operation>
               <name>CreateInterface</name>
               <type>CREATE</type>
               <command-string>
                  #if($mode != "vlan")
                    [changeto context $context-name]
                  #else
                     changeto system
               </command-string>
               <command-string>
                  #if($mode == "vlan")
                     interface vlan$l2features:vlan
                  #else if($visible-interface == "true")
                     interface $name
                  #else
                     interface $inside-name
               </command-string>
               <command-string>
                  #if($description != null)
                    description $description
               </command-string>
               <command-string>
                  #if($mode != "vlan")
                    [nameif $inside-name]</command-string>
               <command-string>
                  #if($mode != "vlan" AND $ip-address != null AND $netmask != null)
                    ip address $ip-address $netmask [standby $secondaryip]</command-string>
               <command-string>
                  #if($mode != "vlan")
                    [security-level $security-level-inside]
               </command-string>
               <command-string>
                  #if($admin-state != null AND $admin-state == "enabled")
                    no shutdown
                  #else if($admin-state != null)
                    shutdown
               </command-string>
               <command-string>
                  #if($mode != "vlan" AND $acl:acl-inbound-name != null)
                  access-group $acl:acl-inbound-name in interface $name
               </command-string>
               <command-string>
                  #if($mode != "vlan" AND $acl:acl-outbound-name != null)
                  access-group $acl:acl-outbound-name out interface $name
               </command-string>
            </device-operation>
            <device-operation>
               <name>UpdateInterface</name>
               <type>UPDATE</type>
               <command-string>
                  #if($mode != "vlan")
                    [changeto context $context-name]
                  #else
                     changeto system
               </command-string>
               <command-string>
                  #if($mode == "vlan")
                     interface vlan$l2features:vlan
                  #else if($visible-interface == "true")
                     interface $name
                  #else
                     interface $inside-name
               </command-string>
               <command-string>
                  #if($description != null)
                    description $description
               </command-string>
               <command-string>
                  #if($mode != "vlan")
                    [nameif $inside-name]
               </command-string>
               <command-string>
                  #if($mode != "vlan" AND $ip-address != null AND $netmask != null)
                    ip address $ip-address $netmask [standby $secondaryip]
               </command-string>
               <command-string>
                  #if($mode != "vlan")
                    [security-level $security-level-inside]
               </command-string>
               <command-string>
                  #if($admin-state != null AND $admin-state == "enabled")
                    no shutdown
                  #else if($admin-state != null)
                    shutdown
               </command-string>
               <command-string>
                  #if($mode != "vlan" AND $acl:acl-inbound-name != null)
                  access-group $acl:acl-inbound-name in interface $name
               </command-string>
               <command-string>
                  #if($mode != "vlan" AND $acl:acl-outbound-name != null)
                  access-group $acl:acl-outbound-name out interface $name
               </command-string>
            </device-operation>
            <device-operation>
               <name>DeleteInterface</name>
               <type>DELETE</type>
               <command-string>
                  #if($mode != "vlan" AND ($acl:acl-inbound-name != null OR $acl:acl-outbound-name != null))
                    [changeto context $context-name]
                  #else if($mode == "vlan" OR $mode == "sub-interface")
                    changeto system
               </command-string>
               <command-string>
                  #if($mode == "sub-interface")
                     no interface $name
                  #else if($mode == "vlan")
                     interface vlan$l2features:vlan
                  #else if($visible-interface == "true")
                     interface $name
                  #else
                     interface $inside-name
               </command-string>
               <command-string>
                  #if($mode != "vlan" AND $acl:acl-inbound-name != null)
                  no access-group $acl:acl-inbound-name in interface $name
               </command-string>
               <command-string>
                  #if($mode != "vlan" AND $acl:acl-outbound-name != null)
                  no access-group $acl:acl-outbound-name out interface $name
               </command-string>
               <command-string>
                  #if($description != null)
                    no description $description
               </command-string>
               <command-string>
                  #if($mode != "vlan" AND $mode != "sub-interface")
                  [no nameif $inside-name]
               </command-string>
               <command-string>
                  #if($mode != "vlan" AND $mode != "sub-interface" AND $ip-address != null AND $netmask != null)
                  no ip address $ip-address $netmask [standby $secondaryip]</command-string>
               <command-string>
                  #if($mode != "vlan" AND $mode != "sub-interface")
                  [no security-level $security-level-inside]
               </command-string>
            </device-operation>
         </device-operations>
      </operation>-->
      <operation>
         <target>/controller:devices/device/firewall:virtual-devices/virtual-device/interface:interfaces/interface</target>
         <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
         <device-operations>
            <device-operation>
               <name>CreateContextInterface</name>
               <type>CREATE</type>
               <command-string>
                  #if($mode != "vlan")
                    [changeto context $../../name]
                  #else
                     changeto system
               </command-string>
               <command-string>
                  #if($mode == "vlan")
                     interface vlan$l2features:vlan
                  #else if($visible-interface == "true")
                     interface $name
                  #else
                     interface $inside-name
               </command-string>
               <command-string>
                  #if($description != null)
                    description $description
               </command-string>
               <command-string>
                  #if($mode != "vlan")
                    [nameif $inside-name]</command-string>
               <command-string>
                  #if($mode != "vlan" AND $ip-address != null AND $netmask != null)
                    ip address $ip-address $netmask [standby $secondaryip]</command-string>
               <command-string>
                  #if($mode != "vlan")
                    [security-level $security-level-inside]
               </command-string>
               <command-string>
                  #if($admin-state != null AND $admin-state == "UP")
                    no shutdown
                  #else if($admin-state != null)
                    shutdown
               </command-string>
               <command-string>
                  #if($mode != "vlan" AND $acl-inbound-name != null)
                  access-group $acl-inbound-name in interface $name
               </command-string>
               <command-string>
                  #if($mode != "vlan" AND $acl-outbound-name != null)
                  access-group $acl-outbound-name out interface $name
               </command-string>
            </device-operation>
            <device-operation>
               <name>UpdateContextInterface</name>
               <type>UPDATE</type>
               <command-string>
                  #if($mode != "vlan")
                    [changeto context $../../name]
                  #else
                     changeto system
               </command-string>
               <command-string>
                  #if($mode == "vlan")
                     interface vlan$l2features:vlan
                  #else if($visible-interface == "true")
                     interface $name
                  #else
                     interface $inside-name
               </command-string>
               <command-string>
                  #if($description != null)
                    description $description
               </command-string>
               <command-string>
                  #if($mode != "vlan")
                    [nameif $inside-name]
               </command-string>
               <command-string>
                  #if($mode != "vlan" AND $ip-address != null AND $netmask != null)
                    ip address $ip-address $netmask [standby $secondaryip]
               </command-string>
               <command-string>
                  #if($mode != "vlan")
                    [security-level $security-level-inside]
               </command-string>
               <command-string>
                  #if($admin-state != null AND $admin-state == "UP")
                    no shutdown
                  #else if($admin-state != null)
                    shutdown
               </command-string>
               <command-string>
                  #if($mode != "vlan" AND $acl-inbound-name != null)
                  access-group $acl-inbound-name in interface $name
               </command-string>
               <command-string>
                  #if($mode != "vlan" AND $acl-outbound-name != null)
                  access-group $acl-outbound-name out interface $name
               </command-string>
            </device-operation>
            <device-operation>
               <name>DeleteContextInterface</name>
               <type>DELETE</type>
               <command-string>
                  #if($mode != "vlan" AND ($acl-inbound-name != null OR $acl-outbound-name != null))
                    [changeto context $../../name]
                  #else if($mode == "vlan" OR $mode == "sub-interface")
                    changeto system
               </command-string>
               <command-string>
                  #if($mode == "sub-interface")
                     no interface $name
                  #else if($mode == "vlan")
                     interface vlan$l2features:vlan
                  #else if($visible-interface == "true")
                     interface $name
                  #else
                     interface $inside-name
               </command-string>
               <command-string>
                  #if($mode != "vlan" AND $acl-inbound-name != null)
                  no access-group $acl-inbound-name in interface $name
               </command-string>
               <command-string>
                  #if($mode != "vlan" AND $acl-outbound-name != null)
                  no access-group $acl-outbound-name out interface $name
               </command-string>
               <command-string>
                  #if($description != null)
                    no description $description
               </command-string>
               <command-string>
                  #if($mode != "vlan" AND $mode != "sub-interface")
                  [no nameif $inside-name]
               </command-string>
               <command-string>
                  #if($mode != "vlan" AND $mode != "sub-interface" AND $ip-address != null AND $netmask != null)
                  no ip address $ip-address $netmask [standby $secondaryip]</command-string>
               <command-string>
                  #if($mode != "vlan" AND $mode != "sub-interface")
                  [no security-level $security-level-inside]
               </command-string>
            </device-operation>
         </device-operations>
      </operation>
      <operation>
         <target>/controller:devices/device/interface:interfaces/interface/hsrp:hsrp</target>
         <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
         <device-operations>
            <device-operation>
               <name>CreateInterfaceHSRP</name>
               <type>CREATE</type>
               <command-string>                                    
                  #if($../mode == "vlan") 
                     interface vlan $../vlan
                  #else 
                     interface $../name                  
               </command-string>               
               <command-string>hsrp version $version</command-string>
               <command-string>hsrp $group</command-string>
               <command-string>
                  #if($../mode == "vlan" AND $auth-type == "md5-key-string")
                     authentication md5 key-string $auth-key
                  #else if($../mode == "vlan" AND $auth-type == "md5-key-chain")
                     authentication md5 key-chain $auth-key
                  #else if($../mode == "vlan" AND $auth-type == "text")
                     authentication text $auth-key                                    
               </command-string>
               <command-string>
                  #if($preempt-reload != null) preempt delay reload $preempt-reload
               </command-string>
               <command-string>priority $priority</command-string>
               <command-string>ip $ip-address</command-string>
            </device-operation>
         </device-operations>
      </operation>
      <operation>
         <target>/controller:devices/device/interface:interfaces/interface/allowed-vlans/vlan</target>
         <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
         <device-operations>
            <device-operation>
               <name>ParseInterfaceAllowedVlan</name>
               <type>PARSE</type>
               <command-string>
                     switchport trunk allowed vlan $id
               </command-string>
            </device-operation>
            <device-operation>
               <name>CreateInterfaceAllowedVlan</name>
               <type>CREATE</type>
               <command-string>interface $../../name</command-string>
               <command-string>switchport</command-string>
               <command-string>switchport mode $../../mode
                  #if($../../mode == "trunk")
                  	 switchport mode trunk
                  #else if($../../mode == "voice")
                  	 switchport mode access
               </command-string>
               <command-string>
                  #if($../../mode == "trunk")
                  	 switchport trunk allowed vlan add $id
                  #else if($../../mode == "access")
                  	 switchport access vlan $id
                  #else if($../../mode == "voice")
                  	 switchport voice vlan $id
               </command-string>
               <command-string>
                  #if($../../mode == "access")
                  	 spanning-tree portfast
               </command-string>
               <command-string>
                  #if($../../admin-state == "UP")
                  	 no shutdown
               </command-string>
               <command-string>
                  #if($../../mode == "access")
                   description $description
               </command-string>
            </device-operation>
            <device-operation>
               <name>DeleteInterfaceAllowedVlan</name>
               <type>DELETE</type>
               <command-string>interface $../../name</command-string>
               <command-string>
                  #if($../../mode == "trunk")
                  	 switchport trunk allowed vlan remove $id
                  #else if($../../mode == "access")
                  	 no switchport access vlan $id
                  #else if($../../mode == "voice")
                  	 no switchport voice vlan $id
               </command-string>
               <command-string>
                  #if($../../mode == "access")
                  	 no spanning-tree portfast
               </command-string>
               <command-string>
                  #if($../../admin-state == "active")
                  	 no shutdown
                  #else shutdown
               </command-string>
            </device-operation>
         </device-operations>
      </operation>
      <operation>
         <target>/controller:devices/device/interface:interfaces/interface/allowed-vlans/vlan</target>
         <platform>ALL|ALL|Cisco Nexus 1000V|NXOS|Cisco Systems</platform>
         <device-operations>
            <device-operation>
               <name>ParseInterfaceAllowedVlan</name>
               <type>PARSE</type>
               <command-string>
                     switchport trunk allowed vlan $id
               </command-string>
            </device-operation>
            <device-operation>
               <name>CreateInterfaceAllowedVlan</name>
               <type>CREATE</type>
               <command-string>interface $../../name</command-string>
               <command-string>switchport</command-string>
               <command-string>switchport mode $../../mode
                  #if($../../mode == "trunk")
                   switchport mode trunk
                  #else if($../../mode == "voice")
                   switchport mode access
               </command-string>
               <command-string>
                  #if($../../mode == "trunk")
                   switchport trunk allowed vlan add $id
                  #else if($../../mode == "access")
                   switchport access vlan $id
                  #else if($../../mode == "voice")
                   switchport voice vlan $id
               </command-string>
               <command-string>
                  #if($../../mode == "access")
                   spanning-tree portfast
               </command-string>
               <command-string>
                  #if($../../adminstate == "active")
                   no shutdown
                  #else shutdown
               </command-string>
            </device-operation>
            <device-operation>
               <name>DeleteInterfaceAllowedVlan</name>
               <type>DELETE</type>
               <command-string>interface $../../name</command-string>
               <command-string>
                  #if($../../mode == "trunk") switchport trunk allowed vlan remove $id
                  #else if($../../mode == "access") no switchport access vlan $id
                  #else if($../../mode == "voice") no switchport voice vlan $id
               </command-string>
               <command-string>
                  #if($../../mode == "access") no spanning-tree portfast
               </command-string>
               <command-string>
                  #if($../../adminstate == "active") no shutdown
                  #else shutdown
               </command-string>
            </device-operation>
         </device-operations>
      </operation>
      <operation>
         <target>/controller:devices/device/interface:interfaces/interface</target>
         <platform>ALL|ALL|ALL|UCSOS|Cisco Systems</platform>
         <device-operations>
            <device-operation>
               <name>ParseInterface</name>
               <type>PARSE</type>
               <command-string>scope eth-server fabric $fabric enter interface $name</command-string>
               <command-string>set user-label $description</command-string>
            </device-operation>
         </device-operations>
      </operation>
      <!--<operation>
         <target>/controller:devices/device/l2features:vlans/vlan</target>
         <platform>ALL|ALL|ALL|UCSOS|Cisco Systems</platform>
         <device-operations>
            <device-operation>
               <name>ParseVlan</name>
               <type>PARSE</type>
               <command-string>scope eth-uplink create vlan $name $id</command-string>
            </device-operation>
            <device-operation>
               <name>CreateVlan</name>
               <type>CREATE</type>
               <command-string>scope eth-uplink</command-string>
               <command-string>create vlan $name $id</command-string>
               <command-string>set sharing none</command-string>
               <command-string>commit-buffer</command-string>
            </device-operation>
            <device-operation>
               <name>DeleteVlan</name>
               <type>DELETE</type>
               <command-string>scope eth-uplink</command-string>
               <command-string>delete vlan $name</command-string>
               <command-string>commit-buffer</command-string>
            </device-operation>
         </device-operations>
      </operation>
      <operation>
         <target>/controller:devices/device/l2features:vlans/vlan</target>
         <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
         <device-operations>
            <device-operation>
               <name>CreateVlan</name>
               <type>CREATE</type>
               <command-string>vlan $id</command-string>
               <command-string>name $name</command-string>
               <command-string>
                  #if($mode == "fabricpath") mode fabricpath
               </command-string>
            </device-operation>
            <device-operation>
               <name>DeleteVlan</name>
               <type>DELETE</type>
               <command-string>no vlan $id</command-string>
            </device-operation>
         </device-operations>
      </operation>
      <operation>
         <target>/controller:devices/device/l2features:vlans/vlan</target>
         <platform>ALL|ALL|ALL|IOSXE|Cisco Systems</platform>
         <device-operations>
            <device-operation>
               <name>CreateVlan</name>
               <type>CREATE</type>
               <command-string>vlan $id</command-string>
               <command-string>name $name</command-string>
               <command-string>
                  #if($mode == "fabricpath")
                     mode fabricpath
               </command-string>
            </device-operation>
                        <device-operation>
	                   <name>UpdateVlan</name>
	                   <type>UPDATE</type>
	                   <command-string>vlan $id</command-string>
	                   <command-string>name $name</command-string>
	                   <command-string>
	                      #if($mode == "fabricpath")
	                         mode fabricpath
	                   </command-string>
	                </device-operation>
			<device-operation>
               <name>DeleteVlan</name>
               <type>DELETE</type>
               <command-string>no vlan $id</command-string>
            </device-operation>
         </device-operations>
      </operation>            -->
     <!-- <operation>
         <target>/controller:devices/device/l2features:vlans/vlan</target>
         <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
         <device-operations>
            <device-operation>
               <name>CreateVlan</name>
               <type>CREATE</type>
               <command-string>vlan $id</command-string>
               <command-string>name $name</command-string>
               <command-string>
                  #if($mode == "fabricpath")
                     mode fabricpath
               </command-string>
            </device-operation>
            <device-operation>
               <name>UpdateVlan</name>
               <type>UPDATE</type>
               <command-string>vlan $id</command-string>
               <command-string>name $name</command-string>
               <command-string>
                  #if($mode == "fabricpath")
                     mode fabricpath
               </command-string>
            </device-operation>
            <device-operation>
               <name>DeleteVlan</name>
               <type>DELETE</type>
               <command-string>no vlan $id</command-string>
            </device-operation>
         </device-operations>
      </operation>-->
      
      <operation>
         <target>/controller:devices/device/l2features:vn-services/vn-service</target>
         <platform>ALL|Cisco Nexus 1000V|Cisco Nexus 1000V|NXOS|Cisco Systems</platform>
         <device-operations>
            <device-operation>
               <name>CreateVNService</name>
               <type>CREATE</type>
               <command-string>vservice node $node-name type $node-type</command-string>
               <command-string>ip address $data-ipaddress</command-string>
               <command-string>
                  #if($mode == "l2" AND vlan-name != null)
                    adjacency l2 vxlan bridge-domain $l2features:vlan-name
                  #else if($mode == "l2")
                    adjacency l2 vlan $inside-vlan
				  #else
					adjacency l3
               </command-string>
               <command-string>fail-mode close</command-string>
            </device-operation>
            <device-operation>
               <name>DeleteVNService</name>
               <type>DELETE</type>
               <command-string>no vservice node $node-name type $node-type</command-string>
            </device-operation>
         </device-operations>
      </operation>
      
        <operation>
            <target>/controller:devices/device/l2features:vn-services/vn-service/port-profile-name</target>
            <platform>ALL|Cisco Nexus 1000V|Cisco Nexus 1000V|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>AttachVNServiceToPortProfile</name>
                    <type>CREATE</type>
                    <command-string>port-profile type vethernet $port-profile-name</command-string>
                    <command-string>org $../org-hierarchy</command-string>
                    <command-string>vservice node $../node-name profile $../security-profile-name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVNservicePortGroup</name>
                    <type>DELETE</type>
                    <command-string>port-profile type vethernet $port-profile-name</command-string>
                    <command-string>no org $../org-hierarchy</command-string>
                    <command-string>no vservice node $../node-name profile $../security-profile-name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/l3features:static-routes/static-route</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateStaticRoute</name>
                    <type>CREATE</type>
                    <command-string>route $user-id-grp-name $ip-address $mask $next-hop-ip $metric</command-string>
                </device-operation>
                <device-operation>
                    <name>RemoveStaticRoute</name>
                    <type>DELETE</type>
                    <command-string>no route $user-id-grp-name $ip-address $mask $next-hop-ip $metric</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/VlanAdditionVSMTrunk</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVlanAdditionVSMTrunk</name>
                    <type>CREATE</type>
                    <command-string>interface $interfaceName</command-string>
                    <command-string>switchport trunk allowed vlan add</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/wanoptimizer:wanop/central-manager-config</target>
            <platform>ALL|ALL|ALL|WAASOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createCentralManagerConfig</name>
                    <type>CREATE</type>
                    <command-string>primary-interface $primary-interface-name</command-string>
                    <command-string>central-manager address $ip-address</command-string>
                </device-operation>
                <device-operation>
                    <name>deleteCenteralManagerConfig</name>
                    <type>DELETE</type>
                    <command-string>no central-manager address $ip-address</command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <!--<operation>
            <target>/controller:devices/device/port-profiles/port-profile</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePortProfile</name>
                    <type>CREATE</type>
                    <command-string>port-profile $name</command-string>
                    <command-string>switchport trunk allowed vlan add $l2features:vlan-id</command-string>
                </device-operation>
                <device-operation>
                    <name>DeletePortProfile</name>
                    <type>DELETE</type>
                    <command-string>port-profile $name</command-string>
                    <command-string>switchport trunk allowed vlan remove $l2features:vlan-id</command-string>
                </device-operation>
            </device-operations>
        </operation>-->
        
        <operation>
            <target>/controller:devices/device/wanoptimizer:wanop/application-optimization</target>
            <platform>ALL|ALL|ALL|WAASOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>enableAO</name>
                    <type>CREATE</type>
                    <command-string>accelerator $application-optimization enable</command-string>
                </device-operation>
                <device-operation>
                    <name>disableAO</name>
                    <type>DELETE</type>
                    <command-string>no accelerator $application-optimization enable</command-string>
                </device-operation>
            </device-operations>
        </operation>
        
		<operation>
         <target>/controller:devices/device/l3features:static-routes/static-route</target>
			<platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
         <device-operations>
                <device-operation>
                    <name>CreateStaticRoute</name>
                    <type>CREATE</type>
                    <command-string>route $user-id-grp-name $ip-address $mask $next-hop-ip $metric</command-string>
                </device-operation>
                <device-operation>
                    <name>RemoveStaticRoute</name>
                    <type>DELETE</type>
                    <command-string>no route $user-id-grp-name $ip-address $mask $next-hop-ip $metric</command-string>
                </device-operation>
            </device-operations>
        </operation>
       
        <operation>
            <target>/controller:devices/device/wanoptimizer:wanop/central-manager-config</target>
            <platform>ALL|ALL|ALL|WAASOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createCentralManagerConfig</name>
                    <type>CREATE</type>
                    <command-string>primary-interface $primary-interface-name</command-string>
                    <command-string>central-manager address $ip-address</command-string>
                </device-operation>
                <device-operation>
                    <name>deleteCenteralManagerConfig</name>
                    <type>DELETE</type>
                    <command-string>no central-manager address $ip-address</command-string>
                </device-operation>
            </device-operations>
        </operation>
       
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/static-routes/static-route</target>
            <platform>ALL|ALL|ALL|ACEOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVrfStaticRouteEntry</name>
                    <type>CREATE</type>
                    <command-string>changeto $../../name</command-string>
                    <command-string>ip route $dest-ip-address $dest-mask $next-hop-ip</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVrfStaticRouteEntry</name>
                    <type>DELETE</type>
                    <command-string>changeto $../../name</command-string>
                    <command-string>no ip route $dest-ip-address $dest-mask $next-hop-ip</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/ObjectOperation</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>removeObjectOperation</name>
                    <type>DELETE</type>
                    <command-string>changeto context $contextName</command-string>
                    <command-string>no object network $objectName</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <!--<operation>
            <target>/controller:devices/device/ACLonInterface</target>
            <platform>ALL|ALL|ALL|ACEOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ApplyACLonInterface</name>
                    <type>CREATE</type>
                    <command-string>changeto $contextName</command-string>
                    <command-string>interface vlan $l2features:vlanId</command-string>
                    <command-string>access-group input $accesslistName</command-string>
                </device-operation>
            </device-operations>
        </operation>-->
        
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVrf</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($name != null AND $name != "GLOBAL")
                        vrf context $name
                    </command-string>
                    <command-string>
                        #if($rd != null)
                        rd $rd
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVrf</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($name != null AND $name != "GLOBAL")
                        no vrf context $name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:community-lists/community-list</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateCommunityList</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($community-list-entry != null AND $community-list-name != null AND $condition != null AND $value != null)
                        ip community-list $community-list-entry $community-list-name $condition $value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteCommunityList</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($community-list-entry != null AND $community-list-name != null AND $condition != null AND $value != null)
                        no ip community-list $community-list-entry $community-list-name $condition $value
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:route-maps/route-map</target>
            <platform>ALL|ALL|ALL|ALL|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseRouteMap</name>
                    <type>PARSE</type>
                    <command-string>
                        route-map $name $action $seq
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/l3features:route-maps/route-map/route-map-entries</target>
            <platform>ALL|ALL|ALL|ALL|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouteMap</name>
                    <type>CREATE</type>
                    <command-string>route-map $../name [$action] [$seq]</command-string>
                    <command-string>
                        #if($match-condition-type == 'prefix-list')
                        [match ip address prefix-list $prefix-list]
                        #else if ($match-condition-type == 'community')
                        [match community $community-name]
                        #else if ($match-condition-type == 'route-type')
                        [match route-type $route-type-value]
                    </command-string>
                    <command-string>[set ip next-hop $next-hop-value]</command-string>
                    <command-string>[set local-preference $local-preference-value]</command-string>
                    <command-string>[set community $community-attribute]</command-string>
                    <command-string>[set as-path prepend $as-path-prepend]</command-string>
                    <command-string>[set weight $weight]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouteMap</name>
                    <type>DELETE</type>
                    <command-string>route-map $../name [$action] [$seq]</command-string>
                    <command-string>[no set ip next-hop $next-hop-value]</command-string>
                    <command-string>
                        #if($local-preference-value != null)
                        no set local-preference
                    </command-string>
                    <command-string>
                        #if($community-attribute != null)
                        no set community
                    </command-string>
                    <command-string>[no set as-path prepend $as-path-prepend]</command-string>
                    <command-string>
                        #if($weight != null)
                            no set weight
                    </command-string>
                    <command-string>no match ip address prefix-list $prefix-list</command-string>
                    <command-string>
                        #if($match-condition-type == 'prefix-list')
                        [no match ip address prefix-list $prefix-list]
                        #else if ($match-condition-type == 'community')
                        [no match community $community-name]
                        #else if ($match-condition-type == 'route-type')
                        [no match route-type $route-type-value]
                    </command-string>
                    <command-string>
                        #if($action != null)
                        no route-map $../name $action $seq
                        #else
                        no route-map $../name $seq
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
       
        <operation>
            <target>/controller:devices/device/firewall:network-objects/network-object</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNetworkObject</name>
                    <type>CREATE</type>
                    <command-string>changeto context $vrf-name</command-string>
                    <command-string>object-group network $object-group-name</command-string>
                    <command-string>description $description</command-string>
                    <command-string>#if($type != null AND $type == "host")
                                        network-object host $ip-address
                                    #else
                                        network-object $ip-address $netmask
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNetworkObject</name>
                    <type>DELETE</type>
                    <command-string>changeto context $vrf-name</command-string>
                    <command-string>object-group network $object-group-name</command-string>
                    <command-string>no description $description</command-string>
                    <command-string>
                        #if($type != null AND $type == "host")
                            no network-object host $ip-address
                        #else
                            no network-object $ip-address $netmask
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/network-objects/network-object</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextNetworkObject</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>object-group network $object-group-name</command-string>
                    <command-string>description $description</command-string>
                    <command-string>
                        #if($type != null AND $type == "host")
                          network-object host $ip-address
                        #else
                          network-object $ip-address $netmask
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextNetworkObject</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>object-group network $object-group-name</command-string>
                    <command-string>no description $description</command-string>
                    <command-string>
                        #if($type != null AND $type == "host")
                            no network-object host $ip-address
                        #else
                            no network-object $ip-address $netmask
                    </command-string>
                    <command-string>no object-group network $object-group-name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/wanoptimizer:wanop/application-optimization</target>
            <platform>ALL|ALL|ALL|WAASOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>enableAO</name>
                    <type>CREATE</type>
                    <command-string>accelerator $application-optimization enable</command-string>
                </device-operation>
                <device-operation>
                    <name>disableAO</name>
                    <type>DELETE</type>
                    <command-string>no accelerator $application-optimization enable</command-string>
                </device-operation>
            </device-operations>
        </operation>
       
        <operation>
            <target>/controller:devices/device/wanoptimizer:wanop/interception/inpath</target>
            <platform>ALL|ALL|ALL|WAASOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createInpathInterface</name>
                    <type>CREATE</type>
                    <command-string>interface inpath0_0 ip address $ip-address $netmask</command-string>
                    <command-string>ip in-path-gateway inpath0_0 $ip-address</command-string>
                    <command-string>in-path enable</command-string>
                    <command-string>interception-method inline force</command-string>
                    <command-string>interface inlineGroup 1/0</command-string>
                    <command-string>ip address $ip-address $netmask</command-string>
                    <command-string>inline vlan all</command-string>
                </device-operation>
                <device-operation>
                    <name>removeInpathInterface</name>
                    <type>DELETE</type>
                    <command-string>no interception-method inline force</command-string>
                    <command-string>interface inlineGroup 1/0</command-string>
                    <command-string>no ip address $ip-address $netmask</command-string>
                    <command-string>no inline vlan all</command-string>
                </device-operation>
            </device-operations>
        </operation>
       
        <operation>
            <target>/controller:devices/device/firewall:failover-groups/failover-group</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateFailoverGroup</name>
                    <type>CREATE</type>
                    <command-string>failover group $group-number</command-string>
                    <command-string>
                        #if($group-mode == "secondary")
                        secondary
                    </command-string>
                    <command-string>preempt $preempt</command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/l2features:port-groups/port-group</target>
            <platform>ALL|Cisco Nexus 1000V|Cisco Nexus 1000V|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePortGroup</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($mode == "downlink")
                            port-profile type vethernet $name
                        #else
                            port-profile $name
                    </command-string>
                    <command-string>
                        #if($mode == "downlink")
                            switchport mode access
                        #else
                            switchport trunk allowed vlan add $l2features:vlan-id
                    </command-string>
                    <command-string>
                        #if($mode == "downlink")
                            vmware port-group
                    </command-string>
                    <command-string>[vmware max-ports $port-count]</command-string>
                    <command-string>
                        #if($l2features:vlan-type != null AND $l2features:vlan-type == "vxlan" AND $mode == "downlink")
                            [switchport access bridge-domain $l2features:vlan-name]
                        #else if($l2features:vlan != null AND $l2features:vlan-type == "vlan" AND $mode == "downlink")
                            [switchport access $l2features:vlan-type $l2features:vlan-name]
                    </command-string>
                    <command-string>no shutdown</command-string>
                    <command-string>state enabled</command-string>
                </device-operation>
                <device-operation>
                    <name>RemovePortGroup</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($mode == "downlink")
                            no port-profile type vethernet $name
                    </command-string>
                    <command-string>
                        #if($mode == "uplink")
                            port-profile $name
                    </command-string>
                    <command-string>
                        #if($mode == "uplink")
                            switchport trunk allowed vlan remove $l2features:vlan-id
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
       
        <operation>
            <target>/controller:devices/device/l2features:vn-paths/vn-path/port-profile-name</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>AssignVServicePathToPortProfile</name>
                    <type>CREATE</type>
                    <command-string>port-profile type vethernet $port-profile-name</command-string>
                    <command-string>vservice path $../path-name</command-string>
                </device-operation>
            </device-operations>
        </operation>
               
        <operation>
            <target>/controller:devices/device/l3features:bgp-as</target>
            <platform>ALL|ALL|ALL|ALL|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateDeviceBGPAS</name>
                    <type>CREATE</type>
                    <command-string>router bgp $as-number</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteDeviceBGPAS</name>
                    <type>DELETE</type>
                    <command-string>router bgp $as-number</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterBGP</name>
                    <type>CREATE</type>
                    <command-string>router bgp $as-number</command-string>
                    <command-string>
                        #if($../name != "GLOBAL")
                        vrf $../name
                    </command-string>
                    <command-string>address-family ipv4 unicast</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterBGP</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../name != "GLOBAL")
                        router bgp $as-number
                    </command-string>
                    <command-string>
                        #if($../name != "GLOBAL")
                        no vrf $../name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/neighbor</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterBGPNeighbor</name>
                    <type>CREATE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL")
                        vrf $../../name
                    </command-string>
                    <command-string>address-family ipv4 unicast</command-string>
                    <command-string>neighbor $ip-address remote-as $as-number</command-string>
                    <command-string>update-source $local-interface</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterBGPNeighbor</name>
                    <type>DELETE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL")
                        vrf $../../name
                    </command-string>
                    <command-string>no neighbor $ip-address</command-string>
                </device-operation>
            </device-operations>
        </operation>
       
        <operation>
            <target>/controller:devices/device/l2features:vn-paths/vn-path/port-profile-name</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>AssignVServicePathToPortProfile</name>
                    <type>CREATE</type>
                    <command-string>port-profile type vethernet $port-profile-name</command-string>
                    <command-string>vservice path $../path-name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMap</name>
                    <type>CREATE</type>
                    <command-string>policy-map type $type $name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMap</name>
                    <type>DELETE</type>
                    <command-string>no policy-map $name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassEntry</name>
                    <type>CREATE</type>
                    <command-string>policy-map $../name</command-string>
                    <command-string>class type $type $class-name</command-string>
                    <command-string>mtu $mtu</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassEntry</name>
                    <type>DELETE</type>
                    <command-string>policy-map $../name</command-string>
                    <command-string>no class $class-name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:system-qos/service-policy</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQServicePolicy</name>
                    <type>CREATE</type>
                    <command-string>system qos</command-string>
                    <command-string>service-policy type $type $policy-map</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQServicePolicy</name>
                    <type>DELETE</type>
                    <command-string>system qos</command-string>
                    <command-string>no service-policy $policy-map</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:bgp-as</target>
            <platform>ALL|ALL|ALL|ALL|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateDeviceBGPAS</name>
                    <type>CREATE</type>
                    <command-string>router bgp $as-number</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteDeviceBGPAS</name>
                    <type>DELETE</type>
                    <command-string>router bgp $as-number</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterBGP</name>
                    <type>CREATE</type>
                    <command-string>router bgp $as-number</command-string>
                    <command-string>
                        #if($../name != "GLOBAL")
                        vrf $../name
                    </command-string>
                    <command-string>address-family ipv4 unicast</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterBGP</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../name != "GLOBAL")
                        router bgp $as-number
                    </command-string>
                    <command-string>
                        #if($../name != "GLOBAL")
                        no vrf $../name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/neighbor</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterBGPNeighbor</name>
                    <type>CREATE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL")
                        vrf $../../name
                    </command-string>
                    <command-string>address-family ipv4 unicast</command-string>
                    <command-string>neighbor $ip-address remote-as $as-number</command-string>
                    <command-string>update-source $local-interface</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterBGPNeighbor</name>
                    <type>DELETE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL")
                        vrf $../../name
                    </command-string>
                    <command-string>no neighbor $ip-address</command-string>
                </device-operation>
            </device-operations>
        </operation>
		        <operation>
		            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/aggregate-summary-network</target>
		            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
		            <device-operations>
		                <device-operation>
		                    <name>CreateRouterBGPAggregateSummaryNetwork</name>
		                    <type>CREATE</type>
		                    <command-string>router bgp $../as-number</command-string>
		                    <command-string>
		                        #if($../../name != "GLOBAL")
		                        address-family $../address-family vrf $../../name
		                        #else
		                        address-family $../address-family
		                    </command-string>
		                    <command-string>
		                        #if ($aggregate-summary-only != null AND $aggregate-summary-only)
		                        aggregate-address $network summary-only
		                        #else
		                        aggregate-address $network
		                    </command-string>
		                    <command-string>exit-address-family</command-string>
		                </device-operation>
		                <device-operation>
		                    <name>DeleteRouterBGPAggregateSummaryNetwork</name>
		                    <type>DELETE</type>
		                    <command-string>router bgp $../as-number</command-string>
		                    <command-string>
		                        #if($../../name != "GLOBAL")
		                        address-family $../address-family vrf $../../name
		                        #else
		                        address-family $../address-family
		                    </command-string>
		                    <command-string>
		                        #if ($aggregate-summary-only != null AND $aggregate-summary-only)
		                        no aggregate-address $network summary-only
		                        #else
		                        no aggregate-address $network
		                    </command-string>
		                    <command-string>exit-address-family</command-string>
		                </device-operation>
		            </device-operations>
		        </operation>
	        <operation>
	            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/network</target>
	            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
	            <device-operations>
	                <device-operation>
	                    <name>CreateRouterBGPNetwork</name>
	                    <type>CREATE</type>
	                    <command-string>router bgp $../as-number</command-string>
	                    <command-string>
	                        #if($../../name != "GLOBAL" AND $address-family == "ipv4")
	                        address-family ipv4 vrf $../../name
	                        #else if($../../name != "GLOBAL")
	                        address-family $../address-family vrf $../../name
	                        #else
	                        address-family $../address-family
	                    </command-string>
                         <command-string>network @convertToCidr($ip-address,$netmask) [route-map $route-map]</command-string>
	                </device-operation>
	                <device-operation>
	                    <name>DeleteRouterBGPNetwork</name>
	                    <type>DELETE</type>
	                    <command-string>router bgp $../as-number</command-string>
	                    <command-string>
	                        #if($../../name != "GLOBAL" AND $address-family == "ipv4")
	                        address-family ipv4 vrf $../../name
	                        #else if($../../name != "GLOBAL")
	                        address-family $../address-family vrf $../../name
	                        #else
	                        address-family $../address-family
	                    </command-string>
                         <command-string>no network @convertToCidr($ip-address,$netmask) [route-map $route-map]</command-string>
	                </device-operation>
	            </device-operations>
	        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/redistribute</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterBGPRedistribute</name>
                    <type>CREATE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL" AND $../address-family == "ipv4")
                        address-family ipv4 vrf $../../name
                        #else
                        address-family ipv4
                    </command-string>
                    <command-string>
                        #if($protocol != 'ospf' AND $route-map != null AND $metric != null)
                           redistribute $protocol route-map $route-map metric $metric
                        #else if($protocol != 'ospf' AND $route-map == null AND $metric != null)
                           redistribute $protocol metric $metric
                        #else if($protocol != 'ospf' AND $route-map != null AND $metric == null)
                           redistribute $protocol route-map $route-map
                        #else if($protocol == "static-connected")
                            redistribute connected
                        #else if($protocol != 'ospf')
                           redistribute $protocol
                        #if($protocol == 'ospf' AND $route-map != null AND $metric != null)
                           redistribute $protocol $ospf-process-id route-map $route-map metric $metric
                        #else if($protocol == 'ospf' AND $route-map == null AND $metric != null)
                           redistribute $protocol $ospf-process-id metric $metric
                        #else if($protocol == 'ospf' AND $route-map != null AND $metric == null)
                           redistribute $protocol $ospf-process-id route-map $route-map
                        #else if($protocol == 'ospf')
                           redistribute $protocol $ospf-process-id
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterBGPRedistribute</name>
                    <type>DELETE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL")
                        address-family ipv4 vrf $../../name
                        #else
                        address-family ipv4
                    </command-string>
                    <command-string>
                        #if($protocol != 'ospf' AND $route-map != null AND $metric != null)
                           no redistribute $protocol route-map $route-map metric $metric
                        #else if($protocol != 'ospf' AND $route-map == null AND $metric != null)
                           no redistribute $protocol metric $metric
                        #else if($protocol != 'ospf' AND $route-map != null AND $metric == null)
                           no redistribute $protocol route-map $route-map
                        #else if($protocol == "static-connected")
                           no redistribute connected
                        #else if($protocol != 'ospf')
                           no redistribute $protocol
                        #if($protocol == 'ospf' AND $route-map != null AND $metric != null)
                           no redistribute $protocol $ospf-process-id route-map $route-map metric $metric
                        #else if($protocol == 'ospf' AND $route-map == null AND $metric != null)
                           no redistribute $protocol $ospf-process-id metric $metric
                        #else if($protocol == 'ospf' AND $route-map != null AND $metric == null)
                           no redistribute $protocol $ospf-process-id route-map $route-map
                        #else if($protocol == 'ospf')
                           no redistribute $protocol $ospf-process-id
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
       
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-ospf</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterOspf</name>
                    <type>CREATE</type>
                    <command-string>router ospf $process-id</command-string>
                    <command-string>
                        #if($../name != "GLOBAL")
                        vrf $../name
                    </command-string>
                    <command-string>
                        #if($router-id != null)
                        router-id $router-id
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterOspf</name>
                    <type>DELETE</type>
                    <command-string>router ospf $process-id</command-string>
                    <command-string>
                        #if($../name != "GLOBAL")
                        no vrf $../name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-ospf/neighbor</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterOspfNeighbor</name>
                    <type>CREATE</type>
                    <command-string>router ospf $../process-id</command-string>
                    <command-string>neighbor $ip-address</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterOspfNeighbor</name>
                    <type>DELETE</type>
                    <command-string>router ospf $../process-id</command-string>
                    <command-string>no neighbor $ip-address</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-ospf/interface</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterOspfInterface</name>
                    <type>CREATE</type>
                    <command-string>interface $interface-name</command-string>
                    <command-string>ip router ospf $../process-id area $area</command-string>
                    <command-string>
                        #if($cost != null)
                        ip ospf cost $cost
                    </command-string>
                    <command-string>
                        #if($mtu != null)
                        mtu $mtu
                    </command-string>
                    <command-string>
                        #if($priority != null)
                        ip ospf priority $priority
                    </command-string>
                    <command-string>
                        #if($network-type != null)
                        ip ospf network $network-type
                    </command-string>
                    <command-string>
                        #if($auth-type != null AND $auth-type == 'md5')
                        ip ospf authentication message-digest
                    </command-string>
                    <command-string>
                        #if($auth-type != null AND $auth-type == 'md5' AND $md5-key != null)
                        ip ospf message-digest-key $key-id $auth-type 0 $md5-key
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
	            <target>/controller:devices/device/l3features:vrfs/vrf/router-ospf/network</target>
	            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
	            <device-operations>
	                <device-operation>
	                    <name>CreateRouterOspfNetwork</name>
	                    <type>CREATE</type>
	                    <command-string>
	                        #if($../../name != "GLOBAL")
	                        router ospf $../process-id vrf $../../name
	                        #else
	                        router ospf $../process-id
	                    </command-string>
	                    <command-string>network $ip-address $wild-card area $area</command-string>
	                </device-operation>
	                <device-operation>
	                    <name>DeleteRouterOspfNetwork</name>
	                    <type>DELETE</type>
	                    <command-string>
	                        #if($../../name != "GLOBAL")
	                        router ospf $../process-id vrf $../../name
	                        #else
	                        router ospf $../process-id
	                    </command-string>
	                    <command-string>no network $ip-address $wild-card area $area</command-string>
	                </device-operation>
	            </device-operations>
	        </operation>
       
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/mpls</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateMpls</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../name == "GLOBAL")
                        mpls ip
                    </command-string>
                    <command-string>
                        #if($../name == "GLOBAL")
                        mpls label protocol ldp
                    </command-string>
                    <command-string>
                        #if($../name == "GLOBAL")
                        mpls ldp router-id $loopback-interface
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteMpls</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../name == "GLOBAL")
                        no mpls ldp router-id $loopback-interface
                    </command-string>
                    <command-string>
                        #if($../name == "GLOBAL")
                        no mpls label protocol ldp
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
       
        <operation>
            <target>/controller:devices/device/wanoptimizer:wanop/interception/wccp/router-config</target>
            <platform>ALL|ALL|ALL|WAASOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>enableWccpRedirectionInterface</name>
                    <type>CREATE</type>
                    <command-string>interface $wan-interface-name</command-string>
                    <command-string>ip wccp $../service-group-1 redirect $direction</command-string>
                </device-operation>
                <device-operation>
                    <name>disableWccpRedirectionInterface</name>
                    <type>DELETE</type>
                    <command-string>interface $wan-interface-name</command-string>
                    <command-string>no ip wccp $../service-group-1 redirect $direction</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/wanoptimizer:wanop/interception/wccp/redirect-conditions/redirect-condition</target>
            <platform>ALL|ALL|Cisco WAAS|WAASOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createWccpRedirectionList</name>
                    <type>CREATE</type>
                    <command-string>ip access-list extended $../../lan-access-list</command-string>
                    <command-string>$match-action tcp $../../source-ip $source-wild-card $../../dest-ip $dest-wild-card</command-string>
                    <command-string>ip wccp $../../service-group-1 redirect-list $../../lan-access-list </command-string>
                    <command-string>ip access-list extended $../../wan-access-list</command-string>
                    <command-string>$match-action tcp $../../dest-ip $dest-wild-card $../../dest-ip $dest-wild-card</command-string>
                    <command-string>ip wccp $../../service-group-2 redirect-list $../../wan-access-list </command-string>
                </device-operation>
                <device-operation>
                    <name>removeWccpRedirectionList</name>
                    <type>DELETE</type>
                    <command-string>no ip access-list extended $../../wan-access-list</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/wanoptimizer:wanop/interception/wccp/router-config/lan-interface</target>
            <platform>ALL|ALL|ALL|WAASOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createLanInterface</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($wanoptimizer-device-type == "ciscoOeVWaas")
                        interface vlan $name
                        #if($wanoptimizer-device-type == "ciscoOeSmSre900" OR $wanoptimizer-device-type ==
                        "ciscoOeSmSre700")
                        interface SM1/0
                    </command-string>
                    <command-string>ip address $lan-interface-ip-address $lan-interface-netmask</command-string>
                    <command-string>
                        #if($wanoptimizer-device-type == "ciscoOeSmSre900" OR $wanoptimizer-device-type ==
                        "ciscoOeSmSre700")
                        service-module ip address $lan-interface-ip-address $lan-interface-netmask
                    </command-string>
                    <command-string>
                        #if($wanoptimizer-device-type == "ciscoOeSmSre900" OR $wanoptimizer-device-type ==
                        "ciscoOeSmSre700")
                        service-module ip default-gateway $lan-interface-default-gateway
                    </command-string>
                    <command-string>
                        #if($../direction == "out")
                        ip wccp redirect exclude in
                    </command-string>
                </device-operation>

                <device-operation>
                    <name>deleteLanInterface</name>
                    <type>DELETE</type>
                    <command-string>interface vlan $l2features:vlan</command-string>
                    <command-string>no ip wccp $../../service-group-1 redirect in</command-string>
                </device-operation>
            </device-operations>
        </operation>


        <!-- To enable WCCP Config on the WAE-->
        <operation>
            <target>/controller:devices/device/wanoptimizer:wanop/interception/wccp</target>
            <platform>ALL|ALL|ALL|WAASOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createWccpConfig</name>
                    <type>CREATE</type>
                    <command-string>interception-method wccp force</command-string>
                    <command-string>wccp router-list 1 $router-1 $router-2</command-string>
                    <command-string>wccp tcp-promiscuous service-pair $service-group-1 $service-group-2</command-string>
                    <command-string>router-list-num 1</command-string>
                    <command-string>redirect-method $redirect-method</command-string>
                    <command-string>
                        #if($assignment-method == "mask")
                        assignment-method mask src-ip-mask $source-mask dst-ip-mask $dest-mask
                        #else if($assignment-method == "hash")
                        assignment-method $assignment-method
                    </command-string>
                    <command-string>egress-method $egress-method</command-string>
                    <command-string>enable</command-string>
                </device-operation>
                <device-operation>
                    <name>removeWCCPConfig</name>
                    <type>DELETE</type>
                    <command-string>no interception-method wccp force</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/wanoptimizer:wanop/interception/wccp</target>
            <platform>ALL|ALL|Cisco 3900|ALL|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createWccpConfig</name>
                    <type>CREATE</type>
                    <command-string>ip wccp version 2</command-string>
                    <command-string>ip wccp $service-group-1</command-string>
                    <command-string>ip wccp $service-group-2</command-string>
                </device-operation>

                <device-operation>
                    <name>removeWCCPConfig</name>
                    <type>DELETE</type>
                    <command-string>no ip wccp $service-group-1</command-string>
                    <command-string>no ip wccp $service-group-2</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/wanoptimizer:wanop/interception/wccp</target>
            <platform>ALL|ALL|Cisco 2900|ALL|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createWccpConfig</name>
                    <type>CREATE</type>
                    <command-string>ip wccp version 2</command-string>
                    <command-string>ip wccp $service-group-1</command-string>
                    <command-string>ip wccp $service-group-2</command-string>
                </device-operation>
                <device-operation>
                    <name>removeWCCPConfig</name>
                    <type>DELETE</type>
                    <command-string>no ip wccp $service-group-1</command-string>
                    <command-string>no ip wccp $service-group-2</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/wanoptimizer:wanop/interception/wccp</target>
            <platform>ALL|ALL|ALL|WAASOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createWccpConfig</name>
                    <type>CREATE</type>
                    <command-string>ip wccp $service-group-1</command-string>
                    <command-string>ip wccp $service-group-2</command-string>
                </device-operation>
                <device-operation>
                    <name>removeWCCPConfig</name>
                    <type>DELETE</type>
                    <command-string>no ip wccp $service-group-1</command-string>
                    <command-string>no ip wccp $service-group-2</command-string>
                </device-operation>
            </device-operations>
        </operation>
       
       
        <operation>
            <target>/controller:devices/device/l2features:vn-services/vn-service/node-name</target>
            <platform>ALL|Cisco Nexus 1000V|Cisco Nexus 1000V|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateL3VNservicePortGroup</name>
                    <type>CREATE</type>
                    <command-string>vservice node $node-name type $../node-type</command-string>
                    <command-string>ip address $../data-ipaddress</command-string>
                    <command-string>adjacency l3</command-string>
                    <command-string>fail-mode close</command-string>
                    <command-string>port-profile type vethernet $../port-profile-name</command-string>
                    <command-string>org $../org-hierarchy</command-string>
                    <command-string>vservice node $node-name profile $../security-profile-name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteL3VNservicePortGroup</name>
                    <type>DELETE</type>
                    <command-string>port-profile type vethernet $../port-profile-name</command-string>
                    <command-string>no org $../org-hierarchy</command-string>
                    <command-string>no vservice node $node-name profile $../security-profile-name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l2features:vn-paths/vn-path</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVServicePath</name>
                    <type>CREATE</type>
                    <command-string>vservice path $path-name</command-string>
                    <command-string>node $node-name profile $security-profile-name order $order</command-string>
                </device-operation>
            </device-operations>
        </operation>
       
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/object-groups/object-group</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextObjectGroup</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>
                        #if($type != null AND $type == "service")
                        object-group service $name $service-type
                        #else
                        object-group network $name
                    </command-string>
                    <command-string>[description $description]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateContextObjectGroup</name>
                    <type>UPDATE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>
                        #if($type != null AND $type == "service")
                        object-group service $name $service-type
                        #else
                        object-group network $name
                    </command-string>
                    <command-string>[description $description]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextObjectGroup</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>
                        #if($type != null AND $type == "service")
                        no object-group service $name $service-type
                        #else
                        no object-group network $name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/object-groups/object-group/network-object</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextObjectGroupNetworkObjEntry</name>
                    <type>CREATE</type>
                    <command-string></command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextObjectGroupNetworkObjEntry</name>
                    <type>DELETE</type>
                    <command-string></command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/object-groups/object-group/service-object</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextObjectGroupServiceObjEntry</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../../name</command-string>
                    <command-string>
                        #if($../type != null AND $../type == "service")
                        object-group service $../name $../service-type
                        #else
                        object-group network $../name
                    </command-string>
                    <command-string>
                        #if($service-object-type == "port")
                        port-object eq $service-object-value
                        #else
                        group-object $service-object-value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextObjectGroupServiceObjEntry</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../../name</command-string>
                    <command-string>
                        #if($../type != null AND $../type == "service")
                        object-group service $../name $../service-type
                        #else
                        object-group network $../name
                    </command-string>
                    <command-string>
                        #if($service-object-type == "port")
                        no port-object eq $service-object-value
                        #else
                        no group-object $service-object-value
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/object-groups/object-group/sub-object-group</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextObjectGroupSubObjGroupEntry</name>
                    <type>CREATE</type>
                    <command-string></command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextObjectGroupSubObjGroupEntry</name>
                    <type>DELETE</type>
                    <command-string></command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:object-groups/object-group</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateObjectGroup</name>
                    <type>CREATE</type>
                    <command-string>changeto context $context-name</command-string>
                    <command-string>
                        #if($type != null AND $type == "service")
                        object-group service $name $service-type
                        #else
                        object-group network $name
                    </command-string>
                    <command-string>[description $description]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateObjectGroup</name>
                    <type>UPDATE</type>
                    <command-string>changeto context $context-name</command-string>
                    <command-string>
                        #if($type != null AND $type == "service")
                        object-group service $name $service-type
                        #else
                        object-group network $name
                    </command-string>
                    <command-string>[description $description]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteObjectGroup</name>
                    <type>DELETE</type>
                    <command-string>changeto context $context-name</command-string>
                    <command-string>
                        #if($type != null AND $type == "service")
                        no object-group service $name $service-type
                        #else
                        no object-group network $name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:object-groups/object-group/network-object</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateObjectGroupNetworkObjEntry</name>
                    <type>CREATE</type>
                    <command-string></command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteObjectGroupNetworkObjEntry</name>
                    <type>DELETE</type>
                    <command-string></command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:object-groups/object-group/service-object</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateObjectGroupServiceObjEntry</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../context-name</command-string>
                    <command-string>
                        #if($../type != null AND $../type == "service")
                        object-group service $../name $../service-type
                        #else
                        object-group network $../name
                    </command-string>
                    <command-string>
                        #if($service-object-type == "port")
                        port-object eq $service-object-value
                        #else
                        group-object $service-object-value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteObjectGroupServiceObjEntry</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../type != null AND $../type == "service")
                        object-group service $../name $../service-type
                        #else
                        object-group network $../name
                    </command-string>
                    <command-string>
                        #if($service-object-type == "port")
                        no port-object eq $service-object-value
                        #else
                        no group-object $service-object-value
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:object-groups/object-group/sub-object-group</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateObjectGroupSubObjGroupEntry</name>
                    <type>CREATE</type>
                    <command-string></command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteObjectGroupSubObjGroupEntry</name>
                    <type>DELETE</type>
                    <command-string></command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/nat-object-groups/nat-object-group</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextNATObjectGroup</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>object-group network $name</command-string>
                    <command-string>host $host-ip</command-string>
                    <command-string>nat ($nat-outside-interface,$nat-inside-interface) static $nat-outside-ip</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextNATObjectGroup</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>no object-group network $name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/l2features:port-groups/port-group/name</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>AddVlanToPortGroup</name>
                    <type>CREATE</type>
                    <command-string>port-profile type ethernet $name</command-string>
                    <command-string>switchport trunk allowed vlan add</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/IpStickyToServerfarm</target>
            <platform>ALL|ALL|ALL|ACEOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>addIpStickyToServerfarm</name>
                    <type>CREATE</type>
                    <command-string>changeto $contextName</command-string>
                    <command-string>sticky ip-netmask 255.255.255.255 address source $ipNetmaskStickyName
                    </command-string>
                    <command-string>replicate sticky</command-string>
                    <command-string>serverfarm $serverfarmname</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/static-routes/static-route</target>
            <platform>ALL|ALL|ALL|ACEOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextStaticRoute</name>
                    <type>CREATE</type>
                    <command-string>changeto $../name</command-string>
                    <command-string>ip route $dest-ip-address $dest-mask $next-hop-ip</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextStaticRoute</name>
                    <type>DELETE</type>
                    <command-string>changeto $../name</command-string>
                    <command-string>no ip route $dest-ip-address $dest-mask $next-hop-ip</command-string>
                </device-operation>
            </device-operations>
        </operation>
       
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDevice</name>
                    <type>CREATE</type>
                    <command-string>changeto system</command-string>
                    <command-string>context $name</command-string>
                    <command-string>[config-url $file-store]</command-string>
                    <command-string>
                        #if($visible-interface != null AND $visible-interface == "true")
                        description $name Virtual Network Context
                    </command-string>
                    <command-string>
                        #if($permit-internal-network-traffic != null AND $permit-internal-network-traffic == "true")
                        same-security-traffic permit inter-interface
                    </command-string>
                    <command-string>
                        #if($permit-internal-network-traffic != null AND $permit-internal-network-traffic == "true")
                        same-security-traffic permit intra-interface
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVirtualDevice</name>
                    <type>UPDATE</type>
                    <command-string>changeto system</command-string>
                    <command-string>context $name</command-string>
                    <command-string>[config-url $file-store]</command-string>
                    <command-string>
                        #if($permit-internal-network-traffic != null AND $permit-internal-network-traffic == "true")
                        same-security-traffic permit inter-interface
                    </command-string>
                    <command-string>
                        #if($permit-internal-network-traffic != null AND $permit-internal-network-traffic == "true")
                        same-security-traffic permit intra-interface
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>RemoveVirtualDevice</name>
                    <type>DELETE</type>
                    <command-string>changeto system</command-string>
                    <command-string>
                        #if($file-store != null)
                        delete $file-store
                    </command-string>
                    <command-string>no context $name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/monitor-interface</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceMonitorFwInterface</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>monitor-interface $monitor-interface</command-string>
                </device-operation>
                <device-operation>
                    <name>RemoveVirtualDeviceMonitorFwInterface</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>no monitor-interface $monitor-interface</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/failovergroup</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceFailovergroup</name>
                    <type>CREATE</type>
                    <command-string>context $../name</command-string>
                    <command-string>join-failover-group $failovergroup</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/nat-control</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceNatcontrol</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>
                        #if($nat-control == 'false')
                        no nat-control
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/resourceclass-member</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceMemberEntry</name>
                    <type>CREATE</type>
                    <command-string>context $../name</command-string>
                    <command-string>member $resourceclass-member</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/sshaccess-interface</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceSshAccessInterfaceEntry</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>ssh $ip-address $netmask $interface-nameif</command-string>
                    <command-string>crypto key generate rsa</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/telnetaccess-interface</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceTelnetAccessInterfaceEntry</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>telnet $ip-address $netmask $interface-nameif</command-string>
                </device-operation>
            </device-operations>
        </operation>

       <!-- <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/interface</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceInterfaceEntry</name>
                    <type>CREATE</type>
                    <command-string>changeto system</command-string>
                    <command-string>
                        #if($inside-name != 'management')
                        [interface $interface-name]
                    </command-string>
                    <command-string>
                        #if($inside-name != 'management')
                        [vlan $transit-vlanId]
                    </command-string>
                    <command-string>context $../name</command-string>
                    <command-string>
                        #if($../visible-interface == "true" AND $inside-name != 'management')
                        [allocate-interface $interface-name visible]
                        #else
                        [allocate-interface $interface-name]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteFwInterface</name>
                    <type>DELETE</type>
                    <command-string></command-string>
                </device-operation>
            </device-operations>
        </operation>-->
        <!--<operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/interface</target>
            <platform>ALL|ciscoWsSvcFwm1sc|Cisco ASA 5500|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceInterfaceEntry</name>
                    <type>CREATE</type>
                    <command-string>changeto system</command-string>
                    <command-string>context $../name</command-string>
                    <command-string>
                        #if($../visible-interface == "true")
                        [allocate-interface $interface-name visible]
                        #else
                        [allocate-interface $interface-name]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteFwInterface</name>
                    <type>DELETE</type>
                    <command-string></command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/interface</target>
            <platform>ALL|ciscoASASm1|Cisco ASA 5500|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceInterfaceEntry</name>
                    <type>CREATE</type>
                    <command-string>changeto system</command-string>
                    <command-string>context $../name</command-string>
                    <command-string>
                        #if($../visible-interface == "true")
                        [allocate-interface $interface-name visible]
                        #else
                        [allocate-interface $interface-name]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteFwInterface</name>
                    <type>DELETE</type>
                    <command-string></command-string>
                </device-operation>
            </device-operations>
        </operation>-->
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device</target>
            <platform>ALL|ALL|ALL|ACEOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDevice</name>
                    <type>CREATE</type>
                    <command-string>context $name</command-string>
                    <command-string>[allocate-interface vlan $transit-vlanId]</command-string>
                </device-operation>
                <device-operation>
                    <name>RemoveVirtualDevice</name>
                    <type>DELETE</type>
                    <command-string>changeto Admin</command-string>
                    <command-string>no context $name</command-string>
                </device-operation>
            </device-operations>
        </operation>
      <operation>
         <target>/controller:devices/device/wanoptimizer:wanop/interception/wccp</target>
         <platform>ALL|ALL|Cisco 2900|ALL|Cisco Systems</platform>
         <device-operations>
            <device-operation>
               <name>createWccpConfig</name>
               <type>CREATE</type>
               <command-string>ip wccp version 2</command-string>
               <command-string>ip wccp $service-group-1</command-string>
               <command-string>ip wccp $service-group-2</command-string>
            </device-operation>
            <device-operation>
               <name>removeWCCPConfig</name>
               <type>DELETE</type>
               <command-string>no ip wccp $service-group-1</command-string>
               <command-string>no ip wccp $service-group-2</command-string>
            </device-operation>
         </device-operations>
      </operation>
      <operation>
         <target>/controller:devices/device/wanoptimizer:wanop/interception/wccp</target>
         <platform>ALL|ALL|ALL|WAASOS|Cisco Systems</platform>
         <device-operations>
            <device-operation>
               <name>createWccpConfig</name>
               <type>CREATE</type>
               <command-string>ip wccp $service-group-1</command-string>
               <command-string>ip wccp $service-group-2</command-string>
            </device-operation>
            <device-operation>
               <name>removeWCCPConfig</name>
               <type>DELETE</type>
               <command-string>no ip wccp $service-group-1</command-string>
               <command-string>no ip wccp $service-group-2</command-string>
            </device-operation>
         </device-operations>
      </operation>
      
      <operation>
         <target>/controller:devices/device/firewall:virtual-devices/virtual-device/static-routes/static-route</target>
         <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
         <device-operations>
             <device-operation>
                 <name>CreateContextStaticRoute</name>
                 <type>CREATE</type>
                 <command-string>changeto context $../../name</command-string>
                 <command-string>route $interface-name $dest-ip-address $dest-mask $next-hop-ip [$metric]</command-string>
             </device-operation>
             <device-operation>
                 <name>DeleteContextStaticRoute</name>
                 <type>DELETE</type>
                 <command-string>changeto context $../../name</command-string>
                 <command-string>no route $interface-name $dest-ip-address $dest-mask $next-hop-ip</command-string>
             </device-operation>
         </device-operations>
      </operation>
     <!-- <operation>
       <target>/controller:devices/device/firewall:virtual-devices/virtual-device/static-routes/static-route</target>
       <platform>ALL|ALL|ALL|ACEOS|Cisco Systems</platform>
       <device-operations>
          <device-operation>
             <name>CreateContextStaticRoute</name>
             <type>CREATE</type>
             <command-string>changeto $../name</command-string>
             <command-string>ip route $dest-ip-address $dest-mask $next-hop-ip</command-string>
          </device-operation>
          <device-operation>
             <name>DeleteContextStaticRoute</name>
             <type>DELETE</type>
             <command-string>changeto $../name</command-string>
             <command-string>no ip route $dest-ip-address $dest-mask $next-hop-ip</command-string>
             </device-operation>
          </device-operations>
       </operation>-->
      <operation>
         <target>/controller:devices/device/l3features:ip-prefixlist-list/ip-prefixlist</target>
         <platform>ALL|ALL|ALL|ALL|Cisco Systems</platform>
         <device-operations>
            <device-operation>
               <name>CreateIpPrefixList</name>
               <type>CREATE</type>
               <command-string>ip prefix-list $prefixName permit $subnet</command-string>
            </device-operation>
            <device-operation>
               <name>DeleteIpPrefixList</name>
               <type>DELETE</type>
               <command-string>no ip prefix-list $prefixName permit $subnet</command-string>
            </device-operation>
         </device-operations>
      </operation>
      <operation>
         <target>/controller:devices/device/RealServerOperation</target>
         <platform>ALL|ALL|ALL|ACEOS|Cisco Systems</platform>
         <device-operations>
            <device-operation>
               <name>UpdateRealServerOperation</name>
               <type>UPDATE</type>
               <command-string>changeto $contextName</command-string>
               <command-string>rserver $rservername</command-string>
               <command-string>$isEnable inservice</command-string>
            </device-operation>
         </device-operations>
      </operation>

      <operation>
         <target>/controller:devices/device/dmvpn-crypto</target>
         <platform>ALL|ALL|ALL|ALL|Cisco Systems</platform>
         <device-operations>
            <device-operation>
               <name>createDmvpncrypto</name>
               <type>CREATE</type>
               <command-string>crypto isakmp policy $policy-number</command-string>
               <command-string>[authentication $auth-type]</command-string>
               <command-string>[encryption $encr-type]</command-string>
               <command-string>[group $group]</command-string>
               <command-string>[hash $hash]</command-string>
               <command-string>[lifetime $life-time]</command-string>
               <command-string>[crypto isakmp key $cryptoisakmpkey address $ip-address $netmask]</command-string>
               <command-string>[crypto ipsec transform-set $transform-set esp-3des esp-md5]</command-string>
               <command-string>mode transport</command-string>
               <command-string>exit</command-string>
               <command-string>[crypto ipsec profile $ipsec-profile-name]</command-string>
               <command-string>[set transform-set $transform-set]</command-string>
               <command-string>
               		#if($pfs == 'true')
               			set pfs group2
               </command-string>
               </device-operation>
                <device-operation>
                    <name>removeDmvpncrypto</name>
                    <type>DELETE</type>
                    <command-string>[no crypto ipsec profile $ipsec-profile-name]</command-string>
                    <command-string>no crypto ipsec transform-set $transform-set esp-3des esp-md5</command-string>
                    <command-string>[no crypto isakmp key $cryptoisakmpkey address $ip-address $netmask]
                    </command-string>
                    <command-string>no crypto isakmp policy $policy-number</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/wanoptimizer:wanop/interception/wccp/router-config/lan-interface</target>
            <platform>ALL|ALL|ALL|WAASOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createLanInterface</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($wanoptimizer-device-type == "ciscoOeVWaas")
                        interface vlan $name
                        #if($wanoptimizer-device-type == "ciscoOeSmSre900" OR $wanoptimizer-device-type ==
                        "ciscoOeSmSre700")
                        interface SM1/0
                    </command-string>
                    <command-string>ip address $lan-interface-ip-address $lan-interface-netmask</command-string>
                    <command-string>
                        #if($wanoptimizer-device-type == "ciscoOeSmSre900" OR $wanoptimizer-device-type ==
                        "ciscoOeSmSre700")
                        service-module ip address $lan-interface-ip-address $lan-interface-netmask
                    </command-string>
                    <command-string>
                        #if($wanoptimizer-device-type == "ciscoOeSmSre900" OR $wanoptimizer-device-type ==
                        "ciscoOeSmSre700")
                        service-module ip default-gateway $lan-interface-default-gateway
                    </command-string>
                    <command-string>
                        #if($../direction == "out")
                        ip wccp redirect exclude in
                    </command-string>
                </device-operation>

                <device-operation>
                    <name>deleteLanInterface</name>
                    <type>DELETE</type>
                    <command-string>interface vlan $l2features:vlan</command-string>
                    <command-string>no ip wccp $../../service-group-1 redirect in</command-string>
                </device-operation>
            </device-operations>
        </operation>


        <!-- To enable WCCP Config on the WAE-->
        <operation>
            <target>/controller:devices/device/wanoptimizer:wanop/interception/wccp</target>
            <platform>ALL|ALL|ALL|WAASOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createWccpConfig</name>
                    <type>CREATE</type>
                    <command-string>interception-method wccp force</command-string>
                    <command-string>wccp router-list 1 $router-1 $router-2</command-string>
                    <command-string>wccp tcp-promiscuous service-pair $service-group-1 $service-group-2</command-string>
                    <command-string>router-list-num 1</command-string>
                    <command-string>redirect-method $redirect-method</command-string>
                    <command-string>
                        #if($assignment-method == "mask")
                        assignment-method mask src-ip-mask $source-mask dst-ip-mask $dest-mask
                        #else if($assignment-method == "hash")
                        assignment-method $assignment-method
                    </command-string>
                    <command-string>egress-method $egress-method</command-string>
                    <command-string>enable</command-string>
                </device-operation>
                <device-operation>
                    <name>removeWCCPConfig</name>
                    <type>DELETE</type>
                    <command-string>no interception-method wccp force</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/wanoptimizer:wanop/interception/wccp</target>
            <platform>ALL|ALL|Cisco 3900|ALL|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createWccpConfig</name>
                    <type>CREATE</type>
                    <command-string>ip wccp version 2</command-string>
                    <command-string>ip wccp $service-group-1</command-string>
                    <command-string>ip wccp $service-group-2</command-string>
                </device-operation>

                <device-operation>
                    <name>removeWCCPConfig</name>
                    <type>DELETE</type>
                    <command-string>no ip wccp $service-group-1</command-string>
                    <command-string>no ip wccp $service-group-2</command-string>
                </device-operation>
            </device-operations>
        </operation>
            <operation>
            <target>/controller:devices/device/wanoptimizer:wanop/interception/wccp</target>
            <platform>ALL|ALL|Cisco 2900|ALL|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createWccpConfig</name>
                    <type>CREATE</type>
                    <command-string>ip wccp version 2</command-string>
                    <command-string>ip wccp $service-group-1</command-string>
                    <command-string>ip wccp $service-group-2</command-string>
                </device-operation>
                <device-operation>
                    <name>removeWCCPConfig</name>
                    <type>DELETE</type>
                    <command-string>no ip wccp $service-group-1</command-string>
                    <command-string>no ip wccp $service-group-2</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/wanoptimizer:wanop/interception/wccp</target>
            <platform>ALL|ALL|ALL|WAASOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createWccpConfig</name>
                    <type>CREATE</type>
                    <command-string>ip wccp $service-group-1</command-string>
                    <command-string>ip wccp $service-group-2</command-string>
                </device-operation>
                <device-operation>
                    <name>removeWCCPConfig</name>
                    <type>DELETE</type>
                    <command-string>no ip wccp $service-group-1</command-string>
                    <command-string>no ip wccp $service-group-2</command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/firewall:object-groups/object-group</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateObjectGroup</name>
                    <type>CREATE</type>
                    <command-string>changeto context $context-name</command-string>
                    <command-string>object-group network $name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteObjectGroup</name>
                    <type>DELETE</type>
                    <command-string>changeto context $context-name</command-string>
                    <command-string>no object-group network $name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        
       <!-- <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/static-routes/static-route</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextStaticRoute</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>route $interface-name $dest-ip-address $dest-mask $next-hop-ip $metric
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextStaticRoute</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>no route $interface-name $dest-ip-address $dest-mask $next-hop-ip</command-string>
                </device-operation>
            </device-operations>
        </operation>-->
       <!-- <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/static-routes/static-route</target>
            <platform>ALL|ALL|ALL|ACEOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextStaticRoute</name>
                    <type>CREATE</type>
                    <command-string>changeto $../name</command-string>
                    <command-string>ip route $dest-ip-address $dest-mask $next-hop-ip</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextStaticRoute</name>
                    <type>DELETE</type>
                    <command-string>changeto $../name</command-string>
                    <command-string>no ip route $dest-ip-address $dest-mask $next-hop-ip</command-string>
                </device-operation>
            </device-operations>
        </operation>-->
        <operation>
            <target>/controller:devices/device/l3features:ip-prefixlist-list/ip-prefixlist</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseIpPrefixList</name>
                    <type>PARSE</type>
                    <command-string>
                        #if($rule-num == null AND $compare == null)
                        ip prefix-list $name $condition $subnet
                        #else if($rule-num == null AND $compare != null)
                        ip prefix-list $name $condition $subnet $compare $num
                        #else if($rule-num != null AND $compare == null)
                        ip prefix-list $name seq $rule-num $condition $subnet
                        #else if($rule-num != null AND $compare != null)
                        ip prefix-list $name seq $rule-num $condition $subnet $compare $num
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:ip-prefixlist-list/ip-prefixlist/ip-prefixlist-entries/ip-prefixlist-entry</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateIpPrefixListEntry</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($rule-num == null AND $compare == null)
                        ip prefix-list $../../name $condition $subnet
                        #else if($rule-num == null AND $compare != null)
                        ip prefix-list $../../name $condition $subnet $compare $num
                        #else if($rule-num != null AND $compare == null)
                        ip prefix-list $../../name seq $rule-num $condition $subnet
                        #else if($rule-num != null AND $compare != null)
                        ip prefix-list $../../name seq $rule-num $condition $subnet $compare $num
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateIpPrefixListEntry</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($rule-num == null AND $compare == null)
                        ip prefix-list $../../name $condition $subnet
                        #else if($rule-num == null AND $compare != null)
                        ip prefix-list $../../name $condition $subnet $compare $num
                        #else if($rule-num != null AND $compare == null)
                        ip prefix-list $../../name seq $rule-num $condition $subnet
                        #else if($rule-num != null AND $compare != null)
                        ip prefix-list $../../name seq $rule-num $condition $subnet $compare $num
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteIpPrefixListEntry</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($rule-num == null AND $compare == null)
                        no ip prefix-list $../../name $condition $subnet
                        #else if($rule-num == null AND $compare != null)
                        no ip prefix-list $../../name $condition $subnet $compare $num
                        #else if($rule-num != null AND $compare == null)
                        no ip prefix-list $../../name seq $rule-num $condition $subnet
                        #else if($rule-num != null AND $compare != null)
                        no ip prefix-list $../../name seq $rule-num $condition $subnet $compare $num
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
       
 <!--       <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDevice</name>
                    <type>CREATE</type>
                    <command-string>changeto system</command-string>
                    <command-string>context $name</command-string>
                    <command-string>[config-url $file-store]</command-string>
                    <command-string>
                        #if($visible-interface != null AND $visible-interface == "true")
                        description $name Virtual Network Context
                    </command-string>
                    <command-string>
                        #if($permit-internal-network-traffic != null AND $permit-internal-network-traffic == "true")
                        same-security-traffic permit inter-interface
                    </command-string>
                    <command-string>
                        #if($permit-internal-network-traffic != null AND $permit-internal-network-traffic == "true")
                        same-security-traffic permit intra-interface
                    </command-string>
                    <command-string>[join-failover-group $failovergroup]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVirtualDevice</name>
                    <type>UPDATE</type>
                    <command-string>changeto system</command-string>
                    <command-string>context $name</command-string>
                    <command-string>[config-url $file-store]</command-string>
                    <command-string>
                        #if($permit-internal-network-traffic != null AND $permit-internal-network-traffic == "true")
                        same-security-traffic permit inter-interface
                    </command-string>
                    <command-string>
                        #if($permit-internal-network-traffic != null AND $permit-internal-network-traffic == "true")
                        same-security-traffic permit intra-interface
                    </command-string>
                    <command-string>[join-failover-group $failovergroup]</command-string>
                </device-operation>
                <device-operation>
                    <name>RemoveVirtualDevice</name>
                    <type>DELETE</type>
                    <command-string>changeto system</command-string>
                    <command-string>
                        #if($file-store != null)
                        delete $file-store
                    </command-string>
                    <command-string>no context $name</command-string>
                </device-operation>
            </device-operations>
        </operation>-->
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/monitor-interface</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceMonitorFwInterface</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>monitor-interface $monitor-interface</command-string>
                </device-operation>
                <device-operation>
                    <name>RemoveVirtualDeviceMonitorFwInterface</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>no monitor-interface $monitor-interface</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/failovergroup</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceFailovergroup</name>
                    <type>CREATE</type>
                    <command-string>context $../name</command-string>
                    <command-string>join-failover-group $failovergroup</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVirtualDeviceFailovergroup</name>
                    <type>UPDATE</type>
                    <command-string>context $../name</command-string>
                    <command-string>join-failover-group $failovergroup</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVirtualDeviceFailovergroup</name>
                    <type>DELETE</type>
                    <command-string>context $../name</command-string>
                    <command-string>no join-failover-group $failovergroup</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/nat-control</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceNatcontrol</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>
                        #if($nat-control == 'false')
                        no nat-control
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/resourceclass-member</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceMemberEntry</name>
                    <type>CREATE</type>
                    <command-string>context $../name</command-string>
                    <command-string>member $resourceclass-member</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/managementaccess-interface</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceMgmtAccessInterfaceEntry</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>
                        #if($ip-address != null AND $netmask != null AND $echo-type != null AND $echo-type != "none")
                            icmp permit $ip-address $netmask $echo-type $interface-nameif
                        #else if($ip-address != null AND $netmask != null)
                            icmp permit $ip-address $netmask $interface-nameif
                        #else
                            icmp permit any $interface-nameif
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVirtualDeviceMgmtAccessInterfaceEntry</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>
                        #if($ip-address != null AND $netmask != null AND $echo-type != null AND $echo-type != "none")
                            no icmp permit $ip-address $netmask $echo-type $interface-nameif
                        #else if($ip-address != null AND $netmask != null)
                            no icmp permit $ip-address $netmask $interface-nameif
                        #else
                            no icmp permit any $interface-nameif
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/sshaccess-interface</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceSshAccessInterfaceEntry</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>ssh $ip-address $netmask $interface-name</command-string>
                    <command-string>crypto key generate rsa</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/telnetaccess-interface</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceTelnetAccessInterfaceEntry</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>telnet $ip-address $netmask $interface-nameif</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/interface</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceInterfaceEntry</name>
                    <type>CREATE</type>
                    <command-string>changeto system</command-string>
                    <command-string>
                        #if($inside-name != 'management')
                        [interface $interface-name]
                    </command-string>
                    <command-string>
                        #if($inside-name != 'management')
                        [vlan $transit-vlanId]
                    </command-string>
                    <command-string>[description $description]</command-string>
                    <command-string>
                        #if($shutdown != null AND $shutdown == 'false')
                        no shutdown
                    </command-string>
                    <command-string>
                        #if($inside-name != 'management' AND $interface-name != null)
                        exit
                    </command-string>
                    <command-string>context $../name</command-string>
                    <command-string>
                        #if($../visible-interface == "true" AND $inside-name != 'management')
                        [allocate-interface $interface-name visible]
                        #else
                        [allocate-interface $interface-name]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteFwInterface</name>
                    <type>DELETE</type>
                    <command-string></command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/interface</target>
            <platform>ALL|ciscoWsSvcFwm1sc|Cisco ASA 5500|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceInterfaceEntry</name>
                    <type>CREATE</type>
                    <command-string>changeto system</command-string>
                    <command-string>[interface $interface-name]</command-string>
                    <command-string>[description $description]</command-string>
                    <command-string>
                        #if($shutdown != null AND $shutdown == 'false')
                        no shutdown
                    </command-string>
                    <command-string>
                        #if($interface-name != null)
                        exit
                    </command-string>
                    <command-string>context $../name</command-string>
                    <command-string>
                        #if($../visible-interface == "true")
                        [allocate-interface $interface-name visible]
                        #else
                        [allocate-interface $interface-name]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteFwInterface</name>
                    <type>DELETE</type>
                    <command-string></command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/interface</target>
            <platform>ALL|ciscoASASm1|Cisco ASA 5500|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDeviceInterfaceEntry</name>
                    <type>CREATE</type>
                    <command-string>changeto system</command-string>
                    <command-string>context $../name</command-string>
                    <command-string>
                        #if($../visible-interface == "true")
                        [allocate-interface $interface-name visible]
                        #else
                        [allocate-interface $interface-name]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteFwInterface</name>
                    <type>DELETE</type>
                    <command-string></command-string>
                </device-operation>
            </device-operations>
        </operation>
       <!-- <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device</target>
            <platform>ALL|ALL|ALL|ACEOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVirtualDevice</name>
                    <type>CREATE</type>
                    <command-string>context $name</command-string>
                    <command-string>[allocate-interface vlan $transit-vlanId]</command-string>
                </device-operation>
                <device-operation>
                    <name>RemoveVirtualDevice</name>
                    <type>DELETE</type>
                    <command-string>changeto Admin</command-string>
                    <command-string>no context $name</command-string>
                </device-operation>
            </device-operations>
        </operation>-->
       
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/access-lists/access-list</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextAcl</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>access-list $name remark $start-remark</command-string>
                    <command-string>access-list $name remark $end-remark</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextAcl</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>no access-list $name remark $start-remark</command-string>
                    <command-string>no access-list $name remark $end-remark</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/access-lists/access-list/start-remark</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextAclStartRemark</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../../name</command-string>
                    <command-string>access-list $../name remark $start-remark</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateContextAclStartRemark</name>
                    <type>UPDATE</type>
                    <command-string>changeto context $../../../name</command-string>
                    <command-string>access-list $../name remark $start-remark</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextAclStartRemark</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../../name</command-string>
                    <command-string>no access-list $../name remark $start-remark</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/access-lists/access-list/end-remark</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextAclEndRemark</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../../name</command-string>
                    <command-string>access-list $../name remark $end-remark</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateContextAclEndRemark</name>
                    <type>UPDATE</type>
                    <command-string>changeto context $../../../name</command-string>
                    <command-string>access-list $../name remark $end-remark</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextAclEndRemark</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../../name</command-string>
                    <command-string>no access-list $../name remark $end-remark</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/acl:interface-access-lists/interface-access-list</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceAccessList</name>
                    <type>CREATE</type>
                    <command-string>changeto context $context-name</command-string>
                    <command-string>access-group $acl-name $direction interface $interface-name</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceAccessList</name>
                    <type>UPDATE</type>
                    <command-string>changeto context $context-name</command-string>
                    <command-string>access-group $acl-name $direction interface $interface-name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceAccessList</name>
                    <type>DELETE</type>
                    <command-string>changeto context $context-name</command-string>
                    <command-string>no access-group $acl-name $direction interface $interface-name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/acl:access-lists/access-list/acl-rules/acl-rule</target>
            <platform>ALL|ciscoASASm1|Cisco ASA 5500|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAclRule</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../virtual-device-name</command-string>
                    <command-string>
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol any4 [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol any4 [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol any4 [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] any4 [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] any4 [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] any4 [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol any4 [$source-port-operator $source-port] any4 [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "cidr")
                        access-list $../../name line $linenumber extended $action $layer4protocol $source-ip $source-mask $dest-ip $dest-mask
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr")
                        access-list $../../name line $linenumber extended $action $layer4protocol object-group $source-obj-name $dest-ip $dest-mask
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr")
                        access-list $../../name line $linenumber extended $action $layer4protocol host $source-obj-name $dest-ip $dest-mask
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr")
                        access-list $../../name line $linenumber extended $action $layer4protocol any4 $dest-ip $dest-mask
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup")
                        access-list $../../name line $linenumber extended $action $layer4protocol $source-ip $source-mask object-group $dest-obj-name
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup")
                        access-list $../../name line $linenumber extended $action $layer4protocol object-group $source-obj-name object-group $dest-obj-name
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup")
                        access-list $../../name line $linenumber extended $action $layer4protocol host $source-obj-name object-group $dest-obj-name
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup")
                        access-list $../../name line $linenumber extended $action $layer4protocol any4 object-group $dest-obj-name
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host")
                        access-list $../../name line $linenumber extended $action $layer4protocol $source-ip $source-mask host $dest-obj-name
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host")
                        access-list $../../name line $linenumber extended $action $layer4protocol object-group $source-obj-name host $dest-obj-name
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host")
                        access-list $../../name line $linenumber extended $action $layer4protocol host $source-obj-name host $dest-obj-name
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host")
                        access-list $../../name line $linenumber extended $action $layer4protocol any4 host $dest-obj-name
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "any")
                        access-list $../../name line $linenumber extended $action $layer4protocol $source-ip $source-mask any4
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any")
                        access-list $../../name line $linenumber extended $action $layer4protocol object-group $source-obj-name any4
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any")
                        access-list $../../name line $linenumber extended $action $layer4protocol host $source-obj-name any4
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any")
                        access-list $../../name line $linenumber extended $action $layer4protocol any4 any4
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAclRule</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../virtual-device-name</command-string>
                    <command-string>
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol any [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol any [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol any [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol any [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "cidr")
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask $dest-ip $dest-mask
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr")
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name $dest-ip $dest-mask
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr")
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name $dest-ip $dest-mask
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr")
                        no access-list $../../name extended $action $layer4protocol any $dest-ip $dest-mask
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup")
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask object-group $dest-obj-name
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup")
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name object-group $dest-obj-name
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup")
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name object-group $dest-obj-name
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup")
                        no access-list $../../name extended $action $layer4protocol any object-group $dest-obj-name
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host")
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask host $dest-obj-name
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host")
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name host $dest-obj-name
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host")
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name host $dest-obj-name
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host")
                        no access-list $../../name extended $action $layer4protocol any host $dest-obj-name
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "any")
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask any
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any")
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name any
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any")
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name any
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any")
                        no access-list $../../name extended $action $layer4protocol any any
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/acl:access-lists/access-list/acl-rules/acl-rule</target>
            <platform>9.2|ciscoASASm1|Cisco ASA 5500|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAclRule</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../virtual-device-name</command-string>
                    <command-string>
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol any [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol any [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol any [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        access-list $../../name line $linenumber extended $action $layer4protocol any [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "cidr")
                        access-list $../../name line $linenumber extended $action $layer4protocol $source-ip $source-mask $dest-ip $dest-mask
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr")
                        access-list $../../name line $linenumber extended $action $layer4protocol object-group $source-obj-name $dest-ip $dest-mask
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr")
                        access-list $../../name line $linenumber extended $action $layer4protocol host $source-obj-name $dest-ip $dest-mask
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr")
                        access-list $../../name line $linenumber extended $action $layer4protocol any $dest-ip $dest-mask
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup")
                        access-list $../../name line $linenumber extended $action $layer4protocol $source-ip $source-mask object-group $dest-obj-name
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup")
                        access-list $../../name line $linenumber extended $action $layer4protocol object-group $source-obj-name object-group $dest-obj-name
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup")
                        access-list $../../name line $linenumber extended $action $layer4protocol host $source-obj-name object-group $dest-obj-name
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup")
                        access-list $../../name line $linenumber extended $action $layer4protocol any object-group $dest-obj-name
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "host")
                        access-list $../../name line $linenumber extended $action $layer4protocol $source-ip $source-mask host $dest-obj-name
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host")
                        access-list $../../name line $linenumber extended $action $layer4protocol object-group $source-obj-name host $dest-obj-name
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host")
                        access-list $../../name line $linenumber extended $action $layer4protocol host $source-obj-name host $dest-obj-name
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host")
                        access-list $../../name line $linenumber extended $action $layer4protocol any host $dest-obj-name
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "any")
                        access-list $../../name line $linenumber extended $action $layer4protocol $source-ip $source-mask any
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any")
                        access-list $../../name line $linenumber extended $action $layer4protocol object-group $source-obj-name any
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any")
                        access-list $../../name line $linenumber extended $action $layer4protocol host $source-obj-name any
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any")
                        access-list $../../name line $linenumber extended $action $layer4protocol any any
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAclRule</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../virtual-device-name</command-string>
                    <command-string>
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol any [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol any [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol any [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "17"))
                        no access-list $../../name extended $action $layer4protocol any [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "cidr")
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask $dest-ip $dest-mask
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr")
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name $dest-ip $dest-mask
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr")
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name $dest-ip $dest-mask
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr")
                        no access-list $../../name extended $action $layer4protocol any $dest-ip $dest-mask
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup")
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask object-group $dest-obj-name
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup")
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name object-group $dest-obj-name
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup")
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name object-group $dest-obj-name
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup")
                        no access-list $../../name extended $action $layer4protocol any object-group $dest-obj-name
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host")
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask host $dest-obj-name
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host")
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name host $dest-obj-name
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host")
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name host $dest-obj-name
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host")
                        no access-list $../../name extended $action $layer4protocol any host $dest-obj-name
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "any")
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask any
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any")
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name any
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any")
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name any
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any")
                        no access-list $../../name extended $action $layer4protocol any any
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/acl:access-lists/access-list/acl-rules/acl-rule</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAclRule</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../virtual-device-name</command-string>
                    <command-string>#if($source-condition-type == "cidr" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol any [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol any [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol any [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol any [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "cidr")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol $source-ip $source-mask $dest-ip $dest-mask
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol object-group $source-obj-name $dest-ip $dest-mask
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol host $source-obj-name $dest-ip $dest-mask
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol any $dest-ip $dest-mask
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol $source-ip $source-mask object-group $dest-obj-name
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol host $source-obj-name object-group $dest-obj-name
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol any object-group $dest-obj-name
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "host")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol $source-ip $source-mask host $dest-obj-name
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol object-group $source-obj-name host $dest-obj-name
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol host $source-obj-name host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol any host $dest-obj-name
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "any")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol $source-ip $source-mask any
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol object-group $source-obj-name any [$dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol host $source-obj-name any
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol any any
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAclRule</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../virtual-device-name</command-string>
                    <command-string>#if($source-condition-type == "cidr" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol any [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol any [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol any [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol any [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "cidr")
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask $dest-ip $dest-mask
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr")
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name $dest-ip $dest-mask
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr")
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name $dest-ip $dest-mask
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr")
                        no access-list $../../name extended $action $layer4protocol any $dest-ip $dest-mask
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup")
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask object-group $dest-obj-name
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup")
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup")
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name object-group $dest-obj-name
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup")
                        no access-list $../../name extended $action $layer4protocol any object-group $dest-obj-name
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host")
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask host $dest-obj-name
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host")
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name host $dest-obj-name
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host")
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host")
                        no access-list $../../name extended $action $layer4protocol any host $dest-obj-name
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "any")
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask any
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any")
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name any
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any")
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name any
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any")
                        no access-list $../../name extended $action $layer4protocol any any
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/access-lists/access-list/acl-rules/acl-rule</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextAclRule</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../../../name</command-string>
                    <command-string>#if($source-condition-type == "cidr" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol any [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol any [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol any [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        access-list $../../name [line $linenumber] extended $action $layer4protocol any [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "cidr")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol $source-ip $source-mask $dest-ip $dest-mask
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol object-group $source-obj-name $dest-ip $dest-mask
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol host $source-obj-name $dest-ip $dest-mask
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol any $dest-ip $dest-mask
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol $source-ip $source-mask object-group $dest-obj-name
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol object-group $source-obj-name object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol host $source-obj-name object-group $dest-obj-name
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol any object-group $dest-obj-name
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "host")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol $source-ip $source-mask host $dest-obj-name
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol object-group $source-obj-name host $dest-obj-name
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol host $source-obj-name host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol any host $dest-obj-name
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "any")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol $source-ip $source-mask any
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol object-group $source-obj-name any [$dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol host $source-obj-name any
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any")
                        access-list $../../name [line $linenumber] extended $action $layer4protocol any any
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextAclRule</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../../../name</command-string>
                    <command-string>#if($source-condition-type == "cidr" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol any [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol any [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol any [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any" AND ($layer4protocol == "6" || $layer4protocol == "tcp" || $layer4protocol == "17" || $layer4protocol == "udp"))
                        no access-list $../../name extended $action $layer4protocol any [$source-port-operator $source-port] any [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "cidr")
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask $dest-ip $dest-mask
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr")
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name $dest-ip $dest-mask
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr")
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name $dest-ip $dest-mask
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr")
                        no access-list $../../name extended $action $layer4protocol any $dest-ip $dest-mask
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup")
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask object-group $dest-obj-name
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup")
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name object-group $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup")
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name object-group $dest-obj-name
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup")
                        no access-list $../../name extended $action $layer4protocol any object-group $dest-obj-name
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host")
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask host $dest-obj-name
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host")
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name host $dest-obj-name
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host")
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name host $dest-obj-name [$dest-port-operator $dest-port]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host")
                        no access-list $../../name extended $action $layer4protocol any host $dest-obj-name
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "any")
                        no access-list $../../name extended $action $layer4protocol $source-ip $source-mask any
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any")
                        no access-list $../../name extended $action $layer4protocol object-group $source-obj-name any
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any")
                        no access-list $../../name extended $action $layer4protocol host $source-obj-name any
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any")
                        no access-list $../../name extended $action $layer4protocol any any
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp</target>
            <platform>ALL|ALL|Cisco ASA 1000V|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSnmp</name>
                    <type>CREATE</type>
                    <command-string>[snmp-server location $location]</command-string>
                    <command-string>[snmp-server contact $contact]</command-string>
                    <command-string>snmp-server enable traps</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSnmp</name>
                    <type>DELETE</type>
                    <command-string>no snmp-server location</command-string>
                    <command-string>no snmp-server contact</command-string>
                    <command-string>no snmp-server enable traps</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/snmp-server</target>
            <platform>ALL|ALL|Cisco ASA 1000V|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSnmpServer</name>
                    <type>CREATE</type>
                    <command-string>snmp-server host $../interface-name $snmp-server-ip trap community 0 $../community [version $../snmp-version]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSnmpServer</name>
                    <type>DELETE</type>
                    <command-string>no snmp-server host $../interface-name $snmp-server-ip trap community 0 $../community [version $../snmp-version]</command-string>
                </device-operation>
            </device-operations>
        </operation>
    </operations>
    <operations>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ntp/ntp-server</target>
            <platform>ALL|ALL|Cisco ASA 1000V|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNtpServer</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($ntp-server-address != null)
                        ntp server $ntp-server-address [source $ntp-source-interface]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNtpServer</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($ntp-server-address != null)
                        no ntp server $ntp-server-address [source $ntp-source-interface]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
    </operations>
    <operations>
	        <operation>
	            <target>/controller:devices/device/l3features:vrfs/vrf/router-eigrp</target>
	            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
	            <device-operations>
	                <device-operation>
	                    <name>createRouterEigrp</name>
	                    <type>CREATE</type>
	                    <command-string>router eigrp $process-id</command-string>
	                    <command-string>no auto-summary</command-string>
	                    <command-string>
	                        #if($../name != "GLOBAL")
	                        address-family ipv4 vrf $../name
	                    </command-string>
	                </device-operation>
	                <device-operation>
	                    <name>removeRouterEigrp</name>
	                    <type>DELETE</type>
	                    <command-string>no router eigrp $process-id</command-string>
	                </device-operation>
	            </device-operations>
	        </operation>
	        <operation>
	            <target>/controller:devices/device/l3features:vrfs/vrf/router-eigrp/network</target>
	            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
	            <device-operations>
	                <device-operation>
	                    <name>createRouterEigrpNetwork</name>
	                    <type>CREATE</type>
	                    <command-string>router eigrp $../process-id</command-string>
	                    <command-string>
	                        #if($../../name != "GLOBAL")
	                        address-family ipv4 vrf $../../name
	                    </command-string>
	                    <command-string>network $ip-address $wild-card</command-string>
	                    <command-string>no auto-summary</command-string>
	                </device-operation>
	            </device-operations>
	        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:crypto-keyrings/crypto-keyring</target>
            <platform>ALL|ALL|ALL|ALL|Cisco Systems</platform>
            <device-operations>                
                <device-operation>
                    <name>CreateCryptoWithIKE</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($ike-version == "IKEV1" AND $key-ring-name != null AND $vrf-name != null AND $vrf-name != "GLOBAL")
                        crypto keyring $key-ring-name vrf $vrf-name
			#else if($ike-version == "IKEV1" AND $key-ring-name != null)
                        crypto keyring $key-ring-name
                        #else if($ike-version == "IKEV2")
                        crypto ikev2 keyring $key-ring-name
                    </command-string>                   
                    <command-string>
                        #if($ike-version == "IKEV2")
                        crypto ikev2 keyring $key-ring-name
                    </command-string>
	        <command-string>
                        #if($ike-version == "IKEV2")
                        peer $peer-name
                    </command-string>
                </device-operation>	
                <device-operation>
                    <name>UpdateCryptoWithIKE</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($ike-version == "IKEV1" AND $key-ring-name != null AND $key-ring-name != $key-ring-name.%previous AND $vrf-name != null AND $vrf-name != "GLOBAL")
                        crypto keyring $key-ring-name vrf $vrf-name
            #else if($ike-version == "IKEV1" AND $key-ring-name != null AND $key-ring-name != $key-ring-name.%previous)
                        crypto keyring $key-ring-name
                        #else if($ike-version == "IKEV2" AND $key-ring-name != $key-ring-name.%previous)
                        crypto ikev2 keyring $key-ring-name
                    </command-string>                   
                    <command-string>
                        #if($ike-version == "IKEV2")
                        crypto ikev2 keyring $key-ring-name
                    </command-string>
            <command-string>
                        #if($ike-version == "IKEV2")
                        peer $peer-name
                    </command-string>
                </device-operation>	         
                <device-operation>
                    <name>DeleteCryptoWithIKE</name>
                    <type>DELETE</type>                    
		    <command-string>
			#if($ike-version == "IKEV1" AND $key-ring-name != null AND $vrf-name != null AND $vrf-name != "GLOBAL")
                        no crypto keyring $key-ring-name vrf $vrf-name
			#else if($ike-version == "IKEV1" AND $key-ring-name != null)
                        no crypto keyring $key-ring-name                        
                    </command-string>                    
                    <command-string>
                        #if($ike-version == "IKEV2")
                        no crypto ikev2 keyring $key-ring-name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/dmvpn:crypto-keyrings/crypto-keyring/pre-shared-key</target>
            <platform>ALL|ALL|ALL|ALL|Cisco Systems</platform>
            <device-operations>                
                <device-operation>
                    <name>ParseCryptoPreSharedKeyWithIKE</name>
                    <type>PARSE</type>
                    <command-string>pre-shared-key address $ip-address key $pre-shared-secret</command-string>
                </device-operation>
		<device-operation>
                    <name>CreateCryptoPreSharedKeyWithIKE</name>
                    <type>CREATE</type>
		    <command-string>
                        #if($../ike-version == "IKEV1" AND $../key-ring-name != null AND $../vrf-name != null AND $../vrf-name != "GLOBAL")
                        crypto keyring $../key-ring-name vrf $../vrf-name
			#else if($../ike-version == "IKEV1" AND $../key-ring-name != null)
                        crypto keyring $../key-ring-name
		#else if($../ike-version == "IKEV2" AND $../key-ring-name != null)
                        crypto ikev2 keyring $../key-ring-name
                    </command-string>                  
                    <command-string>
                        #if($../ike-version == "IKEV1" AND $../key-ring-name != null)
                        pre-shared-key address $ip-address [$netmask] key $pre-shared-secret
                    </command-string>                    
                    <command-string>
                        #if($../ike-version == "IKEV1" AND $../key-ring-name == null)
                        crypto isakmp key $pre-shared-secret address $ip-address $netmask
                    </command-string>
                    <command-string>
                        #if($../ike-version == "IKEV2" AND $../key-ring-name != null)
                        crypto ikev2 keyring $../key-ring-name
                    </command-string>
	        <command-string>
                        #if($../ike-version == "IKEV2")
                        peer $../peer-name
                    </command-string>                    
                    <command-string>
                        #if($../ike-version == "IKEV2" AND $netmask != null)
                        address $ip-address $netmask
		#else if($../ike-version == "IKEV2" AND $netmask == null)
                        address $ip-address
                    </command-string>
                    <command-string>
                        #if($../ike-version == "IKEV2")
                        pre-shared-key $pre-shared-secret
                    </command-string>                    
                </device-operation>
                <device-operation>
                    <name>UpdateCryptoPreSharedKeyWithIKE</name>
                    <type>UPDATE</type>
            <command-string>
                        #if($../ike-version == "IKEV1" AND $../key-ring-name != null AND $../key-ring-name != $../key-ring-name.%previous AND $../vrf-name != null AND $../vrf-name != "GLOBAL")
                        crypto keyring $../key-ring-name vrf $../vrf-name
            #else if($../ike-version == "IKEV1" AND $../key-ring-name != null AND $../key-ring-name != $../key-ring-name.%previous)
                        crypto keyring $../key-ring-name
        #else if($../ike-version == "IKEV2" AND $../key-ring-name != null AND $../key-ring-name != $../key-ring-name.%previous)
                        crypto ikev2 keyring $../key-ring-name
                    </command-string>                  
                    <command-string>
                        #if($../ike-version == "IKEV1" AND $../key-ring-name != null AND $ip-address != $ip-address.%previous)
                        pre-shared-key address $ip-address [$netmask] key $pre-shared-secret
                    </command-string>                    
                    <command-string>
                        #if($../ike-version == "IKEV1" AND $../key-ring-name == null AND $ip-address != $ip-address.%previous)
                        crypto isakmp key $pre-shared-secret address $ip-address $netmask
                    </command-string>
                    <command-string>
                        #if($../ike-version == "IKEV2" AND $../key-ring-name != null)
                        crypto ikev2 keyring $../key-ring-name
                    </command-string>
            <command-string>
                        #if($../ike-version == "IKEV2")
                        peer $../peer-name
                    </command-string>                    
                    <command-string>
                        #if($../ike-version == "IKEV2" AND $netmask != null)
                        address $ip-address $netmask
        #else if($../ike-version == "IKEV2" AND $netmask == null)
                        address $ip-address
                    </command-string>
                    <command-string>
                        #if($../ike-version == "IKEV2")
                        pre-shared-key $pre-shared-secret
                    </command-string>                    
                </device-operation>
		<device-operation>
                    <name>DeleteCryptoPreSharedKeyWithIKE</name>
                    <type>DELETE</type>
		    <command-string>
                        #if($../ike-version == "IKEV1" AND $../key-ring-name != null AND $../vrf-name != null AND $../vrf-name != "GLOBAL")
                        crypto keyring $../key-ring-name vrf $../vrf-name
			#else if($../ike-version == "IKEV1" AND $../key-ring-name != null)
                        crypto keyring $../key-ring-name
                    </command-string>                  
                    <command-string>
                        #if($../ike-version == "IKEV1" AND $../key-ring-name != null)
                        no pre-shared-key address $ip-address [$netmask] key $pre-shared-secret
                    </command-string>
                    <command-string>
                        #if($../ike-version == "IKEV2" AND $../key-ring-name != null)
                        crypto ikev2 keyring $../key-ring-name
                    </command-string>
	        <command-string>
                        #if($../ike-version == "IKEV2")
                        peer $../peer-name
                    </command-string>                    
                    <command-string>
                        #if($../ike-version == "IKEV2" AND $netmask != null)
                        no address $ip-address $netmask
		#else if($../ike-version == "IKEV2" AND $netmask == null)
                        no address $ip-address
                    </command-string>
                    <command-string>
                        #if($../ike-version == "IKEV2")
                        no pre-shared-key $pre-shared-secret
                    </command-string>
                </device-operation>              
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:crypto-policies/crypto-policy</target>
            <platform>ALL|ALL|ALL|ALL|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseCryptoPolicyWithIKE</name>
                    <type>PARSE</type>
                    <command-string>encr $ike-encryption-type</command-string>
                </device-operation>
                <device-operation>
                    <name>CreateCryptoPolicyWithIKE</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($ike-version == "IKEV1")
                        crypto isakmp policy $policy-number
                        #else if($ike-version == "IKEV2")
                        crypto ikev2 policy $policy-number
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV1")
                        [authentication $auth-type]
                    </command-string>
		    <command-string>
                        #if($ike-version == "IKEV1" AND $ike-encryption-type == 'AES128')
                        encryption AES 128
                        #else if($ike-version == "IKEV1" AND $ike-encryption-type == 'AES192')
                        encryption AES 192
                        #else if($ike-version == "IKEV1" AND $ike-encryption-type == 'AES256')
                        encryption AES 256
                        #else if($ike-version == "IKEV1")
                        [encryption $ike-encryption-type]
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV1")
                        [group $group]
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV1" AND $hash == 'SHA1')
                        hash SHA
                        #else if($ike-version == "IKEV1")
                        [hash $hash]
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV1")
                        [lifetime $life-time]
                    </command-string>
		    <command-string>
                        #if($ike-version == "IKEV1")
                        [crypto isakmp keepalive $keepalive]
                    </command-string>
		    <command-string>
                        #if($pfs == 'true' AND $ike-version == "IKEV1")
                        set pfs group$group
                    </command-string>
	        <command-string>
                        #if($ike-version == "IKEV2")
                        crypto ikev2 policy $policy-number
                    </command-string>
	        <command-string>
                        #if($ike-version == "IKEV2")
                        match fvrf $fvrf
                    </command-string>
	        <command-string>
                        #if($ike-version == "IKEV2")
                        proposal $proposal
                    </command-string>
                </device-operation> 
                <device-operation>
                    <name>UpdateCryptoPolicyWithIKE</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($ike-version == "IKEV1")
                        crypto isakmp policy $policy-number
                        #else if($ike-version == "IKEV2")
                        crypto ikev2 policy $policy-number
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV1" AND $auth-type != $auth-type.%previous)
                        [authentication $auth-type]
                    </command-string>
            <command-string>
                        #if($ike-version == "IKEV1" AND $ike-encryption-type == 'AES128' AND $ike-encryption != $ike-encryption.%previous)
                        encryption AES 128
                        #else if($ike-version == "IKEV1" AND $ike-encryption-type == 'AES192' AND $ike-encryption != $ike-encryption.%previous)
                        encryption AES 192
                        #else if($ike-version == "IKEV1" AND $ike-encryption-type == 'AES256' AND $ike-encryption != $ike-encryption.%previous)
                        encryption AES 256
                        #else if($ike-version == "IKEV1" AND $ike-encryption != $ike-encryption.%previous)
                        [encryption $ike-encryption-type]
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV1" AND $group != $group.%previous)
                        [group $group]
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV1" AND $hash == 'SHA1' AND $hash != $hash.%previous)
                        hash SHA
                        #else if($ike-version == "IKEV1" AND $hash != $hash.%previous)
                        [hash $hash]
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV1" AND $hash != $hash.%previous)
                        [lifetime $life-time]
                    </command-string>
            <command-string>
                        #if($ike-version == "IKEV1" AND $keepalive != $keepalive.%previous)
                        [crypto isakmp keepalive $keepalive]
                    </command-string>
            <command-string>
                        #if($pfs == 'true' AND $ike-version == "IKEV1" AND $group != $group.%previous)
                        set pfs group$group
                    </command-string>
            <command-string>
                        #if($ike-version == "IKEV2" AND $policy-number != $policy-number.%previous)
                        crypto ikev2 policy $policy-number
                    </command-string>
            <command-string>
                        #if($ike-version == "IKEV2" AND $fvrf != $frvf.%previous)
                        match fvrf $fvrf
                    </command-string>
            <command-string>
                        #if($ike-version == "IKEV2" AND $proposal != $proposal.%previous)
                        proposal $proposal
                    </command-string>
                </device-operation>                               
                <device-operation>
                    <name>DeleteCryptoPolicyWithIKE</name>
                    <type>DELETE</type>                    
	        <command-string>
                        #if($ike-version == "IKEV1")
                        no crypto isakmp policy $policy-number
                    </command-string>
	        <command-string>
                        #if($ike-version == "IKEV2")
                        no crypto ikev2 policy $policy-number
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:crypto-peers/crypto-peer</target>
            <platform>ALL|ALL|ALL|ALL|Cisco Systems</platform>
            <device-operations>                
                <device-operation>
                    <name>CreateCryptoPeerWithIKE</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($ike-version == "IKEV1" AND $address != null AND $vrf-name == null)
                        crypto isakmp peer address $address
            #else if($ike-version == "IKEV1" AND $address != null AND $vrf-name != null)
                        crypto isakmp peer address $address vrf $vrf-name
            #else if($ike-version == "IKEV1" AND $hostname != null AND $vrf-name == null)
                        crypto isakmp peer hostname $hostname
            #else if($ike-version == "IKEV1" AND $hostname != null AND $vrf-name != null)
                        crypto isakmp peer hostname $hostname vrf $vrf-name
                    </command-string>
            <command-string>description $description</command-string>           
                </device-operation>
        <device-operation>
                    <name>UpdateCryptoPeerWithIKE</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($ike-version == "IKEV1" AND $address != null AND $vrf-name == null)
                        crypto isakmp peer address $address
            #else if($ike-version == "IKEV1" AND $address != null AND $vrf-name != null)
                        crypto isakmp peer address $address vrf $vrf-name
            #else if($ike-version == "IKEV1" AND $hostname != null AND $vrf-name == null)
                        crypto isakmp peer hostname $hostname
            #else if($ike-version == "IKEV1" AND $hostname != null AND $vrf-name != null)
                        crypto isakmp peer hostname $hostname vrf $vrf-name
                    </command-string>
            <command-string>description $description</command-string>
                </device-operation>                
                <device-operation>
                    <name>DeleteCryptoPeerWithIKE</name>
                    <type>DELETE</type>                    
            <command-string>
                        #if($ike-version == "IKEV1" AND $address != null AND $vrf-name == null)
                        no crypto isakmp peer address $address
            #else if($ike-version == "IKEV1" AND $address != null AND $vrf-name != null)
                        no crypto isakmp peer address $address vrf $vrf-name
            #else if($ike-version == "IKEV1" AND $hostname != null AND $vrf-name == null)
                        no crypto isakmp peer hostname $hostname
            #else if($ike-version == "IKEV1" AND $hostname != null AND $vrf-name != null)
                        no crypto isakmp peer hostname $hostname vrf $vrf-name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        
    <operation>
            <target>/controller:devices/device/dmvpn:crypto-peers/crypto-peer/set-attributes</target>
            <platform>ALL|ALL|ALL|ALL|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateCryptoAttributes</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../ike-version == "IKEV1" AND $../address != null AND $../vrf-name == null)
                        crypto isakmp peer address $../address
            #else if($../ike-version == "IKEV1" AND $../address != null AND $../vrf-name != null)
                        crypto isakmp peer address $../address vrf $../vrf-name
            #else if($../ike-version == "IKEV1" AND $../hostname != null AND $../vrf-name == null)
                        crypto isakmp peer hostname $../hostname
            #else if($../ike-version == "IKEV1" AND $../hostname != null AND $../vrf-name != null)
                        crypto isakmp peer hostname $../hostname vrf $../vrf-name
                    </command-string>
            <command-string>
                #if($password != null)
                set aggressive-mode $attribute $password
            </command-string>
             <command-string>
            #if($endpoint == "fqdn")
            set aggressive-mode $attribute fqdn $fqdn
            #else if($endpoint == "ipv4-address")
            set aggressive-mode $attribute ipv4-address $ipv4-address
            #else if($endpoint == "ipv6-address")
            set aggressive-mode $attribute ipv6-address $ipv6-address
            #else if($endpoint == "user-fqdn")
            set aggressive-mode $attribute user-fqdn $user-fqdn
            </command-string>              
                </device-operation>
        <device-operation>
                    <name>UpdateCryptoAttributes</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../ike-version == "IKEV1" AND $../address != null AND $../vrf-name == null)
                        crypto isakmp peer address $../address
            #else if($../ike-version == "IKEV1" AND $../address != null AND $../vrf-name != null)
                        crypto isakmp peer address $../address vrf $../vrf-name
            #else if($../ike-version == "IKEV1" AND $../hostname != null AND $../vrf-name == null)
                        crypto isakmp peer hostname $../hostname
            #else if($../ike-version == "IKEV1" AND $../hostname != null AND $../vrf-name != null)
                        crypto isakmp peer hostname $../hostname vrf $../vrf-name
                    </command-string>
                   <command-string>
                #if($password != null)
                set aggressive-mode $attribute $password
            </command-string>
            <command-string>
            #if($endpoint == "fqdn")
            set aggressive-mode $attribute fqdn $fqdn
            #else if($endpoint == "ipv4-address")
            set aggressive-mode $attribute ipv4-address $ipv4-address
            #else if($endpoint == "ipv6-address")
            set aggressive-mode $attribute ipv6-address $ipv6-address
            #else if($endpoint == "user-fqdn")
            set aggressive-mode $attribute user-fqdn $user-fqdn
            </command-string>              
                </device-operation>                
                <device-operation>
                    <name>DeleteCryptoAttributes</name>
                    <type>DELETE</type>                    
            <command-string>
                        #if($../ike-version == "IKEV1" AND $../address != null AND $../vrf-name == null)
                        crypto isakmp peer address $../address
            #else if($../ike-version == "IKEV1" AND $../address != null AND $../vrf-name != null)
                        crypto isakmp peer address $../address vrf $../vrf-name
            #else if($../ike-version == "IKEV1" AND $../hostname != null AND $../vrf-name == null)
                        crypto isakmp peer hostname $../hostname
            #else if($../ike-version == "IKEV1" AND $../hostname != null AND $../vrf-name != null)
                        crypto isakmp peer hostname $../hostname vrf $../vrf-name
                    </command-string>
             <command-string>
                #if($password != null)
                set aggressive-mode $attribute $password
            </command-string>
             <command-string>
            #if($endpoint == "fqdn")
            no set aggressive-mode $attribute fqdn $fqdn
            #else if($endpoint == "ipv4-address")
            no set aggressive-mode $attribute ipv4-address $ipv4-address
            #else if($endpoint == "ipv6-address")
            no set aggressive-mode $attribute ipv6-address $ipv6-address
            #else if($endpoint == "user-fqdn")
            no set aggressive-mode $attribute user-fqdn $user-fqdn
            </command-string>              
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:crypto-proposals/crypto-proposal</target>
            <platform>ALL|ALL|ALL|ALL|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseTemplateCryptoProposalWithIKE</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        crypto ikev2 proposal $ike-proposal-name
                    </command-string>
                    <command-string>
                        encryption $ike-encryption-type
                    </command-string>
                    <command-string>
                        integrity $ike-authentication-type
                    </command-string>
                    <command-string>
                    	prf $prf
                    </command-string>
                    <command-string>
                        group $group
                    </command-string>
                    <command-string>crypto ikev2 policy $ike-policy-name</command-string>
                    <command-string>
                        crypto ikev2 dpd $interval $retry-interval on-demand
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateCryptoProposalWithIKE</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($ike-default == 'true' AND $ike-proposal-name == 'default')
                        crypto ikev2 proposal default
                        #else
                        crypto ikev2 proposal $ike-proposal-name
                    </command-string>                    
		    <command-string>
                        #if($ike-default == 'false' AND $ike-encryption-type == 'AES128')
                        encryption aes-cbc-128
                        #else if($ike-default == 'false' AND $ike-encryption-type == 'AES192')
                        encryption aes-cbc-192
                        #else if($ike-default == 'false' AND $ike-encryption-type == 'AES256')
                        encryption aes-cbc-256
                        #else
                        encryption $ike-encryption-type
                    </command-string>
                    <command-string>
                        #if($ike-default == 'false')
                        integrity $ike-authentication-type
                    </command-string>	        
	        <command-string>
                        #if($ike-default == 'false')
                        prf $prf
                    </command-string>
                    <command-string>
                        #if($ike-default == 'false')
                        group $group
                    </command-string>
                    <command-string>crypto ikev2 policy $ike-policy-name</command-string>                    
		    <command-string>
                        #if($interval !=null AND $retry-interval !=null)
                        crypto ikev2 dpd $interval $retry-interval on-demand
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateCryptoProposalWithIKE</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($ike-default == 'true' AND $ike-proposal-name == 'default')
                        crypto ikev2 proposal default
                        #else
                        crypto ikev2 proposal $ike-proposal-name
                    </command-string>                    
            <command-string>
                        #if($ike-default == 'false' AND $ike-encryption-type == 'AES128')
                        encryption aes-cbc-128
                        #else if($ike-default == 'false' AND $ike-encryption-type == 'AES192')
                        encryption aes-cbc-192
                        #else if($ike-default == 'false' AND $ike-encryption-type == 'AES256')
                        encryption aes-cbc-256
                        #else
                        encryption $ike-encryption-type
                    </command-string>
                    <command-string>
                        #if($ike-default == 'false')
                        integrity $ike-authentication-type
                    </command-string>           
            <command-string>
                        #if($ike-default == 'false')
                        prf $prf
                    </command-string>
                    <command-string>
                        #if($ike-default == 'false')
                        group $group
                    </command-string>
                    <command-string>crypto ikev2 policy $ike-policy-name</command-string>                    
            <command-string>
                        #if($interval !=null AND $retry-interval !=null)
                        crypto ikev2 dpd $interval $retry-interval on-demand
                    </command-string>
                </device-operation>              
                <device-operation>
                    <name>DeleteCryptoProposalWithIKE</name>
                    <type>DELETE</type>
		    <command-string>
                        #if($ike-default == 'true' AND $ike-proposal-name == 'default')
                        no crypto ikev2 proposal default
                        #else
                        no crypto ikev2 proposal $ike-proposal-name
                    </command-string>     
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:crypto/crypto-profile</target>
            <platform>ALL|ALL|ALL|ALL|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseCryptoProfileWithIKE</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($ike-version == "IKEV1" AND $ike-profile-name != null)
                        crypto isakmp profile $ike-profile-name
                        #else if($ike-version == "IKEV2")
                        crypto ikev2 profile $ike-profile-name
                    </command-string>
	        <command-string>description $description</command-string>
            <command-string>                        
                        local-address $local-address
                    </command-string>
                    <command-string>
                        keyring $key-ring-name
                    </command-string>
                    <command-string>
                        authentication remote $auth-type
                    </command-string>
                    <command-string>
                        authentication local $auth-type
                    </command-string>
                    <command-string>
                        keyring local $key-ring-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateCryptoProfileWithIKE</name>
                    <type>CREATE</type>
		    <command-string>
                        #if($ike-version == "IKEV1" AND $ike-profile-name != null)
                        crypto isakmp profile $ike-profile-name
                        #else if($ike-version == "IKEV2")
                        crypto ikev2 profile $ike-profile-name
                    </command-string>
	        <command-string>description $description</command-string>
            <command-string>
                        #if($ike-version == "IKEV1" AND $local-address != null)
                        local-address $local-address
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV1" AND $key-ring-name != null)
                        keyring $key-ring-name
                    </command-string>                    
		    <command-string>
                        #if($ike-version == "IKEV2")
                        crypto ikev2 profile $ike-profile-name
                    </command-string>                    
                    <command-string>
                        #if($ike-version == "IKEV2")
                        authentication remote $auth-type
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV2")
                        authentication local $auth-type
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV2")
                        keyring local $key-ring-name
                    </command-string>                    
                </device-operation>
                <device-operation>
                    <name>UpdateCryptoProfileWithIKE</name>
                    <type>UPDATE</type>
            <command-string>
                        #if($ike-version == "IKEV1" AND $ike-profile-name != null)
                        crypto isakmp profile $ike-profile-name
                        #else if($ike-version == "IKEV2")
                        crypto ikev2 profile $ike-profile-name
                    </command-string>
            <command-string>description $description</command-string>
            <command-string>
                        #if($ike-version == "IKEV1" AND $local-address != null)
                        local-address $local-address
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV1" AND $key-ring-name != null)
                        keyring $key-ring-name
                    </command-string>                    
            <command-string>
                        #if($ike-version == "IKEV2")
                        crypto ikev2 profile $ike-profile-name
                    </command-string>                    
                    <command-string>
                        #if($ike-version == "IKEV2")
                        authentication remote $auth-type
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV2")
                        authentication local $auth-type
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV2")
                        keyring local $key-ring-name
                    </command-string>                    
                </device-operation>                 	             
                <device-operation>
                    <name>DeleteCryptoProfileWithIKE</name>
                    <type>DELETE</type>
		    <command-string>
                        #if($ike-version == "IKEV1" AND $key-ring-name != null)
                        crypto isakmp profile $ike-profile-name
                    </command-string>
		    <command-string>
                        #if($ike-version == "IKEV1" AND $key-ring-name != null)
                        no keyring $key-ring-name
                    </command-string>		    
		    <command-string>
			#if($ike-version == "IKEV1" AND $key-ring-name != null)
			exit
		    </command-string>		    	    		    
		    <command-string>
                        #if($ike-version == "IKEV1")
                        no crypto isakmp profile $ike-profile-name
                    </command-string>
		    <command-string>
                        #if($ike-version == "IKEV2")
                        crypto ikev2 profile $ike-profile-name
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV2")
                        no keyring local $key-ring-name
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV1" AND $local-address != null)
                        no local-address $local-address
                    </command-string>   
                    <command-string>
                        #if($ike-version == "IKEV2")
                        no crypto ikev2 profile $ike-profile-name
                    </command-string>   
                </device-operation>
            </device-operations>
        </operation>	
	<operation>
            <target>/controller:devices/device/dmvpn:crypto/crypto-profile/match</target>
            <platform>ALL|ALL|ALL|ALL|Cisco Systems</platform>
            <device-operations>                
                <device-operation>
                    <name>CreateCryptoProfileMatchWithIKE</name>
                    <type>CREATE</type>
		    <command-string>
                        #if($../ike-version == "IKEV1" AND $../ike-profile-name != null)
                        crypto isakmp profile $../ike-profile-name
                        #else if($../ike-version == "IKEV2" AND $../ike-profile-name != null)
                        crypto ikev2 profile $../ike-profile-name
                    </command-string>
		    <command-string>
		    	#if($../ike-version == "IKEV1" AND $vrf-name != null)
			vrf $vrf-name
		    </command-string>                    		    
                    <command-string>
                        #if($../ike-version == "IKEV1" AND $../key-ring-name != null AND $vrf-name != null AND $vrf-name != "GLOBAL" AND $netmask == null)
                        match identity address $ip-address $vrf-name
			#else if($../ike-version == "IKEV1" AND $../key-ring-name != null AND ($vrf-name == null OR $vrf-name == "GLOBAL") AND $netmask != null)
			match identity address $ip-address $netmask
			#if($../ike-version == "IKEV1" AND $../key-ring-name != null AND $vrf-name != null AND $vrf-name != "GLOBAL" AND $netmask != null)
			match identity address $ip-address $netmask $vrf-name
                        #else if($../ike-version == "IKEV1" AND $../key-ring-name != null)
                        match identity address $ip-address
                    </command-string>
                    <command-string>
                        #if($../ike-version == "IKEV2")
                        crypto ikev2 profile $../ike-profile-name
                    </command-string>
                    <command-string>
                        #if($vrf-name != null AND $../ike-version == "IKEV2")
                        match fvrf $vrf-name
                    </command-string>
                    <command-string>
                        #if($../ike-version == "IKEV2")
                        match identity remote address $ip-address
                    </command-string>
	        <command-string>
                        #if($../ike-version == "IKEV2")
                        identity local address $identity-local-address
                    </command-string>                                      
                </device-operation>
                <device-operation>
                    <name>UpdateCryptoProfileMatchWithIKE</name>
                    <type>UPDATE</type>
            <command-string>
                        #if($../ike-version == "IKEV1" AND $../ike-profile-name != null)
                        crypto isakmp profile $../ike-profile-name
                        #else if($../ike-version == "IKEV2" AND $../ike-profile-name != null)
                        crypto ikev2 profile $../ike-profile-name
                    </command-string>
            <command-string>
                #if($../ike-version == "IKEV1" AND $vrf-name != null)
            vrf $vrf-name
            </command-string>                               
                    <command-string>
                        #if($../ike-version == "IKEV1" AND $../key-ring-name != null AND $vrf-name != null AND $vrf-name != "GLOBAL" AND $netmask == null)
                        match identity address $ip-address $vrf-name
            #else if($../ike-version == "IKEV1" AND $../key-ring-name != null AND ($vrf-name == null OR $vrf-name == "GLOBAL") AND $netmask != null)
            match identity address $ip-address $netmask
            #if($../ike-version == "IKEV1" AND $../key-ring-name != null AND $vrf-name != null AND $vrf-name != "GLOBAL" AND $netmask != null)
            match identity address $ip-address $netmask $vrf-name
                        #else if($../ike-version == "IKEV1" AND $../key-ring-name != null)
                        match identity address $ip-address
                    </command-string>
                    <command-string>
                        #if($../ike-version == "IKEV2")
                        crypto ikev2 profile $../ike-profile-name
                    </command-string>
                    <command-string>
                        #if($vrf-name != null AND $../ike-version == "IKEV2")
                        match fvrf $vrf-name
                    </command-string>
                    <command-string>
                        #if($../ike-version == "IKEV2")
                        match identity remote address $ip-address
                    </command-string>
            <command-string>
                        #if($../ike-version == "IKEV2")
                        identity local address $identity-local-address
                    </command-string>                                      
                </device-operation>
		<device-operation>
                    <name>DeleteCryptoProfileMatchWithIKE</name>
                    <type>DELETE</type>
		    <command-string>
                        #if($../ike-version == "IKEV1" AND $../ike-profile-name != null)
                        crypto isakmp profile $../ike-profile-name
                    </command-string>                    		    
                    <command-string>
                        #if($../ike-version == "IKEV1" AND $../key-ring-name != null AND $vrf-name != null AND $vrf-name != "GLOBAL" AND $netmask == null)
                        no match identity address $ip-address $vrf-name
			#else if($../ike-version == "IKEV1" AND $../key-ring-name != null AND ($vrf-name == null OR $vrf-name == "GLOBAL") AND $netmask != null)
			no match identity address $ip-address $netmask
			#if($../ike-version == "IKEV1" AND $../key-ring-name != null AND $vrf-name != null AND $vrf-name != "GLOBAL" AND $netmask != null)
			no match identity address $ip-address $netmask $vrf-name
                        #else if($../ike-version == "IKEV1" AND $../key-ring-name != null)
                        no match identity address $ip-address
                    </command-string>
		    <command-string>
		    	#if($../ike-version == "IKEV1" AND $vrf-name != null)
			no vrf $vrf-name
		    </command-string>
		    <command-string>
                        #if($../ike-version == "IKEV2")
                        crypto ikev2 profile $../ike-profile-name
                    </command-string>
                    <command-string>
                        #if(($vrf-name != null OR $vrf-name == "GLOBAL") AND $../ike-version == "IKEV2")
                        no match fvrf $vrf-name
                    </command-string>
                    <command-string>
                        #if($../ike-version == "IKEV2")
                        no match identity remote address $ip-address
                    </command-string>
	        <command-string>
                        #if($../ike-version == "IKEV2")
                        no identity local address $identity-local-address
                    </command-string>                                                 
                </device-operation>                
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/dmvpn:transform-sets/transform-set</target>
            <platform>ALL|ALL|ALL|ALL|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTransformSetWithIKE</name>
                    <type>CREATE</type>
		    <command-string>
                        #if($ipsec-encryption-type == 'esp-aes 128')
                        crypto ipsec transform-set $transform-set esp-aes 128 [$ipsec-authentication-type]
                        #else if($ipsec-encryption-type == 'esp-aes 192')
                        crypto ipsec transform-set $transform-set esp-aes 192 [$ipsec-authentication-type]
                        #else if($ipsec-encryption-type == 'esp-aes 256')
                        crypto ipsec transform-set $transform-set esp-aes 256 [$ipsec-authentication-type]
		#else if($ipsec-encryption-type == 'esp-gcm 128')
                        crypto ipsec transform-set $transform-set esp-gcm 128 [$ipsec-authentication-type]
                        #else if($ipsec-encryption-type == 'esp-gcm 192')
                        crypto ipsec transform-set $transform-set esp-gcm 192 [$ipsec-authentication-type]
                        #else if($ipsec-encryption-type == 'esp-gcm 256')
                        crypto ipsec transform-set $transform-set esp-gcm 256 [$ipsec-authentication-type]
                        #else
                        crypto ipsec transform-set $transform-set $ipsec-encryption-type [$ipsec-authentication-type]
                    </command-string>                    
                    <command-string>                        
                        mode $mode
                    </command-string>       
                </device-operation> 
                <device-operation>
                    <name>UpdateTransformSetWithIKE</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($ipsec-encryption-type == 'esp-aes 128')
                        crypto ipsec transform-set $transform-set esp-aes 128 [$ipsec-authentication-type]
                        #else if($ipsec-encryption-type == 'esp-aes 192')
                        crypto ipsec transform-set $transform-set esp-aes 192 [$ipsec-authentication-type]
                        #else if($ipsec-encryption-type == 'esp-aes 256')
                        crypto ipsec transform-set $transform-set esp-aes 256 [$ipsec-authentication-type]
                        #else if($ipsec-encryption-type == 'esp-gcm 128')
                        crypto ipsec transform-set $transform-set esp-gcm 128 [$ipsec-authentication-type]
                        #else if($ipsec-encryption-type == 'esp-gcm 192')
                        crypto ipsec transform-set $transform-set esp-gcm 192 [$ipsec-authentication-type]
                        #else if($ipsec-encryption-type == 'esp-gcm 256')
                        crypto ipsec transform-set $transform-set esp-gcm 256 [$ipsec-authentication-type]
                        #else
                        crypto ipsec transform-set $transform-set $ipsec-encryption-type [$ipsec-authentication-type]
                    </command-string>
                    <command-string>
                        mode $mode
                    </command-string>
                </device-operation>               
                <device-operation>
                    <name>DeleteTransformSetWithIKE</name>
                    <type>DELETE</type>
		    <command-string>                        
                        #if($ipsec-encryption-type == 'esp-aes 128')
                        no crypto ipsec transform-set $transform-set esp-aes 128 [$ipsec-authentication-type]
                        #else if($ipsec-encryption-type == 'esp-aes 192')
                        no crypto ipsec transform-set $transform-set esp-aes 192 [$ipsec-authentication-type]
                        #else if($ipsec-encryption-type == 'esp-aes 256')
                        no crypto ipsec transform-set $transform-set esp-aes 256 [$ipsec-authentication-type]
		#else if($ipsec-encryption-type == 'esp-gcm 128')
                        no crypto ipsec transform-set $transform-set esp-gcm 128 [$ipsec-authentication-type]
                        #else if($ipsec-encryption-type == 'esp-gcm 192')
                        no crypto ipsec transform-set $transform-set esp-gcm 192 [$ipsec-authentication-type]
                        #else if($ipsec-encryption-type == 'esp-gcm 256')
                        no crypto ipsec transform-set $transform-set esp-gcm 256 [$ipsec-authentication-type]
                        #else
                        no crypto ipsec transform-set $transform-set $ipsec-encryption-type [$ipsec-authentication-type]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:ipsec-profiles/ipsec-profile</target>
            <platform>ALL|ALL|ALL|ALL|Cisco Systems</platform>
            <device-operations>    
				<device-operation>
                    <name>ParseIpsecProfileWithIKE</name>
                    <type>PARSE_TEMPLATE</type>		    
					<command-string>crypto ipsec profile $ipsec-profile-name</command-string>
                    <command-string>
						#if($ike-version == "IKEV1")
                        set security-association lifetime seconds $life-time
                    </command-string>		    
                    <command-string>
                        set transform-set $transform-set
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV1")
                        set isakmp-profile $ike-profile-name
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV2")
                        set ikev2-profile $ike-profile-name
                    </command-string>
		    <command-string>
                        #if($ike-version == "IKEV2")
                        crypto ipsec security-association replay window-size 1024
                    </command-string>   
                </device-operation>
                <device-operation>
                    <name>CreateIpsecProfileWithIKE</name>
                    <type>CREATE</type>		    
		    <command-string>
                        crypto ipsec profile $ipsec-profile-name
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV1")
                        set security-association lifetime seconds $life-time
                    </command-string>		    
                    <command-string>
                        [set transform-set $transform-set]
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV1")
                        [set isakmp-profile $ike-profile-name]
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV2")
                        set ikev2-profile $ike-profile-name
                    </command-string>
		    <command-string>
                        #if($ike-version == "IKEV2")
                        crypto ipsec security-association replay window-size 1024
                    </command-string>   
                </device-operation> 
                <device-operation>
                    <name>UpdateIpsecProfileWithIKE</name>
                    <type>UPDATE</type>         
            <command-string>
                        crypto ipsec profile $ipsec-profile-name
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV1" AND $life-time != $life-time.%previous)
                        set security-association lifetime seconds $life-time
                    </command-string>           
                    <command-string>
                    #if($transform-set != $transform-set.%previous)
                    [set transform-set $transform-set]
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV1" AND $ike-profile-name != $ike-profile-name.%previous)
                        [set isakmp-profile $ike-profile-name]
                    </command-string>
                    <command-string>
                        #if($ike-version == "IKEV2" AND $ike-profile-name != $ike-profile-name.%previous)
                        set ikev2-profile $ike-profile-name
                    </command-string>              
                </device-operation>                            
                <device-operation>
                    <name>DeleteIpsecProfileWithIKE</name>
                    <type>DELETE</type>
		    <command-string>
			#if($ike-version == "IKEV2")                        
                        no crypto ipsec security-association replay window-size 1024
                    </command-string>
		    <command-string>                        
                        no crypto ipsec profile $ipsec-profile-name
                    </command-string>
		    <command-string>                        
                        shell processing full
                    </command-string>
		    <command-string>                        
                        sleep 60
                    </command-string>		    
		    <command-string>
		        no shell processing
		    </command-string>	
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/logging</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextLoggingHost</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>logging enable</command-string>
                    <command-string>logging timestamp</command-string>
                    <command-string>logging buffered debugging</command-string>
                    <command-string>logging trap informational</command-string>
                    <command-string>logging history errors</command-string>
                    <command-string>logging asdm informational</command-string>
                    <command-string>
                        #if($facility-number != null)
                        logging facility $facility-number
                        #else
                        logging facility 23
                    </command-string>
                    <command-string>
                        #if($interface-name != null AND $ip-address != null)
                        logging host $interface-name $ip-address
                        #else if($ip-address != null)
                        logging host inside $ip-address
                    </command-string>
                    <command-string>logging permit-hostdown</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextLoggingHost</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>no logging enable</command-string>
                    <command-string>no logging timestamp</command-string>
                    <command-string>no logging buffered debugging</command-string>
                    <command-string>no logging trap informational</command-string>
                    <command-string>no logging history errors</command-string>
                    <command-string>no logging asdm informational</command-string>
                    <command-string>
                        #if($facility-number != null)
                        no logging facility $facility-number
                        #else
                        no logging facility 23
                    </command-string>
                    <command-string>
                        #if($interface-name != null AND $ip-address != null)
                        no logging host $interface-name $ip-address
                        #else if($ip-address != null)
                        no logging host inside $ip-address
                    </command-string>
                    <command-string>no logging permit-hostdown</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:logging</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateLoggingHost</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($context-name != null)
                        changeto context $context-name
                    </command-string>
                    <command-string>logging enable</command-string>
                    <command-string>logging timestamp</command-string>
                    <command-string>logging buffered debugging</command-string>
                    <command-string>logging trap informational</command-string>
                    <command-string>logging history errors</command-string>
                    <command-string>logging asdm informational</command-string>
                    <command-string>
                        #if($facility-number != null)
                        logging facility $facility-number
                        #else
                        logging facility 23
                    </command-string>
                    <command-string>
                        #if($interface-name != null AND $ip-address != null)
                        logging host $interface-name $ip-address
                        #else if($ip-address != null)
                        logging host inside $ip-address
                    </command-string>
                    <command-string>logging permit-hostdown</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLoggingHost</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($context-name != null)
                        changeto context $context-name
                    </command-string>
                    <command-string>no logging enable</command-string>
                    <command-string>no logging timestamp</command-string>
                    <command-string>no logging buffered debugging</command-string>
                    <command-string>no logging trap informational</command-string>
                    <command-string>no logging history errors</command-string>
                    <command-string>no logging asdm informational</command-string>
                    <command-string>
                        #if($facility-number != null)
                        no logging facility $facility-number
                        #else
                        no logging facility 23
                    </command-string>
                    <command-string>
                        #if($interface-name != null AND $ip-address != null)
                        no logging host $interface-name $ip-address
                        #else if($ip-address != null)
                        no logging host inside $ip-address
                    </command-string>
                    <command-string>no logging permit-hostdown</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
     	    <target>/controller:devices/device/firewall:virtual-devices/virtual-device/tacacs-conf</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextAAA</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>aaa-server TACACS+ protocol tacacs+</command-string>
                    <command-string>aaa-server TACACS+ host $tacacs-host-ip</command-string>
                    <command-string>[timeout $timeout]</command-string>
                    <command-string>[key $tacacs-key]</command-string>
                    <command-string>exit</command-string>
                    <command-string>aaa authentication ssh console TACACS+ LOCAL</command-string>
                    <command-string>aaa authentication telnet console TACACS+ LOCAL</command-string>
                    <command-string>aaa authentication enable console TACACS+ LOCAL</command-string>
                    <command-string>aaa authentication http console TACACS+ LOCAL</command-string>
                    <command-string>aaa accounting ssh console TACACS+</command-string>
                    <command-string>aaa accounting command TACACS+</command-string>
                    <command-string>aaa accounting enable console TACACS+</command-string>
                    <command-string>aaa accounting telnet console TACACS+</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextAAA</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>no aaa-server TACACS+ protocol tacacs+</command-string>
                    <command-string>no aaa-server TACACS+ host $tacacs-host-ip</command-string>
                    <command-string>no aaa authentication ssh console TACACS+ LOCAL</command-string>
                    <command-string>no aaa authentication telnet console TACACS+ LOCAL</command-string>
                    <command-string>no aaa authentication enable console TACACS+ LOCAL</command-string>
                    <command-string>no aaa authentication http console TACACS+ LOCAL</command-string>
                    <command-string>no aaa accounting ssh console TACACS+</command-string>
                    <command-string>no aaa accounting command TACACS+</command-string>
                    <command-string>no aaa accounting enable console TACACS+</command-string>
                    <command-string>no aaa accounting telnet console TACACS+</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
     	    <target>/controller:devices/device/basicDeviceConfigs:tacacs-conf</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAAA</name>
                    <type>CREATE</type>
                    <command-string>[changeto context $context-name]</command-string>
                    <command-string>aaa-server TACACS+ protocol tacacs+</command-string>
                    <command-string>aaa-server TACACS+ host $tacacs-host-ip</command-string>
                    <command-string>[timeout $timeout]</command-string>
                    <command-string>[key $tacacs-key]</command-string>
                    <command-string>exit</command-string>
                    <command-string>aaa authentication ssh console TACACS+ LOCAL</command-string>
                    <command-string>aaa authentication telnet console TACACS+ LOCAL</command-string>
                    <command-string>aaa authentication enable console TACACS+ LOCAL</command-string>
                    <command-string>aaa authentication http console TACACS+ LOCAL</command-string>
                    <command-string>aaa accounting ssh console TACACS+</command-string>
                    <command-string>aaa accounting command TACACS+</command-string>
                    <command-string>aaa accounting enable console TACACS+</command-string>
                    <command-string>aaa accounting telnet console TACACS+</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAAA</name>
                    <type>DELETE</type>
                    <command-string>[changeto context $context-name]</command-string>
                    <command-string>no aaa-server TACACS+ protocol tacacs+</command-string>
                    <command-string>no aaa-server TACACS+ host $tacacs-host-ip</command-string>
                    <command-string>no aaa authentication ssh console TACACS+ LOCAL</command-string>
                    <command-string>no aaa authentication telnet console TACACS+ LOCAL</command-string>
                    <command-string>no aaa authentication enable console TACACS+ LOCAL</command-string>
                    <command-string>no aaa authentication http console TACACS+ LOCAL</command-string>
                    <command-string>no aaa accounting ssh console TACACS+</command-string>
                    <command-string>no aaa accounting command TACACS+</command-string>
                    <command-string>no aaa accounting enable console TACACS+</command-string>
                    <command-string>no aaa accounting telnet console TACACS+</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
     	    <target>/controller:devices/device/basicDeviceConfigs:tacacs-conf</target>
            <platform>ALL|ALL|Cisco ASA 1000V|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAAA</name>
                    <type>CREATE</type>
                    <command-string>aaa-server $tacacs-server-group protocol tacacs+</command-string>
                    <command-string>aaa-server $tacacs-server-group [$tacacs-src-interface] host $tacacs-host-ip</command-string>
                    <command-string>[timeout $timeout]</command-string>
                    <command-string>[key $tacacs-key]</command-string>
                    <command-string>exit</command-string>
                    <command-string>aaa authentication ssh console $tacacs-server-group LOCAL</command-string>
                    <command-string>aaa authentication telnet console $tacacs-server-group LOCAL</command-string>
                    <command-string>aaa authentication enable console $tacacs-server-group LOCAL</command-string>
                    <command-string>aaa authentication http console $tacacs-server-group LOCAL</command-string>
                    <command-string>aaa accounting ssh console $tacacs-server-group</command-string>
                    <command-string>aaa accounting command $tacacs-server-group</command-string>
                    <command-string>aaa accounting enable console $tacacs-server-group</command-string>
                    <command-string>aaa accounting telnet console $tacacs-server-group</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAAA</name>
                    <type>DELETE</type>
                    <command-string>no aaa authentication ssh console $tacacs-server-group LOCAL</command-string>
                    <command-string>no aaa authentication telnet console $tacacs-server-group LOCAL</command-string>
                    <command-string>no aaa authentication enable console $tacacs-server-group LOCAL</command-string>
                    <command-string>no aaa authentication http console $tacacs-server-group LOCAL</command-string>
                    <command-string>no aaa accounting ssh console $tacacs-server-group</command-string>
                    <command-string>no aaa accounting command $tacacs-server-group</command-string>
                    <command-string>no aaa accounting enable console $tacacs-server-group</command-string>
                    <command-string>no aaa accounting telnet console $tacacs-server-group</command-string>
                    <command-string>no aaa-server $tacacs-server-group [$tacacs-src-interface] host $tacacs-host-ip</command-string>
                    <command-string>no aaa-server $tacacs-server-group protocol tacacs+</command-string>
                </device-operation>
            </device-operations>
        </operation>


        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/snmp</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextSnmp</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>[snmp-server location $location]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextSnmp</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>[no snmp-server location $location]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/snmp/snmp-server</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextSnmpServer</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>snmp-server host inside $snmp-server-ip trap community public version 2c</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextSnmpServer</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>no snmp-server host inside $snmp-server-ip trap community public version 2c</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSnmp</name>
                    <type>CREATE</type>
                    <command-string>[changeto context $context-name]</command-string>
                    <command-string>[snmp-server location $location]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSnmp</name>
                    <type>DELETE</type>
                    <command-string>[changeto context $context-name]</command-string>
                    <command-string>[no snmp-server location $location]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/snmp-server</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSnmpServer</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../context-name</command-string>
                    <command-string>snmp-server host inside $snmp-server-ip trap community public version 2c</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSnmpServer</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../context-name</command-string>
                    <command-string>no snmp-server host inside $snmp-server-ip trap community public version 2c</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/ssh</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextSSH</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>[ssh $ip-address $netmask $intf-name] </command-string>
                    <command-string>[ssh timeout $timeout]</command-string>
                    <command-string>[ssh version $version]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextSSH</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../name</command-string>
                    <command-string>[no ssh timeout $timeout]</command-string>
                    <command-string>[no ssh version $version]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/ssh/network</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextSSHNetwork</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>
                        #if($../interface-name != null)
                        [ssh $ip-address $netmask $../interface-name]
                        #else
                        [ssh $ip-address $netmask inside]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextSSHNetwork</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>#if($../interface-name != null)
                        [no ssh $ip-address $netmask $../interface-name]
                        #else
                        [no ssh $ip-address $netmask inside]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ssh</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSSH</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($context-name != null)
                        changeto context $context-name
                        #else
                        changeto system
                    </command-string>
                    <command-string>[ssh timeout $timeout]</command-string>
                    <command-string>[ssh version $version]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateSSH</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($context-name != null)
                        changeto context $context-name
                        #else
                        changeto system
                    </command-string>
                    <command-string>[ssh timeout $timeout]</command-string>
                    <command-string>[ssh version $version]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSSH</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($context-name != null)
                        changeto context $context-name
                        #else
                        changeto system
                    </command-string>
                    <command-string>[no ssh timeout $timeout]</command-string>
                    <command-string>[no ssh version $version]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ssh</target>
            <platform>ALL|ALL|Cisco ASA 1000V|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSSH</name>
                    <type>CREATE</type>
                    <command-string>[ssh timeout $timeout]</command-string>
                    <command-string>[ssh version $version]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSSH</name>
                    <type>DELETE</type>
                    <command-string>[no ssh timeout $timeout]</command-string>
                    <command-string>[no ssh version $version]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ssh/network</target>
            <platform>ALL|ALL|Cisco ASA 1000V|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSSHNetwork</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../interface-name != null)
                        [ssh $ip-address $netmask $../interface-name]
                        #else
                        [ssh $ip-address $netmask inside]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSSHNetwork</name>
                    <type>DELETE</type>
                    <command-string>#if($../interface-name != null)
                        [no ssh $ip-address $netmask $../interface-name]
                        #else
                        [no ssh $ip-address $netmask inside]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ssh/network</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSSHNetwork</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../context-name != null)
                        changeto context $../context-name
                        #else
                        changeto system
                    </command-string>
                    <command-string>
                        #if($../interface-name != null)
                        [ssh $ip-address $netmask $../interface-name]
                        #else
                        [ssh $ip-address $netmask inside]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSSHNetwork</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../context-name != null)
                        changeto context $../context-name
                        #else
                        changeto system
                    </command-string>
                    <command-string>#if($../interface-name != null)
                        [no ssh $ip-address $netmask $../interface-name]
                        #else
                        [no ssh $ip-address $netmask inside]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/ti-class-maps/class-map</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextTiClassMap</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>class-map $name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextTiClassMap</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>no class-map $name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/ti-class-maps/class-map/match-condition</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextTiClassMapMatchCondition</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../../name</command-string>
                    <command-string>class-map $../name</command-string>
                    <command-string>match $match-value</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextTiClassMapMatchCondition</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../../name</command-string>
                    <command-string>class-map $../name</command-string>
                    <command-string>no match $match-value</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/ti-policy-maps/policy-map</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextTiPolicyMap</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>policy-map $name</command-string>
                    <command-string>service-policy $name global</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextTiPolicyMap</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../name</command-string>
                    <command-string>no service-policy $name global</command-string>
                    <command-string>no policy-map $name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/ti-policy-maps/policy-map/class</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextTiPolicyMapClassEntry</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../../name</command-string>
                    <command-string>policy-map $../name</command-string>
                    <command-string>class $class-map-name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextTiPolicyMapClassEntry</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../../name</command-string>
                    <command-string>policy-map $../name</command-string>
                    <command-string>no class $class-map-name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/firewall:virtual-devices/virtual-device/ti-policy-maps/policy-map/class/inspect-type</target>
            <platform>ALL|ALL|ALL|ASAOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContextTiPolicyMapClassInspectEntry</name>
                    <type>CREATE</type>
                    <command-string>changeto context $../../../../name</command-string>
                    <command-string>policy-map $../../name</command-string>
                    <command-string>class $../class-map-name</command-string>
                    <command-string>inspect $inspect-value</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContextTiPolicyMapClassInspectEntry</name>
                    <type>DELETE</type>
                    <command-string>changeto context $../../../../name</command-string>
                    <command-string>policy-map $../../name</command-string>
                    <command-string>class $../class-map-name</command-string>
                    <command-string>no inspect $inspect-value</command-string>
                </device-operation>
            </device-operations>
        </operation>
     </operations>
    <operations>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:error-disable-recovery</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateErrDisableRecoveryInterval</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($err-disable-recovery-interval != null)
                        errdisable recovery interval $err-disable-recovery-interval
                    </command-string>
                </device-operation>
                <device-operation>
                   <name>UpdateErrDisableRecoveryInterval</name>
                   <type>UPDATE</type>
                   <command-string>
                       #if($err-disable-recovery-interval != null)
                       errdisable recovery interval $err-disable-recovery-interval
                   </command-string>
               </device-operation>
                <device-operation>
                    <name>DeleteErrDisableRecoveryInterval</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($err-disable-recovery-interval != null)
                        no errdisable recovery interval $err-disable-recovery-interval
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:error-disable-recovery/error-recoverycause</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateErrDisableRecoveryCause</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($error-recovery-cause != null)
                        errdisable recovery cause $error-recovery-cause
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateErrDisableRecoveryCause</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($error-recovery-cause != null)
                        errdisable recovery cause $error-recovery-cause
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteErrDisableRecoveryCause</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($error-recovery-cause != null)
                        no errdisable recovery cause $error-recovery-cause
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:bfd</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatebfdInterval</name>
                    <type>CREATE</type>
                    <command-string>
                        bfd interval $interval min_rx $min-rx multiplier $multiplier
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatebfdInterval</name>
                    <type>UPDATE</type>
                    <command-string>
                        bfd interval $interval min_rx $min-rx multiplier $multiplier
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeletebfdInterval</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($interval != null and $min-rx !=null and $multiplier !=null)
                        no bfd interval $interval min_rx $min-rx multiplier $multiplier
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ip-arp</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateIPArpTimeout</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($ip-arp-timeout != null)
                        ip arp timeout $ip-arp-timeout
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateIPArpTimeout</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($ip-arp-timeout != null)
                        ip arp timeout $ip-arp-timeout
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteIPArpTimeout</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($ip-arp-timeout != null)
                        no ip arp timeout $ip-arp-timeout
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:mac-table</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateMacTableAgingTime</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($table-aging-time != null)
                        mac address-table aging-time $table-aging-time
                    </command-string>
                    <command-string>mac address-table notification threshold limit $threshold-limit interval $interval</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateMacTableAgingTime</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($table-aging-time != null)
                        mac address-table aging-time $table-aging-time
                    </command-string>
                    <command-string>mac address-table notification threshold limit $threshold-limit interval $interval</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteMacTableAgingTime</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($table-aging-time != null)
                        no mac address-table aging-time $table-aging-time
                    </command-string>
                    <command-string>no mac address-table notification threshold limit $threshold-limit interval $interval</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:service-unsupported</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateUnsupportedTransceiver</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($unsupported-transceiver == "true")
                        service unsupported-transceiver
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateUnsupportedTransceiver</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($unsupported-transceiver == "true")
                        service unsupported-transceiver
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteUnsupportedTransceiver</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($unsupported-transceiver == "true")
                        no service unsupported-transceiver
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:jumbo-mtu</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateJumboMTU</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($jumbomtu != null)
                        system jumbomtu $jumbomtu
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateJumboMTU</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($jumbomtu != null)
                        system jumbomtu $jumbomtu
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteJumboMTU</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($jumbomtu != null)
                        no system jumbomtu $jumbomtu
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:interface-breakout</target>
            <platform>ALL|ALL|ALL|NXOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceBreakout</name>
                    <type>CREATE</type>
                    <command-string>
                        interface breakout slot $slot port $port map $map
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceBreakout</name>
                    <type>UPDATE</type>
                    <command-string>
                        interface breakout slot $slot port $port map $map
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceBreakout</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($slot != null and $port != null and $map != null)
                        no interface breakout slot $slot port $port map $map
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
    </operations>
</device-support>
