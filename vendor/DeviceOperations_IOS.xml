<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<device-support>
    <operations>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/vrrp:vrrp</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseInterfaceVrrp</name>
                    <type>PARSE</type>
                    <command-string>
                        interface $name
                        ip helper-address $dhcp-server-address
                        vrrp $vrrp-group ip $virtual-address
                        vrrp 1 preempt delay minimum $advertisement-interval
                        vrrp 1 authentication $auth-type $auth-key
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:ip-nat/nat-translation</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateIpNatTranslationTimes</name>
                    <type>CREATE</type>
                    <command-string>ip nat translation $nat-flow $timeout</command-string>                    
                </device-operation>
                <device-operation>
                    <name>UpdateIpNatTranslationTimes</name>
                    <type>UPDATE</type>
                    <command-string>ip nat translation $nat-flow $timeout</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteIpNatTranslationTimes</name>
                    <type>DELETE</type>
                    <command-string>no ip nat translation $nat-flow $timeout</command-string>                    
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/l3features:ip-nat/address-translation</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateIpNatTranslation</name>
                    <type>CREATE</type>
                    <command-string>
                       #if($nat-list == "static" AND $network == "true")
                        ip nat $side $address-translation $nat-list network $value $inside-global-ip $prefix-length
                        #else if($nat-list == "static" AND $network == "false" AND $route-map-name == null)
			ip nat $side $address-translation $nat-list $value $inside-global-ip
			#else if($nat-list == "static" AND $network == "false" AND $route-map-name != null)
                        ip nat $side $address-translation $nat-list $value $inside-global-ip route-map $route-map-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateIpNatTranslation</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($nat-list == "static" AND $network == "true")
                        ip nat $side $address-translation $nat-list network $value $inside-global-ip $prefix-length
                        #else if($nat-list == "static" AND $network == "false" AND $route-map-name == null)
			ip nat $side $address-translation $nat-list $value $inside-global-ip
			#else if($nat-list == "static" AND $network == "false" AND $route-map-name != null)
                        ip nat $side $address-translation $nat-list $value $inside-global-ip route-map $route-map-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteIpNatTranslation</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($nat-list == "static" AND $network == "true")
                        no ip nat $side $address-translation $nat-list network $value $inside-global-ip $prefix-length
                        #else if($nat-list == "static" AND $network == "false" AND $route-map-name == null)
			no ip nat $side $address-translation $nat-list $value $inside-global-ip
			#else if($nat-list == "static" AND $network == "false" AND $route-map-name != null)
                        no ip nat $side $address-translation $nat-list $value $inside-global-ip route-map $route-map-name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:spanning-tree/mode</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSpanningTree</name>
                    <type>CREATE</type>
                    <command-string>spanning-tree mode $mode</command-string>
                    <command-string>
			#if($extend-system-id == "true")
			spanning-tree extend system-id
		    </command-string>                    
                </device-operation>
                <device-operation>
                    <name>DeleteSpanningTree</name>
                    <type>DELETE</type>                    
                    <command-string>no spanning-tree mode $mode</command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/basicDeviceConfigs:spanning-tree/vlan</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSpanningTreeVlan</name>
                    <type>CREATE</type>                    
                    <command-string>spanning-tree vlan $vlan [priority $priority]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSpanningTreeVlan</name>
                    <type>DELETE</type>
                    <command-string>no spanning-tree vlan $vlan [priority $priority]</command-string>                    
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/l3features:ip-nat/address-translation/interface</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateIpNatTranslationInterface</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $oer == "false" AND $extended == "false" AND $vrf == null)
                        ip nat $../side $../address-translation $../nat-list $../value interface $interface-name overload
                        #else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $oer == "false" AND $extended == "false" AND $vrf != null)
                        ip nat $../side $../address-translation $../nat-list $../value interface $interface-name vrf $vrf overload
			            #else if($../side == "inside" AND $../address-translation == "source" AND $overload == "false" AND $oer == "false" AND $extended == "false")
			            ip nat $../side $../address-translation $../nat-list $../value interface $interface-name [vrf $vrf] 
			            #else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $oer == "true" AND $extended == "false")
			            ip nat $../side $../address-translation $../nat-list $../value interface $interface-name [vrf $vrf] oer overload 
			            #else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $oer == "true" AND $extended == "true")
			            ip nat $../side $../address-translation $../nat-list $../value interface $interface-name [vrf $vrf] oer overload extended
						#else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $oer == "false" AND $extended == "true")
			            ip nat $../side $../address-translation $../nat-list $../value interface $interface-name [vrf $vrf] overload extended
                    </command-string>                                       
                </device-operation>
		<device-operation>
                    <name>UpdateIpNatTranslationInterface</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $oer == "false" AND $extended == "false" AND $vrf == null)
                        ip nat $../side $../address-translation $../nat-list $../value interface $interface-name overload
                        #else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $oer == "false" AND $extended == "false" AND $vrf != null)
                        ip nat $../side $../address-translation $../nat-list $../value interface $interface-name vrf $vrf overload
			            #else if($../side == "inside" AND $../address-translation == "source" AND $overload == "false" AND $oer == "false" AND $extended == "false")
			            ip nat $../side $../address-translation $../nat-list $../value interface $interface-name [vrf $vrf]
			            #else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $oer == "true" AND $extended == "false")
			            ip nat $../side $../address-translation $../nat-list $../value interface $interface-name [vrf $vrf] oer overload 
			            #else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $oer == "true" AND $extended == "true")
			            ip nat $../side $../address-translation $../nat-list $../value interface $interface-name [vrf $vrf] oer overload extended
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteIpNatTranslationInterface</name>
                    <type>DELETE</type>
		    <command-string>exit</command-string>
		    <command-string>clear ip nat translation *</command-string>
		    <command-string>configure terminal</command-string>		    
                    <command-string>
                        #if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $oer == "false" AND $extended == "false" AND $vrf == null)
                        ip nat $../side $../address-translation $../nat-list $../value interface $interface-name overload
                        #else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $oer == "false" AND $extended == "false" AND $vrf != null)
                        ip nat $../side $../address-translation $../nat-list $../value interface $interface-name vrf $vrf overload
			            #else if($../side == "inside" AND $../address-translation == "source" AND $overload == "false" AND $oer == "false" AND $extended == "false")
			            no ip nat $../side $../address-translation $../nat-list $../value interface $interface-name [vrf $vrf] 
			            #else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $oer == "true" AND $extended == "false")
			            no ip nat $../side $../address-translation $../nat-list $../value interface $interface-name [vrf $vrf] oer overload 
			            #else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $oer == "true" AND $extended == "true")
			            no ip nat $../side $../address-translation $../nat-list $../value interface $interface-name [vrf $vrf] oer overload extended
                    </command-string> 
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/l3features:ip-nat</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseIpNatPool</name>
                    <type>PARSE</type>
                    <command-string>
                        #if(vrf != null)
                        ip nat $side $address-translation $nat-list $value interface $interface-name vrf $vrf overload
                        #else
                        ip nat $side $address-translation $nat-list $value interface $interface-name overload
                    </command-string>
                    <command-string>
                        ip nat $side $address-translation $nat-list $value interface $interface-name [vrf $vrf] oer overload
                    </command-string>
					<command-string>
		    	    ip nat $side $address-translation $nat-list $value interface $interface-name [vrf $vrf] overload extended
		            </command-string>
		    <command-string>
		    	ip nat $side $address-translation $nat-list $value interface $interface-name [vrf $vrf] oer overload extended
		    </command-string>
		    <command-string>
			ip nat $side $address-translation $nat-list $value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf] add-route
		    </command-string>
		    <command-string>
			ip nat $side $address-translation $nat-list $value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf]
		    </command-string>
		    <command-string>
			ip nat $side $address-translation $nat-list $value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id]
		    </command-string>
		    <command-string>
			ip nat $side $address-translation $nat-list $value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] oer overload extended
		    </command-string>
		    <command-string>
			ip nat $side $address-translation $nat-list $value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] oer overload
		    </command-string>
		    <command-string>
			ip nat $side $address-translation $nat-list $value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf] match-in-vrf overload
		    </command-string>
		    <command-string>
			ip nat $side $address-translation $nat-list $value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf] overload
		    </command-string>
                </device-operation>		
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/l3features:ip-nat-pool/pool</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateIpNatPool</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($netmask != null)
                        ip nat pool $pool-name $start-ip $end-ip netmask $netmask [type $pool-type]
                    </command-string>
                    <command-string>
                        #if($prefix-length != null)
                        ip nat pool $pool-name $start-ip $end-ip prefix-length $prefix-length [type $pool-type]
                    </command-string>                    
                </device-operation>
                <device-operation>
                    <name>ParseTemplateIpNatPool</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($netmask != null)
                        ip nat pool $pool-name $start-ip $end-ip netmask $netmask [type $pool-type]
                        #else
                        ip nat pool $pool-name $start-ip $end-ip prefix-length $prefix-length [type $pool-type]
                    </command-string>
                </device-operation>
		<device-operation>
                    <name>UpdateIpNatPool</name>
                    <type>UPDATE</type>
            <command-string>
                #if($netmask != null)
                ip nat pool $pool-name $start-ip $end-ip netmask $netmask [type $pool-type]
            </command-string>
            <command-string>
                #if($prefix-length != null)
                ip nat pool $pool-name $start-ip $end-ip prefix-length $prefix-length [type $pool-type]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteIpNatPool</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($netmask != null)
                        no ip nat pool $pool-name $start-ip $end-ip netmask $netmask [type $pool-type]
                    </command-string>
                    <command-string>
                        #if($prefix-length != null)
                        no ip nat pool $pool-name $start-ip $end-ip prefix-length $prefix-length [type $pool-type]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/l3features:ip-nat/address-translation/pool</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseIpNatTranslationPool</name>
                    <type>PARSE</type>
                    <command-string>
                        ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [vrf $vrf] overload
                    </command-string>
                    <command-string>
                        ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [vrf $vrf] overload
                    </command-string>
                    <command-string>
                        ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf] overload
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateIpNatTranslationPool</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $match-in-vrf == "false" AND $oer == "false" AND $redundancy-id  == null AND $mapping-id == null AND $vrf == null )
                        ip nat $../side $../address-translation $../nat-list $../value pool $pool-name overload
			#else if($../side == "outside" AND $add-route == "true" AND $../address-translation == "source")
			ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf] add-route
			#else if($../side == "outside" AND $add-route == "false" AND $../address-translation == "source")
			ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf]
			#else if($../side == "inside" AND $../address-translation == "destination")
			ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id]
			#else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $extended == "true" AND $oer == "true")
			ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] oer overload extended
			#else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $extended == "false" AND $oer == "true")
			ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] oer overload
			#else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $match-in-vrf == "true" AND $oer == "false")
			ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf] match-in-vrf overload
			#else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $match-in-vrf == "false" AND $oer == "false")
			ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf] overload
			#else if($../side == "inside" AND $../address-translation == "source" AND $overload == "false" AND $match-in-vrf == "false" AND $oer == "false")
			ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf]
                    </command-string>                                       
                </device-operation>
		<device-operation>
                    <name>UpdateIpNatTranslationPool</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $match-in-vrf == "false" AND $oer == "false" AND $redundancy-id  == null AND $mapping-id == null AND $vrf == null )
                        ip nat $../side $../address-translation $../nat-list $../value pool $pool-name overload
			#else if($../side == "outside" AND $add-route == "true" AND $../address-translation == "source")
			ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf] add-route
			#else if($../side == "outside" AND $add-route == "false" AND $../address-translation == "source")
			ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf]
			#else if($../side == "inside" AND $../address-translation == "destination")
			ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id]
			#else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $extended == "true" AND $oer == "true")
			ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] oer overload extended
			#else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $extended == "false" AND $oer == "true")
			ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] oer overload
			#else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $match-in-vrf == "true" AND $oer == "false")
			ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf] match-in-vrf overload
			#else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $match-in-vrf == "false" AND $oer == "false")
			ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf] overload
			#else if($../side == "inside" AND $../address-translation == "source" AND $overload == "false" AND $match-in-vrf == "false" AND $oer == "false")
			ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteIpNatTranslationPool</name>
                    <type>DELETE</type>
		    <command-string>exit</command-string>
		    <command-string>clear ip nat translation *</command-string>
		    <command-string>configure terminal</command-string>
                    <command-string>
                        #if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $match-in-vrf == "false" AND $oer == "false" AND $redundancy-id  == null AND $mapping-id == null AND $vrf == null )
                        no ip nat $../side $../address-translation $../nat-list $../value pool $pool-name overload
			#else if($../side == "outside" AND $add-route == "true" AND $../address-translation == "source")
			no ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf] add-route
			#else if($../side == "outside" AND $add-route == "false" AND $../address-translation == "source")
			no ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf]
			#else if($../side == "inside" AND $../address-translation == "destination")
			no ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id]
			#else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $extended == "true" AND $oer == "true")
			no ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] oer overload extended
			#else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $extended == "false" AND $oer == "true")
			no ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] oer overload
			#else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $match-in-vrf == "true" AND $oer == "false")
			no ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf] match-in-vrf overload
			#else if($../side == "inside" AND $../address-translation == "source" AND $overload == "true" AND $match-in-vrf == "false" AND $oer == "false")
			no ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf] overload
			#else if($../side == "inside" AND $../address-translation == "source" AND $overload == "false" AND $match-in-vrf == "false" AND $oer == "false")
			no ip nat $../side $../address-translation $../nat-list $../value pool $pool-name [redundancy $redundancy-id] [mapping-id $mapping-id] [vrf $vrf]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseInterface</name>
                    <type>PARSE</type>
                    <command-string>switchport mode $mode</command-string>
                </device-operation>
                <device-operation>
                    <name>CreateInterface</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($mode == "vlan")
                        interface vlan $l2features:vlan
                        #else
                        interface $name
                    </command-string>
                    <command-string>
                        #if($description != null)
                        description $description
                    </command-string>
                    <command-string>
                        #if($l3features:vrf != null AND $l3features:vrf != "GLOBAL" AND $vrf-definition-mode == "false")
                        ip vrf forwarding $l3features:vrf
			#else if($l3features:vrf != null AND $l3features:vrf != "GLOBAL" AND $vrf-definition-mode == "true")
			vrf forwarding $l3features:vrf
                    </command-string>
                    <command-string>
                        #if($mode == "sub-interface" AND $inner-vlan != null)
                        encapsulation dot1q $l2features:vlan second-dot1q $inner-vlan [$encap-mode]
                        #else if($mode == "sub-interface" AND $inner-vlan == null)
                        encapsulation dot1q $l2features:vlan
                    </command-string>
                    <command-string>
                        #if($ip-address != null AND $netmask != null)
                        ip address $ip-address $netmask
                        #else if($interface-ext:no-ip-address == "true")
                        no ip address
                    </command-string>
                    <command-string>
                        #if($ipv6-address != null)
                        ipv6 address $ipv6-address/$ipv6-prefix-length
                    </command-string>
                    <command-string>
                        #if($ipv6-address != null)
                        ipv6 enable
                    </command-string>
                    <command-string>
                        #if(($mpls-device-role == "PE" OR $mpls-device-role == "P" OR $mpls-device-role == "PE-RR") AND $mode != "loopback-interface")
                        mpls ip
                    </command-string>
                    <command-string>
                        #if($mtu != null)
                        mtu $mtu
                    </command-string>
                     <command-string>
                        #if($maximum-segment-size != null)
                        ip tcp adjust-mss $maximum-segment-size
                    </command-string>
                    <command-string>
                        #if($native-vlan != null AND $mode == "trunk")
                        switchport trunk native vlan $native-vlan
                    </command-string>
                    <command-string>
                        #if($portfast == "true")
                        spanning-tree portfast
                    </command-string>
                    <command-string>
                        #if($bpduguard == "true")
                        spanning-tree bpduguard enable
                    </command-string>		    
		    <command-string>
                        #if($bgp-policy == "true")
                        bgp-policy destination ip-prec-map
                    </command-string>
		    <command-string>
                        #if($bgp-policy-qos == "true")
                        bgp-policy destination ip-qos-map
                    </command-string>
		    <command-string>
			#if($pbr-policy != null)
			ip policy route-map $pbr-policy
		    </command-string>
		    <command-string>
                        #if($vrf-receive != null)
                        ip vrf receive $vrf-receive
                    </command-string>
                    <command-string>
                        #if($broadcast == "true")
                        storm-control broadcast level $level
                    </command-string>
                    <command-string>
                        #if($acl:acl-inbound-name != null)
                        ip access-group $acl:acl-inbound-name in
                    </command-string>
                    <command-string>
                        #if($acl:acl-outbound-name != null)
                        ip access-group $acl:acl-outbound-name out
                    </command-string>
		    <command-string>
                        #if($outbound-qos != null)
                        service-policy output $outbound-qos
                    </command-string>
		    <command-string>
                        #if($inbound-qos != null)
                        service-policy input $inbound-qos
                    </command-string>
                    <command-string>
                        #if($bandwidth != null)
                        bandwidth $bandwidth
                    </command-string>
	        <command-string>
                        #if($delay != null)
                        delay $delay
                    </command-string>
                    <command-string>
                        #if($duplex != null AND $duplex != $duplex.%previous AND ($mode != "sub-interface" OR $mode != "vlan"))
                        duplex $duplex
                    </command-string>
                    <command-string>
                        #if($interface-ext:mace-enable == "true")
                        mace-enable
                    </command-string>
                    <command-string>
                        #if($link-negotiation != null  AND ($mode != "sub-interface" OR $mode != "vlan"))
                        speed auto
                        #else if($link-negotiation == null AND $speed != $speed.%previous AND ($mode != "sub-interface" OR $mode != "vlan"))
                        speed $speed
                    </command-string>
                    <command-string>
                        #if($nat-name != null)
                        ip nat $nat-name
                    </command-string>
	        <command-string>
                        #if($mode == "l3-interface" OR $mode == "loopback-interface")
                        hold-queue $in-queue-length in
                    </command-string>
	        <command-string>
                        #if($mode == "l3-interface" OR $mode == "loopback-interface")
                        hold-queue $out-queue-length out
                    </command-string>
                    <command-string>
                    #if($mode == "l3-interface" OR $mode == "sub-interface" OR $mode == "vlan")
                    ip nbar $interface-ext:protocol-discovery
                </command-string>
                    <command-string>
                        #if($l2features:port-channel-name != null and $l2features:channel-group-mode != null)
                        channel-group $l2features:port-channel-name [mode $l2features:channel-group-mode]
                    </command-string>
                    <command-string>
                    #if($admin-state == "UP")
                    no shutdown
                    #else if($admin-state == "DOWN")
                    shutdown
                </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterface</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($mode == "vlan")
                        interface vlan $l2features:vlan
                        #else
                        interface $name
                    </command-string>
                    <command-string>
                        #if($l3features:vrf != null AND $l3features:vrf != "GLOBAL" AND $vrf-definition-mode == "false")
                        ip vrf forwarding $l3features:vrf
                        #else if($l3features:vrf != null AND $l3features:vrf != "GLOBAL" AND $vrf-definition-mode == "true")
                        vrf forwarding $l3features:vrf
                    </command-string>
                   <!--  <command-string>
                        #if($ip-address != null AND $netmask != null AND $ip-address != $ip-address.%previous)
                        ip address $ip-address $netmask
                        #else if($interface-ext:no-ip-address == "true")
                        no ip address
                    </command-string> -->
                    <command-string>
                        [no ipv6 address $ipv6-address.%previous/$ipv6-prefix-length.%previous]
                    </command-string>
                    <command-string>
                        #if($ipv6-address != null)
                        ipv6 address $ipv6-address/$ipv6-prefix-length
                    </command-string>
                    <command-string>
                        #if($ipv6-address != null)
                        ipv6 enable
                    </command-string>
                    <command-string>
                        #if(($mpls-device-role == "PE" OR $mpls-device-role == "P" OR $mpls-device-role == "PE-RR") AND $mode != "loopback-interface")
                        mpls ip
                    </command-string>
                    <command-string>
                        #if($mtu != null)
                        mtu $mtu
                    </command-string>
                    <command-string>
                        #if($portfast == "true")
                        spanning-tree portfast
                    </command-string>
                    <command-string>
                        #if($bpduguard == "true")
                        spanning-tree bpduguard enable
                    </command-string>
                    <command-string>
                        #if($broadcast == "true")
                        storm-control broadcast level $level
                    </command-string>		    
		    <command-string>
                        #if($bgp-policy == "true")
                        bgp-policy destination ip-prec-map
                    </command-string>
		    <command-string>
                        #if($bgp-policy-qos == "true")
                        bgp-policy destination ip-qos-map
                    </command-string>  
                   <!--  <command-string>
                        #if($link-negotiation != null AND $link-negotiation != $link-negotiation.%previous AND ($mode != "sub-interface" OR $mode != "vlan"))
                        speed auto
                        #else if($link-negotiation == null AND $speed != $speed.%previous AND ($mode != "sub-interface" OR $mode != "vlan"))
                        speed $speed
                    </command-string>
                    <command-string>
                        #if($link-negotiation != null  AND $duplex != $duplex.%previous AND ($mode != "sub-interface" OR $mode != "vlan"))
                        duplex auto
                        #else if($link-negotiation == null AND $duplex != null AND $duplex != $duplex.%previous AND ($mode != "sub-interface" OR $mode != "vlan"))
                        duplex $duplex
                    </command-string> -->
                                      
                </device-operation>
                <device-operation>
                    <name>DeleteInterface</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($mode == "vlan")
                        no interface vlan $l2features:vlan
                        #else if($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface")
                        interface $name
                        #else if($mode == "reset" OR $mode == "l3-interface")
                        default interface $name
                        #else
                        no interface $name
                    </command-string>
                    <command-string>
                        #if($l2features:port-channel-name != null)
                        no channel-group
                    </command-string>
                    <command-string>
                        #if($l3features:vrf != null AND $l3features:vrf != "GLOBAL" AND ($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface") AND $vrf-definition-mode == "false")
                        no ip vrf forwarding
			#else if($l3features:vrf != null AND $l3features:vrf != "GLOBAL" AND ($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface") AND $vrf-definition-mode == "true")
                        no vrf forwarding
                    </command-string>
                    <command-string>
                        #if($maximum-segment-size != null  AND ($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface"))
                        no ip tcp adjust-mss $maximum-segment-size
                    </command-string>
                    <command-string>
                        #if($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface")
                        no description
                    </command-string>
                    <command-string>
                        #if($duplex != null AND ($mode == "l3-interface"))
                        no duplex
                    </command-string>	        
                    <command-string>
                        #if($interface-ext:mace-enable == "true")
                        no mace-enable
                    </command-string>
	        <command-string>
                        #if($vrf-receive != null AND ($mode == "l3-interface"))
                        no ip vrf receive $vrf-receive
                    </command-string>
		    <command-string>
			#if($pbr-policy != null AND ($mode == "l3-interface"))
                        no ip policy route-map $pbr-policy
		    </command-string>
		    <command-string>
                        #if($bgp-policy == "true" AND ($mode == "l3-interface"))
                        no bgp-policy destination ip-prec-map
                    </command-string>
		    <command-string>
                        #if($bgp-policy-qos == "true" AND ($mode == "l3-interface"))
                        no bgp-policy destination ip-qos-map
                    </command-string>	
		    <command-string>
                        #if($nat-name != null AND ($mode == "l3-interface"))
                        no ip nat $nat-name
                    </command-string>
                    <command-string>
                    #if($mode == "l3-interface" OR $mode == "sub-interface" OR $mode == "vlan")
                    no ip nbar $interface-ext:protocol-discovery
                </command-string>	    
                    <command-string>
                        #if($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface")
                        [no ip address $ip-address $netmask]
                    </command-string>
                    <command-string>
                        #if($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface")
                        [no ipv6 address $ipv6-address/$ipv6-prefix-length]
                    </command-string>
                        <command-string>
                            #if($native-vlan != null AND $mode == "trunk")
                            no switchport trunk native vlan $native-vlan
                        </command-string>
                        <command-string>
                    #if($portfast == "true" AND ($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface"))
                    no spanning-tree portfast
                </command-string>
                <command-string>
                    #if($interface-ext:bfd-options == "interval")
                    no bfd interval
                </command-string>
                <command-string>
                    #if($bpduguard == "true" AND ($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface"))
                    no spanning-tree bpduguard enable
                </command-string>
                <command-string>
                    #if($interface-ext:carrier-delay-time != null)
                    no carrier-delay
                </command-string>
        <command-string>
                    #if($interface-ext:no-ip-directed == "false")
                    no ip directed-broadcast
                    #if($interface-ext:no-ip-directed == "true")
                    ip directed-broadcast
                </command-string>                    
                <command-string>
                    #if($interface-ext:no-mop-enabled == "false")
                    no mop enabled
                    #if($interface-ext:no-mop-enabled == "true")
                    mop enabled
                </command-string>
                <command-string>
                    #if($mode == "l3-interface" OR $mode == "dot1q-tunnel")
                    no load-interval $load-interval-delay
                </command-string>
                <command-string>
                    #if($interface-ext:route-cache == "true")
                    no ip route-cache
                    #if($interface-ext:route-cache == "false")
                    ip route-cache
                </command-string>
                </device-operation>
            </device-operations>
        </operation>
         
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:switchport-mapping</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSwitchportMapping</name>
                    <type>CREATE</type>
                    <command-string>interface $../name</command-string>
                    <command-string>
                        #if($../mode == "trunk")
                        switchport vlan mapping $inner-vlan dot1q-tunnel $outer-vlan
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateSwitchportMapping</name>
                    <type>UPDATE</type>
                    <command-string>interface $../name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSwitchportMapping</name>
                    <type>DELETE</type>
                    <command-string>interface $../name</command-string>
                    <command-string>
                        no switchport vlan mapping $inner-vlan dot1q-tunnel $outer-vlan
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:switchport-mapping/outer-vlan</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSwitchportMappingOuterVlan</name>
                    <type>CREATE</type>
                    <command-string>
                        switchport vlan mapping $../inner-vlan dot1q-tunnel $outer-vlan
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateSwitchportMappingOuterVlan</name>
                    <type>UPDATE</type>
                    <command-string>
                        switchport vlan mapping $../inner-vlan dot1q-tunnel $outer-vlan
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSwitchportMappingOuterVlan</name>
                    <type>DELETE</type>
                    <command-string>
                        no switchport vlan mapping $../inner-vlan dot1q-tunnel $outer-vlan
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:vlan-xconnect</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVlanXconnect</name>
                    <type>CREATE</type>
                    <command-string>interface $../name</command-string>
                    <command-string>
                        xconnect $peer-ip $tunnel-id [encapsulation $encapsulation-type] pw-class $pw-class-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVlanXconnect</name>
                    <type>UPDATE</type>
                    <command-string>interface $../name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVlanXconnect</name>
                    <type>DELETE</type>
                    <command-string>interface $../name</command-string>
                    <command-string>
                        no xconnect
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:vlan-xconnect/encapsulation-type</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVlanXconnectEncapsulationType</name>
                    <type>CREATE</type>
                    <command-string>
                        xconnect $../peer-ip $../tunnel-id [encapsulation $encapsulation-type] pw-class $../pw-class-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVlanXconnectEncapsulationType</name>
                    <type>UPDATE</type>
                    <command-string>
                        xconnect $../peer-ip $../tunnel-id [encapsulation $encapsulation-type] pw-class $../pw-class-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVlanXconnectEncapsulationType</name>
                    <type>DELETE</type>
                    <command-string>
                        xconnect $../peer-ip $../tunnel-id [encapsulation $encapsulation-type] pw-class $../pw-class-name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:vlan-xconnect/tunnel-id</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVlanXconnectTunnelId</name>
                    <type>CREATE</type>
                    <command-string>
                        xconnect $../peer-ip $tunnel-id [encapsulation $../encapsulation-type] pw-class $../pw-class-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVlanXconnectTunnelId</name>
                    <type>UPDATE</type>
                    <command-string>
                        xconnect $../peer-ip $tunnel-id [encapsulation $../encapsulation-type] pw-class $../pw-class-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVlanXconnectTunnelId</name>
                    <type>DELETE</type>
                    <command-string>
                        xconnect $../peer-ip $tunnel-id [encapsulation $../encapsulation-type] pw-class $../pw-class-name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:vlan-xconnect/peer-ip</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVlanXconnectPeerIp</name>
                    <type>CREATE</type>
                    <command-string>
                        xconnect $peer-ip $../tunnel-id [encapsulation $../encapsulation-type] pw-class $../pw-class-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVlanXconnectPeerIp</name>
                    <type>UPDATE</type>
                    <command-string>
                        xconnect $peer-ip $../tunnel-id [encapsulation $../encapsulation-type] pw-class $../pw-class-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVlanXconnectPeerIp</name>
                    <type>DELETE</type>
                    <command-string>
                        xconnect $peer-ip $../tunnel-id [encapsulation $../encapsulation-type] pw-class $../pw-class-name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:route-cache</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceRouteCache</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($interface-ext:route-cache == "false")
                        no ip route-cache
                        #if($interface-ext:route-cache == "true")
                        ip route-cache
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceRouteCache</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($interface-ext:route-cache == "false")
                        no ip route-cache
                        #if($interface-ext:route-cache == "true")
                        ip route-cache
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceRouteCache</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($interface-ext:route-cache == "false")
                        ip route-cache
                        #if($interface-ext:route-cache == "true")
                        no ip route-cache
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
            <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:no-ip-directed</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceIpDirected</name>
                    <type>CREATE</type>                    
                    <command-string>
                        #if($interface-ext:no-ip-directed == "false")
                        no ip directed-broadcast
                        #if($interface-ext:no-ip-directed == "true")
                        ip directed-broadcast
                    </command-string>                    
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceIpDirected</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($interface-ext:no-ip-directed == "false")
                        no ip directed-broadcast
                        #if($interface-ext:no-ip-directed == "true")
                        ip directed-broadcast
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceIpDirected</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($interface-ext:no-ip-directed == "false")
                        ip directed-broadcast
                        #if($interface-ext:no-ip-directed == "true")
                        no ip directed-broadcast
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
    <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:no-mop-enabled</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceMop</name>
                    <type>CREATE</type>                    
                    <command-string>
                        #if($interface-ext:no-mop-enabled == "false")
                        no mop enabled
                        #if($interface-ext:no-mop-enabled == "true")
                        mop enabled
                    </command-string>                    
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceMop</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($interface-ext:no-mop-enabled == "false")
                        no mop enabled
                        #if($interface-ext:no-mop-enabled == "true")
                        mop enabled
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceMop</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($interface-ext:no-mop-enabled == "false")
                        mop enabled
                        #if($interface-ext:no-mop-enabled == "true")
                        no mop enabled
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

    <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:protocol-discovery</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceNBAR</name>
                    <type>CREATE</type>                    
                    <command-string>
                        #if($../mode == "l3-interface" OR $../mode == "sub-interface" AND $interface-ext:protocol-discovery != $interface-ext:protocol-discovery.%previous)
                        ip nbar $interface-ext:protocol-discovery
                    </command-string>                    
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceNBAR</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../mode == "l3-interface" OR $../mode == "sub-interface" AND $interface-ext:protocol-discovery != $interface-ext:protocol-discovery.%previous)
                        ip nbar $interface-ext:protocol-discovery
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceNBAR</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../mode == "l3-interface" OR $../mode == "sub-interface")
                        no ip nbar $interface-ext:protocol-discovery
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/duplex</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateDuplex</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($duplex != null)
                        duplex $duplex
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateDuplex</name>
                    <type>UPDATE</type>
                    <command-string>
                         #if($../link-negotiation != null  AND $duplex != $duplex.%previous AND ($../mode != "sub-interface" OR $../mode != "vlan"))
                        duplex auto
                        #else if($../link-negotiation == null  AND $duplex != null AND $duplex != $duplex.%previous AND ($../mode != "sub-interface" OR $../mode != "vlan"))
                        duplex $duplex
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteDuplex</name>
                    <type>DELETE</type>
                    <command-string>
                        no duplex $duplex
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
         <operation>
            <target>/controller:devices/device/interface:interfaces/interface/bpduguard</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateBpduGuard</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($bpduguard == "true")
                        spanning-tree bpduguard enable
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateBpduGuard</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($bpduguard == "true")
                        spanning-tree bpduguard enable
                        #else
                        no spanning-tree bpduguard enable
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteBpduGuard</name>
                    <type>DELETE</type>
                    <command-string>
                        no spanning-tree bpduguard enable
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/portfast</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePortfast</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($portfast == "true")
                        spanning-tree portfast
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatePortfast</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($portfast == "true")
                        spanning-tree portfast
                        #else
                        no spanning-tree portfast
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeletePortfast</name>
                    <type>DELETE</type>
                    <command-string>
                        no spanning-tree portfast
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/maximum-segment-size</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceTcpMss</name>
                    <type>CREATE</type>
                 <command-string>
                        #if($maximum-segment-size != null)
                        ip tcp adjust-mss $maximum-segment-size
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceTcpMss</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($maximum-segment-size != null)
                        ip tcp adjust-mss $maximum-segment-size
                        #else if($maximum-segment-size == null AND $maximum-segment-size.%previous != null)
                        no ip tcp adjust-mss
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceTcpMss</name>
                    <type>DELETE</type>
                    <command-string>                        
                        no ip tcp adjust-mss
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/interface:interfaces/interface/nat-name</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceNat</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($nat-name != null AND $nat-name != $nat-name.%previous)
                        ip nat $nat-name
                        #else if ($nat-name == null AND $nat-name.%previous !=null )
                        no ip nat $nat-name                        
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceNat</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($nat-name != null AND $nat-name != $nat-name.%previous)
                        ip nat $nat-name
                        #else if ($nat-name == null AND $nat-name.%previous !=null )
                        no ip nat $nat-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceNat</name>
                    <type>DELETE</type>
                    <command-string>                        
                        no ip nat $nat-name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface</target>
            <platform>ALL|Cisco3945SPE250|Cisco 3900|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseInterface</name>
                    <type>PARSE</type>
                    <command-string>switchport mode $mode</command-string>
                </device-operation>
                <device-operation>
                    <name>CreateInterface</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($mode == "vlan")
                        interface vlan $l2features:vlan
                        #else
                        interface $name
                    </command-string>
                    <command-string>
                        #if($description != null)
                        description $description
                    </command-string>
                    <command-string>
                        #if($l3features:vrf != null AND $l3features:vrf != "GLOBAL" AND $vrf-definition-mode == "false")
                        ip vrf forwarding $l3features:vrf
			#else if($l3features:vrf != null AND $l3features:vrf != "GLOBAL" AND $vrf-definition-mode == "true")
			vrf forwarding $l3features:vrf
                    </command-string>
                    <command-string>
                        #if($mode == "sub-interface" AND $inner-vlan != null)
                        encapsulation dot1q $l2features:vlan second-dot1q $inner-vlan [$encap-mode]
                        #else if($mode == "sub-interface" AND $inner-vlan == null)
                        encapsulation dot1q $l2features:vlan
                    </command-string>
                    <command-string>
                        #if($ip-address != null AND $netmask != null)
                        ip address $ip-address $netmask
                        #else if($interface-ext:no-ip-address == "false")
                        no ip address
                    </command-string>
                    <command-string>
                        #if($ipv6-address != null)
                        ipv6 address $ipv6-address/$ipv6-prefix-length
                    </command-string>
                    <command-string>
                        #if($ipv6-address != null)
                        ipv6 enable
                    </command-string>
                    <command-string>
                        #if(($mpls-device-role == "PE" OR $mpls-device-role == "P" OR $mpls-device-role == "PE-RR") AND $mode != "loopback-interface")
                        mpls ip
                    </command-string>
                    <command-string>
                        #if($mtu != null)
                        mtu $mtu
                    </command-string>
                    <command-string>
                        #if($portfast == "true")
                        spanning-tree portfast
                    </command-string>
                    <command-string>
                        #if($bpduguard == "true")
                        spanning-tree bpduguard enable
                    </command-string>
                    <command-string>
                        #if($bgp-policy == "true")
                        bgp-policy destination ip-prec-map
                    </command-string>
		    <command-string>
                        #if($bgp-policy-qos == "true")
                        bgp-policy destination ip-qos-map
                    </command-string>
                    <command-string>
                        #if($pbr-policy != null)
                        ip policy route-map $pbr-policy
                    </command-string>
                    <command-string>
                        #if($vrf-receive != null)
                        ip vrf receive $vrf-receive
                    </command-string>
                    <command-string>
                        #if($broadcast == "true")
                        storm-control broadcast level $level
                    </command-string>
                    <command-string>
                        #if($acl:acl-inbound-name != null)
                        ip access-group $acl:acl-inbound-name in
                    </command-string>
                    <command-string>
                        #if($acl:acl-outbound-name != null)
                        ip access-group $acl:acl-outbound-name out
                    </command-string>
                    <command-string>
                        #if(($mode == "sub-interface" OR $mode == "l3-interface" OR $mode == "vlan") AND $outbound-qos != null)
                        service-policy output $outbound-qos
                    </command-string>
                    <command-string>
                        #if(($mode == "sub-interface" OR $mode == "l3-interface" OR $mode == "vlan") AND $inbound-qos != null)
                        service-policy input $inbound-qos
                    </command-string>
                    <command-string>
                        #if($bandwidth != null)
                        bandwidth $bandwidth
                    </command-string>
	        <command-string>
                        #if($delay != null)
                        delay $delay
                    </command-string>
                    <command-string>
                        #if($duplex != null)
                        duplex $duplex
                    </command-string>
                    <command-string>
                        #if($link-negotiation != null AND $mode == "l3-interface")
                        speed auto
                    </command-string>
                    <command-string>
                        #if($nat-name != null)
                        ip nat $nat-name
                    </command-string>
	        <command-string>
                        #if($mode == "l3-interface" OR $mode == "loopback-interface")
                        hold-queue $in-queue-length in
                    </command-string>
	        <command-string>
                        #if($mode == "l3-interface" OR $mode == "loopback-interface")
                        hold-queue $out-queue-length out
                    </command-string>
                    <command-string>
                        #if($l2features:port-channel-name != null and $l2features:channel-group-mode != null)
                        channel-group $l2features:port-channel-name [mode $l2features:channel-group-mode]
                    </command-string>
                    <command-string>
                        #if($interface-ext:ip-unreachables == "false")
                        no ip unreachables
                        #if($interface-ext:ip-unreachables == "true")
                        ip unreachables
                    </command-string>
                    <command-string>
                        #if($interface-ext:ip-redirects == "false")
                        no ip redirects
                        #if($interface-ext:ip-redirects == "true")
                        ip redirects
                    </command-string>
                    <command-string>no shutdown</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterface</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($mode == "vlan")
                        interface vlan $l2features:vlan
                        #else
                        interface $name
                    </command-string>
                    <command-string>
                        #if($mode == "sub-interface" AND $inner-vlan != null)
                        encapsulation dot1q $l2features:vlan second-dot1q $inner-vlan [$encap-mode]
                        #else if($mode == "sub-interface" AND $inner-vlan == null)
                        encapsulation dot1q $l2features:vlan
                    </command-string>
                    <command-string>
                        [no ipv6 address $ipv6-address.%previous/$ipv6-prefix-length.%previous]
                    </command-string>
                    <command-string>
                        #if($ipv6-address != null)
                        ipv6 address $ipv6-address/$ipv6-prefix-length
                    </command-string>
                    <command-string>
                        #if($ipv6-address != null)
                        ipv6 enable
                    </command-string>
                    <command-string>
                        #if(($mpls-device-role == "PE" OR $mpls-device-role == "P" OR $mpls-device-role == "PE-RR") AND $mode != "loopback-interface")
                        mpls ip
                    </command-string>
                    <command-string>
                        #if($mtu != null)
                        mtu $mtu
                    </command-string>
                    <command-string>
                        #if($portfast == "true")
                        spanning-tree portfast
                    </command-string>
                    <command-string>
                        #if($bpduguard == "true")
                        spanning-tree bpduguard enable
                    </command-string>
                    <command-string>
                        #if($broadcast == "true")
                        storm-control broadcast level $level
                    </command-string>
                    <command-string>
                        #if($bgp-policy == "true")
                        bgp-policy destination ip-prec-map
                    </command-string>
		    <command-string>
                        #if($bgp-policy-qos == "true")
                        bgp-policy destination ip-qos-map
                    </command-string>
                    <command-string>
                        #if($pbr-policy != null)
                        ip policy route-map $pbr-policy
                    </command-string>
                    <command-string>
                        #if($vrf-receive != null)
                        ip vrf receive $vrf-receive
                    </command-string>                    
                   <!--  <command-string>
                        #if($duplex != null)
                        duplex $duplex
                    </command-string>
                    <command-string>
                        #if($link-negotiation != null AND $mode == "l3-interface")
                        speed auto
                    </command-string> -->
                    <command-string>
                        #if($nat-name != null AND $nat-name != $nat-name.%previous)
                        ip nat $nat-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterface</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($mode == "vlan")
                        no interface vlan $l2features:vlan
                        #else if($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface")
                        interface $name
                        #else if($mode == "reset" OR $mode == "l3-interface")
                        default interface $name
                        #else
                        no interface $name
                    </command-string>
                    <command-string>
                        #if($l2features:port-channel-name != null)
                        no channel-group
                    </command-string>
                    <command-string>
                        #if($l3features:vrf != null AND $l3features:vrf != "GLOBAL" AND ($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface") AND $vrf-definition-mode == "false")
                        no ip vrf forwarding
			#else if($l3features:vrf != null AND $l3features:vrf != "GLOBAL" AND ($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface") AND $vrf-definition-mode == "true")
                        no vrf forwarding
                    </command-string>
                    <command-string>
                        #if($maximum-segment-size != null  AND ($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface"))
                        no ip tcp adjust-mss $maximum-segment-size
                    </command-string>
                    <command-string>
                        #if($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface")
                        no description
                    </command-string>
                    <command-string>
                        #if($duplex != null AND ($mode == "l3-interface"))
                        no duplex
                    </command-string>	        
                    <command-string>
                        #if($vrf-receive != null AND ($mode == "l3-interface"))
                        no ip vrf receive $vrf-receive
                    </command-string>
                    <command-string>
                        #if($pbr-policy != null AND ($mode == "l3-interface"))
                        no ip policy route-map $pbr-policy
                    </command-string>
                    <command-string>
                        #if($bgp-policy == "true" AND ($mode == "l3-interface"))
                        no bgp-policy destination ip-prec-map
                    </command-string>
		    <command-string>
                        #if($bgp-policy-qos == "true" AND ($mode == "l3-interface"))
                        no bgp-policy destination ip-qos-map
                    </command-string>
		    <command-string>
                        #if($nat-name != null AND ($mode == "l3-interface"))
                        no ip nat $nat-name
                    </command-string>
                    <command-string>
                        #if($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface")
                        [no ip address $ip-address $netmask]
                    </command-string>
                    <command-string>
                        #if($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface")
                        [no ipv6 address $ipv6-address/$ipv6-prefix-length]
                    </command-string>
                    <command-string>
                    #if($native-vlan != null AND $mode == "trunk")
                    no switchport trunk native vlan $native-vlan
                </command-string>
                <command-string>
                    #if($portfast == "true" AND ($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface"))
                    no spanning-tree portfast
                </command-string>
                <command-string>
                    #if($interface-ext:bfd-options == "interval")
                    no bfd interval
                </command-string>
                <command-string>
                    #if($bpduguard == "true" AND ($mode == "trunk" OR $mode == "access" OR $mode == "voice" OR $mode == "l3-interface"))
                    no spanning-tree bpduguard enable
                </command-string>
                <command-string>
                    #if($interface-ext:carrier-delay-time != null)
                    no carrier-delay
                </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
         <target>/controller:devices/device/interface:interfaces/interface/native-vlan</target>
         <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <sequence-number>5</sequence-number>
        <device-operations>
            <device-operation>
                <name>CreateNativeVlan</name>
                <type>CREATE</type>
                <command-string>
                    #if($native-vlan != null AND $../mode == "trunk")
                    switchport trunk native vlan $native-vlan
                </command-string>
            </device-operation>
            <device-operation>
            <name>UpdateNativeVlan</name>
            <type>UPDATE</type>
               <command-string>
                   #if($native-vlan != null AND $../mode == "trunk")
                   switchport trunk native vlan $native-vlan
               </command-string>
           </device-operation>
            <device-operation>
                <name>DeleteNativeVlan</name>
                <type>DELETE</type>
                <command-string>
                    #if($native-vlan != null AND $../mode == "trunk")
                    no switchport trunk native vlan $native-vlan
                </command-string>
            </device-operation>
        </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/in-queue-length</target>
            <platform>ALL|Cisco3945SPE250|Cisco 3900|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceInQueueLengthNew</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../mode == "l3-interface" OR $../mode == "loopback-interface")
                        hold-queue $in-queue-length in
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceInQueueLengthNew</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../mode == "l3-interface" OR $../mode == "loopback-interface")
                        hold-queue $in-queue-length in
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceInQueueLengthNew</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../mode == "l3-interface" OR $../mode == "loopback-interface")
                        no hold-queue in
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/l2features:vlan</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	    <sequence-number>2</sequence-number>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceMode</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($mode == "sub-interface" AND $../inner-vlan != null)
                        encapsulation dot1q $../l2features:vlan second-dot1q $../inner-vlan [$../encap-mode]
                        #else if($mode == "sub-interface" AND $../inner-vlan == null)
                        encapsulation dot1q $../l2features:vlan
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceMode</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($mode == "sub-interface" AND $../inner-vlan != null)
                        encapsulation dot1q $../l2features:vlan second-dot1q $../inner-vlan [$../encap-mode]
                        #else if($mode == "sub-interface" AND $../inner-vlan == null)
                        encapsulation dot1q $../l2features:vlan
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/in-queue-length</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceInQueueLength</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../mode == "l3-interface" OR $../mode == "loopback-interface")
                        hold-queue $in-queue-length in
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceInQueueLength</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../mode == "l3-interface" OR $../mode == "loopback-interface")
                        hold-queue $in-queue-length in
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceInQueueLength</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../mode == "l3-interface" OR $../mode == "loopback-interface")
                        [no hold-queue $in-queue-length in]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/l2features:port-channel-name</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <sequence-number>11</sequence-number>
            <device-operations>
                <device-operation>
                    <name>CreateInterfacePortChannelName</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($l2features:port-channel-name != null and $../l2features:channel-group-mode != null)
                        channel-group $../l2features:port-channel-name [mode $../l2features:channel-group-mode]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfacePortChannelName</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($l2features:port-channel-name != null and $../l2features:channel-group-mode != null)
                        channel-group $../l2features:port-channel-name [mode $../l2features:channel-group-mode]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfacePortChannelName</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($l2features:port-channel-name != null)
                        no channel-group
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/out-queue-length</target>
            <platform>ALL|Cisco3945SPE250|Cisco 3900|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceOutQueueLengthNew</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../mode == "l3-interface" OR $../mode == "loopback-interface")
                        hold-queue $out-queue-length out
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceOutQueueLengthNew</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../mode == "l3-interface" OR $../mode == "loopback-interface")
                        hold-queue $out-queue-length out
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceOutQueueLengthNew</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../mode == "l3-interface" OR $../mode == "loopback-interface")
                        no hold-queue out
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/bgp-policy</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>                               
                <device-operation>
                    <name>DeleteInterfaceBgpPolicy</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($bgp-policy == "true")
                        no bgp-policy destination ip-prec-map
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/interface:interfaces/interface/nat-name</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>                               
                <device-operation>
                    <name>DeleteInterfaceNat</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($nat-name != null)
                        no ip nat $nat-name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/interface:interfaces/interface/bgp-policy-qos</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>                               
                <device-operation>
                    <name>DeleteInterfaceBgpPolicyQos</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($bgp-policy-qos == "true")
                        no bgp-policy destination ip-qos-map
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/pbr-policy</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	    <sequence-number>7</sequence-number>
            <device-operations>
		<device-operation>
                    <name>CreateInterfacePbrPolicy</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($pbr-policy != null)
			ip policy route-map $pbr-policy
                    </command-string>
                </device-operation>
		<device-operation>
                    <name>UpdateInterfacePbrPolicy</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($pbr-policy != null)
			ip policy route-map $pbr-policy
                    </command-string>
                </device-operation>                             
                <device-operation>
                    <name>DeleteInterfacePbrPolicy</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($pbr-policy != null)
			no ip policy route-map $pbr-policy
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/vrf-receive</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <sequence-number>8</sequence-number>
            <device-operations>
		<device-operation>
                    <name>CreateInterfaceVrfReceive</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($vrf-receive != null)
                        ip vrf receive $vrf-receive
                    </command-string>
                </device-operation>
		<device-operation>
                    <name>UpdateInterfaceVrfReceive</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($vrf-receive != null)
                        ip vrf receive $vrf-receive
                    </command-string>
                </device-operation>                             
                <device-operation>
                    <name>DeleteInterfaceVrfReceive</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($vrf-receive != null)
                        no ip vrf receive $vrf-receive
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/ospf</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceOspf</name>
                    <type>CREATE</type>
                    <command-string>interface $../name</command-string>
		    <command-string>[ip ospf priority $priority]</command-string>
		    <command-string>[ip ospf cost $cost]</command-string>
		    <command-string>[ip ospf hello-interval $hello-interval]</command-string>
		    <command-string>[ip ospf dead-interval $dead-interval]</command-string>
		    <command-string>[ip ospf dead-interval minimal hello-multiplier $hello-multiplier]</command-string>
		    <command-string>[ip ospf $ospf-id area $area]</command-string>
		    <command-string>[ip ospf network $ospf-network $point-to-multipoint]</command-string>
                </device-operation>
		<device-operation>
                    <name>UpdateInterfaceOspf</name>
                    <type>UPDATE</type>
                    <command-string>interface $../name</command-string>
		    <command-string>[ip ospf priority $priority]</command-string>
		    <command-string>[ip ospf cost $cost]</command-string>
		    <command-string>[ip ospf hello-interval $hello-interval]</command-string>
		    <command-string>[ip ospf dead-interval $dead-interval]</command-string>
		    <command-string>[ip ospf dead-interval minimal hello-multiplier $hello-multiplier]</command-string>
		    <command-string>[ip ospf $ospf-id area $area]</command-string>
		    <command-string>[ip ospf network $ospf-network $point-to-multipoint]</command-string>
                </device-operation>
		<device-operation>
                    <name>DeleteInterfaceOspf</name>
                    <type>DELETE</type>
                    <command-string>interface $../name</command-string>
		    <command-string>[no ip ospf priority $priority]</command-string>
		    <command-string>[no ip ospf cost $cost]</command-string>
		    <command-string>[no ip ospf dead-interval minimal hello-multiplier $hello-multiplier]</command-string>
		    <command-string>[no ip ospf hello-interval $hello-interval]</command-string>
		    <command-string>[no ip ospf dead-interval $dead-interval]</command-string>
		    <command-string>[no ip ospf $ospf-id area $area]</command-string>
		    <command-string>[no ip ospf network]</command-string>	    
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/eigrp/as-number</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceEigrp</name>
                    <type>CREATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>ip authentication mode eigrp $as-number md5</command-string>
                    <command-string>ip authentication key-chain eigrp $as-number $key-chain</command-string>
                    <command-string>ip hello-interval eigrp $as-number $hello-interval</command-string>
                    <command-string>ip hold-time eigrp $as-number $hold-time</command-string>
                    <command-string>
		#if($split-horizon == "true")		
		no ip split-horizon eigrp $as-number
	        </command-string>	        
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceEigrp</name>
                    <type>UPDATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>ip authentication mode eigrp $as-number md5</command-string>
                    <command-string>ip authentication key-chain eigrp $as-number $key-chain</command-string>
                    <command-string>ip hello-interval eigrp $as-number $hello-interval</command-string>
                    <command-string>ip hold-time eigrp $as-number $hold-time</command-string>
                    <command-string>
		#if($split-horizon == "true")		
		no ip split-horizon eigrp $as-number
	        </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceEigrp</name>
                    <type>DELETE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>no ip authentication mode eigrp $as-number md5</command-string>
                    <command-string>no ip authentication key-chain eigrp $as-number $key-chain</command-string>
                    <command-string>no ip hello-interval eigrp $as-number $hello-interval</command-string>
                    <command-string>no ip hold-time eigrp $as-number $hold-time</command-string>                    
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/eigrp/as-number/summary-network</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceEigrpSummaryNetwork</name>
                    <type>CREATE</type>
                    <command-string>interface $../../../name</command-string>
                    <command-string>ip summary-address eigrp $../as-number $ip-address $netmask</command-string>                    	        
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceEigrpSummaryNetwork</name>
                    <type>UPDATE</type>
                    <command-string>interface $../../../name</command-string>
                    <command-string>ip summary-address eigrp $../as-number $ip-address $netmask</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceEigrpSummaryNetwork</name>
                    <type>DELETE</type>
                    <command-string>interface $../../../name</command-string>
                    <command-string>no ip summary-address eigrp $../as-number $ip-address $netmask</command-string>                    
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/out-queue-length</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceOutQueueLength</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../mode == "l3-interface" OR $../mode == "loopback-interface")
                        hold-queue $out-queue-length out
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceOutQueueLength</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../mode == "l3-interface" OR $../mode == "loopback-interface")
                        hold-queue $out-queue-length out
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceOutQueueLength</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../mode == "l3-interface" OR $../mode == "loopback-interface")
                        [no hold-queue $out-queue-length out]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/load-interval-delay</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceLoadIntervalDelay</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../mode == "l3-interface" OR $../mode == "dot1q-tunnel" OR $../mode == "trunk")
                        load-interval $load-interval-delay
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceLoadIntervalDelay</name>
                    <type>UPDATE</type>
                    <command-string>
                         #if($../mode == "l3-interface" OR $../mode == "dot1q-tunnel" OR $../mode == "trunk")
                        load-interval $load-interval-delay
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceLoadIntervalDelay</name>
                    <type>DELETE</type>
                    <command-string>
                         #if($../mode == "l3-interface" OR $../mode == "dot1q-tunnel" OR $../mode == "trunk")
                        [no load-interval $load-interval-delay]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/speed</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceSpeed</name>
                    <type>CREATE</type>
                    <command-string>
                         #if($../link-negotiation != null AND ($../mode != "vlan" OR $../mode != "sub-interface"))
                        speed $speed
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceSpeed</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../link-negotiation != null AND $../link-negotiation != $../link-negotiation.%previous AND ($../mode != "sub-interface" OR $../mode != "vlan"))
                        speed auto
                        #else if($../link-negotiation == null AND $speed != $speed.%previous AND ($../mode != "sub-interface" OR $../mode != "vlan"))
                        speed $speed
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<!-- <operation>
            <target>/controller:devices/device/interface:interfaces/interface/link-negotiation</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceLinkNegotiation</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($link-negotiation != null AND $mode == "l3-interface")
                        speed auto
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceLinkNegotiation</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($link-negotiation != null AND $link-negotiation != $link-negotiation.%previous AND ($../mode != "sub-interface" OR $../mode != "vlan"))
                        speed auto
                        duplex auto
                    </command-string>
                </device-operation>		       
            </device-operations>
        </operation> -->
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/bandwidth</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceBandwidth</name>
                    <type>CREATE</type>
                    <command-string>bandwidth $bandwidth</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceBandwidth</name>
                    <type>UPDATE</type>
                    <command-string>bandwidth $bandwidth</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceBandwidth</name>
                    <type>DELETE</type>
                    <command-string>no bandwidth $bandwidth</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/delay</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceDelay</name>
                    <type>CREATE</type>
                    <command-string>delay $delay</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceDelay</name>
                    <type>UPDATE</type>
                    <command-string>delay $delay</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceDelay</name>
                    <type>DELETE</type>
                    <command-string>no delay $delay</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/description</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <sequence-number>4</sequence-number>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceDescription</name>
                    <type>CREATE</type>
                    <command-string>description $description</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceDescription</name>
                    <type>UPDATE</type>
                    <command-string>description $description</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceDescription</name>
                    <type>DELETE</type>
                    <command-string>no description</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/l3features:vrf</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <sequence-number>1</sequence-number>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceVrf</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($l3features:vrf != null AND $l3features:vrf != "GLOBAL" AND $../vrf-definition-mode == "false")
                        ip vrf forwarding $l3features:vrf
			#else if($l3features:vrf != null AND $l3features:vrf != "GLOBAL" AND $../vrf-definition-mode == "true")
			vrf forwarding $l3features:vrf
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceVrf</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($l3features:vrf != null AND $l3features:vrf != "GLOBAL" AND $../vrf-definition-mode == "false")
                        ip vrf forwarding $l3features:vrf
			#else if($l3features:vrf != null AND $l3features:vrf != "GLOBAL" AND $../vrf-definition-mode == "true")
			vrf forwarding $l3features:vrf
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceVrf</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($l3features:vrf != null AND $l3features:vrf != "GLOBAL" AND $../vrf-definition-mode == "false")
                        no ip vrf forwarding $l3features:vrf
			#else if($l3features:vrf != null AND $l3features:vrf != "GLOBAL" AND $../vrf-definition-mode == "true")
			no vrf forwarding $l3features:vrf
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/ip-address</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <sequence-number>3</sequence-number>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceIpAddress</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../netmask != null)
                        ip address $ip-address $../netmask
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceIpAddress</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($ip-address != null AND $ip-address != $ip-address.%previous)
                        ip address $ip-address $../netmask
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceIpAddress</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../netmask != null)
                        no ip address $ip-address $../netmask
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/netmask</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <sequence-number>3</sequence-number>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceNetmask</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($netmask != null)
                        ip address $../ip-address $netmask
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceNetmask</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($netmask != null AND $netmask != $netmask.%previous)
                        ip address $../ip-address $netmask
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceNetmask</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($netmask != null)
                        no ip address $../ip-address $netmask
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/mtu</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceMtu</name>
                    <type>CREATE</type>
                    <command-string>mtu $mtu</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceMtu</name>
                    <type>UPDATE</type>
                    <command-string>mtu $mtu</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceMtu</name>
                    <type>DELETE</type>
                    <command-string>no mtu $mtu</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/inner-vlan</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceInnerVlan</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../mode == "sub-interface" AND $../vlan != null AND $inner-vlan != null)
                        encapsulation dot1q $../vlan second-dot1q $inner-vlan
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceInnerVlan</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../mode == "sub-interface" AND $../vlan != null AND $inner-vlan != null)
                        encapsulation dot1q $../vlan second-dot1q $inner-vlan
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceInnerVlan</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../mode == "sub-interface" AND $../vlan != null)
                        encapsulation dot1q $../vlan
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/inbound-qos</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <sequence-number>9</sequence-number>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceInboundQos</name>
                    <type>CREATE</type>
                    <command-string>
                        #if(($../mode == "sub-interface" OR $../mode == "l3-interface" OR $../mode == "vlan") AND $inbound-qos != null)
                        service-policy input $inbound-qos
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceInBoundQos</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if(($../mode == "sub-interface" OR $../mode == "l3-interface" OR $../mode == "vlan") AND $inbound-qos != null)
                        service-policy input $inbound-qos
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceInboundQos</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../mode == "sub-interface" OR $../mode == "l3-interface" OR $../mode == "vlan")
                        [no service-policy input $inbound-qos]
                    </command-string>                    
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/outbound-qos</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <sequence-number>10</sequence-number>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceOutboundQos</name>
                    <type>CREATE</type>
                    <command-string>
                        #if(($../mode == "sub-interface" OR $../mode == "l3-interface") AND $outbound-qos != null)
                        service-policy output $outbound-qos
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceOutBoundQos</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if(($../mode == "sub-interface" OR $../mode == "l3-interface") AND $outbound-qos != null)
                        service-policy output $outbound-qos
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceOutboundQos</name>
                    <type>DELETE</type>
                    <command-string>
			#if($../mode == "sub-interface" OR $../mode == "l3-interface")
                        [no service-policy output $outbound-qos]
		    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/acl:acl-inbound-name</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceAclInBoundName</name>
                    <type>CREATE</type>
                    <command-string>ip access-group $acl:acl-inbound-name in</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceAclInBoundName</name>
                    <type>UPDATE</type>
                    <command-string>ip access-group $acl:acl-inbound-name in</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceAclInBoundName</name>
                    <type>DELETE</type>
                    <command-string>[no ip access-group $acl:acl-inbound-name in]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/acl:acl-outbound-name</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceAclOutBoundName</name>
                    <type>CREATE</type>
                    <command-string>ip access-group $acl:acl-outbound-name out</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceAclOutBoundName</name>
                    <type>UPDATE</type>
                    <command-string>ip access-group $acl:acl-outbound-name out</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceAclOutBoundName</name>
                    <type>DELETE</type>
                    <command-string>[no ip access-group $acl:acl-outbound-name out]</command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/basicDeviceConfigs:bgp</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseBgpCommunityNew</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($bgp-community-new == 'true')
                        ip bgp-community new-format
                        #else
                        no ip bgp-community new-format
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateBgpCommunityNew</name>
                    <type>CREATE</type>
                    <command-string>
			#if($bgp-community-new == 'true')
			ip bgp-community new-format
		    </command-string>                    
                </device-operation>
		<device-operation>
                    <name>UpdateBgpCommunityNew</name>
                    <type>UPDATE</type>
                    <command-string>
			#if($bgp-community-new == 'true')
			ip bgp-community new-format
		    </command-string>                    
                </device-operation>                
                <device-operation>
                    <name>DeleteBgpCommunityNew</name>
                    <type>DELETE</type>
                    <command-string>no ip bgp-community new-format</command-string>                    
                </device-operation>
            </device-operations>
        </operation>
         <operation>
            <target>/controller:devices/device/basicDeviceConfigs:clock</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseClock</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($timezone != null AND $hours !=null AND $minutes == null)
                        clock timezone $timezone $hours
                        #else if($timezone != null AND $hours !=null AND $minutes != null)
                        clock timezone $timezone $hours $minutes
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateClock</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($timezone != "UTC" AND $hours != "0" AND $minutes != "0")
                        clock timezone $timezone [$hours] [$minutes]
                    </command-string>
                    <command-string>clock summer-time $summer-time</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateClock</name>
                    <type>UPDATE</type>
                    <command-string>clock timezone $timezone [$hours] [$minutes]</command-string>
                    <command-string>clock summer-time $summer-time</command-string>
                </device-operation>
                <device-operation>
                    <name>Deleteclock</name>
                    <type>DELETE</type>
                    <command-string>no clock timezone $timezone [$hours] [$minutes]</command-string>
                    <command-string>no clock summer-time $summer-time</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:clock/timezone</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseClockTimezone</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($timezone != null AND $../hours !=null AND $../minutes == null)
                        clock timezone $timezone $../hours
                        #else if($timezone != null AND $../hours !=null AND $../minutes != null)
                        clock timezone $timezone $../hours $../minutes
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:clock/hours</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseClockHours</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($../timezone != null AND $hours !=null AND $../minutes == null)
                        clock timezone $../timezone $hours
                        #else if($../timezone != null AND $hours !=null AND $../minutes != null)
                        clock timezone $../timezone $hours $../minutes
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
         <operation>
            <target>/controller:devices/device/basicDeviceConfigs:clock/minutes</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseClockMinutes</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($../timezone != null AND $../hours !=null AND $minutes == null)
                        clock timezone $../timezone $../hours
                        #else if($../timezone != null AND $../hours !=null AND $minutes != null)
                        clock timezone $../timezone $../hours $minutes
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:banner</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateBanner</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($login-message != null)
                        banner login $login-delimiter 
                        $login-message 
                        $login-delimiter
                    </command-string>
                    <command-string>
                        #if($motd-message != null)
                        banner motd $motd-delimiter 
                        $motd-message 
                        $motd-delimiter
                    </command-string>
                    <command-string>
                        #if($exec-message != null)
                        banner exec $exec-delimiter 
                        $exec-message 
                        $exec-delimiter
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateBanner</name>
                    <type>UPDATE</type>
                    <command-string> </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteBanner</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($login-message != null)
                        no banner login
                    </command-string>
                    <command-string>
                        #if($motd-message != null)
                        no banner motd
                    </command-string>
                    <command-string>
                        #if($exec-message != null)
                        no banner exec
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:banner/login-message</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateLoginMessage</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($login-message != null)
                        banner login $../login-delimiter $login-message $../login-delimiter
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateLoginMessage</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($login-message != null)
                        banner login $../login-delimiter $login-message $../login-delimiter
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLoginMessage</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($login-message != null)
                        no banner login
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:banner/motd-message</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateMotdMessage</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($motd-message != null)
                        banner motd $../motd-delimiter $motd-message $../motd-delimiter
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateMotdMessage</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($motd-message != null)
                        banner motd $../motd-delimiter $motd-message $../motd-delimiter
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteMotdMessage</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($motd-message != null)
                        no banner motd
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:banner/exec-message</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateExecMessage</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($exec-message != null)
                        banner exec $../exec-delimiter $exec-message $../exec-delimiter
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateExecMessage</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($exec-message != null)
                        banner exec $../exec-delimiter $exec-message $../exec-delimiter
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteExecMessage</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($exec-message != null)
                        no banner exec
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:event-manager</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateEventManager</name>
                    <type>CREATE</type>
                    <command-string>event manager applet $applet trap authorization bypass</command-string>
                    <command-string>event cli pattern $pattern enter</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteEventManager</name>
                    <type>DELETE</type>
                    <command-string>no event manager applet $applet trap authorization bypass</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:event-manager/action-list</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateActionList</name>
                    <type>CREATE</type>
                    <command-string>event manager applet $../applet trap authorization bypass</command-string>
                    <command-string>event cli pattern $../pattern enter</command-string>
                    <command-string>action $name puts $puts</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteActionList</name>
                    <type>DELETE</type>
                    <command-string>event manager applet $../applet trap authorization bypass</command-string>
                    <command-string>no action $name puts $puts</command-string>
                </device-operation>
            </device-operations>
        </operation>


        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:shell-options</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseShelloptions</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($shell-option == 'enable')
                        shell processing
                        #else
                        no shell processing
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateShellOptions</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($shell-option == 'enable')
                        shell processing
                        #else
                        no shell processing
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateShellOptions</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($shell-option == 'enable')
                        shell processing
                        #else
                        no shell processing
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteShellOptions</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($shell-option == 'disable')
                        shell processing
                        #else
                        no shell processing
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/bridge-group</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceBridge</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($bridge-group != null)
                        bridge-group $bridge-group
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceBridge</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($bridge-group != null)
                        bridge-group $bridge-group
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceBridge</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($bridge-group != null)
                        no bridge-group $bridge-group
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/bridge-acl-inbound</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceBridgeInboundACL</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($bridge-acl-inbound != null)
                        bridge-group $bridge-group input-address-list $bridge-acl-inbound
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceBridgeInboundACL</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($bridge-acl-inbound != null)
                        bridge-group $bridge-group input-address-list $bridge-acl-inbound
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceBridgeInboundACL</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($bridge-acl-inbound != null)
                        no bridge-group $bridge-group input-address-list $bridge-acl-inbound
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/admin-state</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <sequence-number>6</sequence-number>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceAdminState</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($admin-state == "UP")
                        no shutdown
                        #else if($admin-state == "DOWN")
                        shutdown
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceAdminState</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($admin-state == "UP")
                        no shutdown
                        #else if($admin-state == "DOWN")
                        shutdown
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceAdminState</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($admin-state == "UP")
                        shutdown
                        #else if($admin-state == "DOWN")
                        no shutdown
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/mpls-device-role</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceMplsDeviceRole</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../mode != "loopback-interface" AND ($mpls-device-role == "PE" OR $mpls-device-role == "P" OR $mpls-device-role == "PE-RR"))
                        mpls ip
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceMplsDeviceRole</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../mode != "loopback-interface" AND ($mpls-device-role.%previous == "PE" OR $mpls-device-role.%previous == "P" OR $mpls-device-role.%previous == "PE-RR") AND ($mpls-device-role != "PE" AND $mpls-device-role != "P" AND $mpls-device-role != "PE-RR"))
                        no mpls ip
                    </command-string>
                    <command-string>
                        #if($../mode != "loopback-interface" AND ($mpls-device-role == "PE" OR $mpls-device-role == "P" OR $mpls-device-role == "PE-RR"))
                        mpls ip
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceMplsDeviceRole</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../mode != "loopback-interface" AND ($mpls-device-role == "PE" OR $mpls-device-role == "P" OR $mpls-device-role == "PE-RR"))
                        no mpls ip
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/hsrp:hsrp</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                
                <device-operation>
                    <name>CreateInterfaceHSRP</name>
                    <type>CREATE</type>
                    <command-string>                        
                        interface $../name
                    </command-string>
                    <command-string>standby version $version</command-string>
                    <command-string>standby $group ip $ip-address</command-string>
		    <command-string>
                        #if(($../mode == "sub-interface" OR $../mode == "l3-interface") AND $timer1-msec == "true" AND $timer2-msec != "true")
                        standby $group timers msec $timer1 $timer2
			#else if(($../mode == "sub-interface" OR $../mode == "l3-interface") AND $timer1-msec == "true" AND $timer2-msec == "true")
                        standby $group timers msec $timer1 msec $timer2
			#else if(($../mode == "sub-interface" OR $../mode == "l3-interface") AND $timer1-msec != "true" AND $timer2-msec == "true")
                        standby $group timers $timer1 msec $timer2
			#else if(($../mode == "sub-interface" OR $../mode == "l3-interface") AND $timer1-msec != "true" AND $timer2-msec != "true")
                        standby $group timers $timer1 $timer2
                    </command-string>
		    <command-string>
                        #if($hsrp-preempt == "true")
                        standby $group preempt
                    </command-string>
		    <command-string>
                        #if($auth-type == "md5-key-string" AND $auth-key != null)
                        standby $group authentication md5 key-string $auth-key
                        #if($auth-type == "md5-key-chain" AND $auth-key != null)
                        standby $group authentication md5 key-chain $auth-key
                        #if($auth-type == "text" AND $auth-key != null)
                        standby $group authentication text $auth-key
                        #if($auth-type == "key-string" AND $auth-key != null)
                        standby $group authentication $auth-key
                    </command-string>                    
                    <command-string>
                        #if($preempt-minimum-delay != null)
                        standby $group preempt delay minimum $preempt-minimum-delay reload $preempt-reload
                        #else
                        standby $group preempt delay reload $preempt-reload
                    </command-string>                    
                    <command-string>standby $group priority $priority</command-string>
		    <command-string>
                        #if($track != null)
                        standby $group track $track [decrement $decrement]
                    </command-string>                    
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceHSRP</name>
                    <type>UPDATE</type>
                    <command-string>interface $../name</command-string>
                    <command-string>
                        #if($version == "2")
                        standby version 2
                    </command-string>
                    <command-string>standby $group priority $priority</command-string>
                     <command-string>standby $group ip $ip-address</command-string>
                    <command-string>
                        #if(($../mode == "sub-interface" OR $../mode == "l3-interface") AND $timer1-msec == "true" AND $timer2-msec != "true")
                        standby $group timers msec $timer1 $timer2
                        #else if(($../mode == "sub-interface" OR $../mode == "l3-interface") AND $timer1-msec == "true" AND $timer2-msec == "true")
                        standby $group timers msec $timer1 msec $timer2
                        #else if(($../mode == "sub-interface" OR $../mode == "l3-interface") AND $timer1-msec != "true" AND $timer2-msec == "true")
                        standby $group timers $timer1 msec $timer2
                        #else if(($../mode == "sub-interface" OR $../mode == "l3-interface") AND $timer1-msec != "true" AND $timer2-msec != "true")
                        standby $group timers $timer1 $timer2
                    </command-string>
                    <command-string>
                        #if($hsrp-preempt == "true")
                        standby $group preempt
                    </command-string>
                    
                     <command-string>
                        #if($auth-type == "md5-key-string" AND $auth-key != null)
                        standby $group authentication md5 key-string $auth-key
                        #if($auth-type == "md5-key-chain" AND $auth-key != null)
                        standby $group authentication md5 key-chain $auth-key
                        #if($auth-type == "text" AND $auth-key != null)
                        standby $group authentication text $auth-key
                        #if($auth-type == "key-string" AND $auth-key != null)
                        standby $group authentication $auth-key
                    </command-string>
		            <command-string>
                        #if($track != null)
                        standby $group track $track [decrement $decrement]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceHSRP</name>
                    <type>DELETE</type>
                    <command-string>interface $../name</command-string>
                    <command-string>no standby $group</command-string>
                    <command-string>no standby version $version</command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/interface:interfaces/interface/hsrp:hsrp/ip-address</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceHSRPIp</name>
                    <type>CREATE</type>
                    <command-string>standby $../group ip $ip-address</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/allowed-vlans</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>                
                <device-operation>
                    <name>CreateSwitchPort</name>
                    <type>CREATE</type>
                    <command-string>interface $../name</command-string>
                    <command-string>
                        #if($../mode == "trunk" AND $interface-ext:is-encap == "true")
                        switchport trunk encapsulation dot1q
                    </command-string>                    
                    <command-string>
                        #if($../mode == "access" AND $interface-ext:is-mode == "true")
                        switchport mode access
                        #else if($../mode == "voice" AND $interface-ext:is-mode == "true")
                        switchport mode access
                        #else if($../mode == "trunk" AND $interface-ext:is-mode == "true")
                        switchport mode trunk
                    </command-string>
                </device-operation>
		<device-operation>
                    <name>UpdateSwitchPort</name>
                    <type>UPDATE</type>
                    <command-string>interface $../name</command-string>
                    <command-string>
                        #if($../mode == "trunk" AND $interface-ext:is-encap == "true")
                        switchport trunk encapsulation dot1q
                    </command-string>                    
                    <command-string>
                        #if($../mode == "access" AND $interface-ext:is-mode == "true")
                        switchport mode access
                        #else if($../mode == "voice" AND $interface-ext:is-mode == "true")
                        switchport mode access
                        #else if($../mode == "trunk" AND $interface-ext:is-mode == "true")
                        switchport mode trunk
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSwitchPort</name>
                    <type>DELETE</type>
                    <command-string>interface $../name</command-string>
                    <command-string>
                        #if($../mode == "access" AND $interface-ext:is-mode == "true")
                        no switchport mode access
                        #else if($../mode == "voice" AND $interface-ext:is-mode == "true")
                        no switchport mode access
                        #else if($../mode == "trunk" AND $interface-ext:is-mode == "true")
                        no switchport mode trunk
                    </command-string>                    
                    <command-string>
                        #if($../mode == "trunk" AND $interface-ext:is-encap == "true")
                        no switchport trunk encapsulation dot1q
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/allowed-vlans/vlan</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseInterfaceAllowedVlan</name>
                    <type>PARSE</type>
                    <command-string>switchport trunk allowed vlan $id</command-string>
                </device-operation>
                <device-operation>
                    <name>CreateAllowVlan</name>
                    <type>CREATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($../../mode == "trunk")
                            switchport trunk allowed vlan add $id
                        #else if($../../mode == "access" OR $../../mode == "voice" OR $../../mode == "dot1q-tunnel")
                            switchport access vlan $id

                    </command-string>
                    <command-string>
                        #if($../../mode == "access" OR $../../mode == "voice" )
                        switchport voice vlan $../../voice-vlan
                    </command-string>
                </device-operation>
        <device-operation>
                    <name>UpdateAllowVlan</name>
                    <type>UPDATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($../../mode == "trunk")
                        switchport trunk allowed vlan add $id
                        #else if($../../mode == "access" OR $../../mode == "voice" OR $../../mode == "dot1q-tunnel")
            switchport access vlan $id
                    </command-string>
                    <command-string>
                        #if($../../mode == "access" OR $../../mode == "voice")
                        switchport voice vlan $../../voice-vlan
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAllowVlan</name>
                    <type>DELETE</type>
                    <command-string>interface $../../name</command-string>                    
                    <command-string>
                        #if($../../mode == "trunk")
                        switchport trunk allowed vlan remove $id
                        #else if($../../mode == "access" OR $../../mode == "voice" OR $../../mode == "dot1q-tunnel")
            no switchport access vlan $id
                    </command-string>                    
                    <command-string>
                        #if($../../mode == "access" OR $../../mode == "voice")
                        no switchport voice vlan $../../voice-vlan
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l2features:vlans/vlan</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVlan</name>
                    <type>CREATE</type>
                    <command-string>vlan $id</command-string>
                    <command-string>name $name</command-string>
                    <command-string>
                        #if($mode == "fabricpath")
                        mode fabricpath
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVlan</name>
                    <type>UPDATE</type>
                    <command-string>vlan $id</command-string>
                    <command-string>name $name</command-string>
                    <command-string>
                        #if($mode == "fabricpath")
                        mode fabricpath
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVlan</name>
                    <type>DELETE</type>
                    <command-string>no vlan $id</command-string>
                </device-operation>
            </device-operations>
        </operation>
        
	<operation>
            <target>/controller:devices/device/l3features:routes/route</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseRoute</name>
                    <type>PARSE</type>
					<command-string>ip route $dest-ip-address $dest-mask $next-hop-ip $metric tag $tag permanent name $name</command-string>
                    <command-string>ip route $dest-ip-address $dest-mask [$interface-name] $next-hop-ip [name $name] [tag $tag]</command-string>
                    <command-string>ip route $dest-ip-address $dest-mask $next-hop-ip [tag $tag] [$metric]</command-string>
                    <command-string>ip route $dest-ip-address $dest-mask $next-hop-ip [tag $tag] [name $name] [$metric]</command-string>
                    <command-string>ip route $dest-ip-address $dest-mask $interface-name $next-hop-ip [tag $tag] [$metric]</command-string>
                    <command-string>ip route $dest-ip-address $dest-mask $interface-name $next-hop-ip [name $name] [$metric]</command-string>
                    <command-string>ip route $dest-ip-address $dest-mask $interface-name $next-hop-ip name $name tag $tag $metric</command-string>
                    <command-string>ip route $dest-ip-address $dest-mask $interface-name $next-hop-ip tag $tag name $name $metric</command-string>
                    <command-string>ip route $dest-ip-address $dest-mask [$interface-name] [$next-hop-ip] [$metric] [tag $tag] permanent [name $name]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/routes/route</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseVrfStaticRouteEntry</name>
                    <type>PARSE</type>
                    <command-string>ip route vrf $../name $dest-ip-address $dest-mask $interface-name $next-hop-ip $metric tag $tag permanent name $name</command-string>
                    <command-string>
                        ip route vrf $../name $dest-ip-address $dest-mask $interface-name $next-hop-ip name $name $metric [tag $tag] [track $track]                        
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:routes/route/options</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
				<device-operation>
                    <name>ParseRouteOptions</name>
                    <type>PARSE_TEMPLATE</type>
					<command-string>
                        #if ($metric == null AND $next-hop-ip == null AND $permanent == "false")
                        ip route $../dest-ip-address $../dest-mask $interface-name [tag $tag] [name $name] [track $track]
                        #else if ($metric == null AND $track == null AND $permanent == "false")
                        ip route $../dest-ip-address $../dest-mask [$interface-name] $next-hop-ip [name $name] [tag $tag]
                        #else if ($metric == null AND $track == null AND $permanent == "false")
                        ip route $../dest-ip-address $../dest-mask [$interface-name] $next-hop-ip [tag $tag] [name $name]
                        #else if ($interface-name == null AND $permanent == "false")
                        ip route $../dest-ip-address $../dest-mask [$next-hop-ip] [$metric] [tag $tag] [name $name] [track $track]
						#else if ($next-hop-ip == null AND $permanent == "false")
                        ip route $../dest-ip-address $../dest-mask [$interface-name] [$metric] [tag $tag] [name $name] [track $track]
                        #else if ($interface-name == null AND $permanent == "true")
                        ip route $../dest-ip-address $../dest-mask [$next-hop-ip] [$metric] [tag $tag] permanent [name $name]
						#else if ($next-hop-ip == null AND $permanent == "true")
                        ip route $../dest-ip-address $../dest-mask [$interface-name] [$metric] [tag $tag] permanent [name $name]
                        #else
                        ip route $../dest-ip-address $../dest-mask [$interface-name] [$next-hop-ip] [$metric] [tag $tag] [name $name] [track $track]
					</command-string>
				</device-operation>	
                <device-operation>
                    <name>CreateRoute</name>
                    <type>CREATE</type>
                   <command-string>
                        #if ($metric == null AND $next-hop-ip == null AND $permanent == "false")
                        ip route $../dest-ip-address $../dest-mask $interface-name [tag $tag] [name $name] [track $track]
                        #else if ($metric == null AND $track == null AND $permanent == "false")
                        ip route $../dest-ip-address $../dest-mask [$interface-name] $next-hop-ip [name $name] [tag $tag]
                        #else if ($metric == null AND $track == null AND $permanent == "false")
                        ip route $../dest-ip-address $../dest-mask [$interface-name] $next-hop-ip [tag $tag] [name $name]
                        #else if ($interface-name == null AND $permanent == "false")
                        ip route $../dest-ip-address $../dest-mask [$next-hop-ip] [$metric] [tag $tag] [name $name] [track $track]
                        #else if ($permanent == "true")
                        ip route $../dest-ip-address $../dest-mask [$interface-name] [$next-hop-ip] [$metric] [tag $tag] permanent [name $name]
                        #else
                        ip route $../dest-ip-address $../dest-mask [$interface-name] [$next-hop-ip] [$metric] [tag $tag] [name $name] [track $track]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateRoute</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if ($metric == null AND $next-hop-ip == null AND $permanent == "false")
                        ip route $../dest-ip-address $../dest-mask $interface-name [tag $tag] [name $name] [track $track]
                        #else if ($metric == null AND $track == null AND $permanent == "false")
                        ip route $../dest-ip-address $../dest-mask [$interface-name] $next-hop-ip [name $name] [tag $tag]
                        #else if ($metric == null AND $track == null AND $permanent == "false")
                        ip route $../dest-ip-address $../dest-mask [$interface-name] $next-hop-ip [tag $tag] [name $name]
                        #else if ($interface-name == null AND $permanent == "false")
                        ip route $../dest-ip-address $../dest-mask [$next-hop-ip] [$metric] [tag $tag] [name $name] [track $track]
                        #else if ($permanent == "true")
                        ip route $../dest-ip-address $../dest-mask [$interface-name] [$next-hop-ip] [$metric] [tag $tag] permanent [name $name]
                        #else
                        ip route $../dest-ip-address $../dest-mask [$interface-name] [$next-hop-ip] [$metric] [tag $tag] [name $name] [track $track]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRoute</name>
                    <type>DELETE</type>
                   <command-string>
                        #if ($metric == null AND $next-hop-ip == null AND $permanent == "false")
                        no ip route $../dest-ip-address $../dest-mask $interface-name [tag $tag] [name $name] [track $track]
                        #else if ($metric == null AND $track == null AND $permanent == "false")
                        no ip route $../dest-ip-address $../dest-mask [$interface-name] $next-hop-ip [name $name] [tag $tag]
                        #else if ($metric == null AND $track == null AND $permanent == "false")
                        no ip route $../dest-ip-address $../dest-mask [$interface-name] $next-hop-ip [tag $tag] [name $name]
                        #else if ($interface-name == null AND $permanent == "false")
                        no ip route $../dest-ip-address $../dest-mask [$next-hop-ip] [$metric] [tag $tag] [name $name] [track $track]
                        #else if ($permanent == "true")
                        no ip route $../dest-ip-address $../dest-mask [$interface-name] [$next-hop-ip] [$metric] [tag $tag] permanent [name $name]
                        #else
                        no ip route $../dest-ip-address $../dest-mask [$interface-name] [$next-hop-ip] [$metric] [tag $tag] [name $name] [track $track]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:static-routes/static-route</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>                
                <device-operation>
                    <name>DeleteStaticRoute</name>
                    <type>DELETE</type>
                    <command-string>no ip route $dest-ip-address $dest-mask [$interface-name] $next-hop-ip [name $name] [tag $tag] [$metric]</command-string>
                </device-operation>                
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/routes/route/options</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
				<device-operation>
                    <name>ParseVrfRouteEntry</name>
                    <type>PARSE</type>
                    <command-string>ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip global $metric tag $tag permanent name $name</command-string>
                    <command-string>ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip global $metric tag $tag name $name track $track</command-string>
                    <command-string>ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip global $metric permanent name $name</command-string>
                    <command-string>ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip $metric tag $tag permanent name $name</command-string>
                    <command-string>ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $metric tag $tag permanent name $name</command-string>
                    <command-string>ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $metric tag $tag name $name</command-string>
                    <command-string>ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip $metric tag $tag name $name</command-string>
                    <command-string>ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip global name $name</command-string>
                    <command-string>ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip global $metric name $name</command-string>
                    <command-string>ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $next-hop-ip global $metric tag $tag name $name track $track</command-string>
                    <command-string>ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $next-hop-ip global permanent $track</command-string>
                    <command-string>ip route vrf $../../../name $../dest-ip-address $../dest-mask [$interface-name] [$next-hop-ip] [global] [$metric] [tag $tag] [permanent] [name $name] [track $track]</command-string>
                </device-operation>
                <device-operation>
                    <name>CreateVrfRouteEntry</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($interface-name != null AND $next-hop-ip != null AND $name != null AND $metric != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $next-hop-ip $metric [tag $tag] name $name [track $track]
                        #else if($interface-name != null AND $next-hop-ip != null AND $metric != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $next-hop-ip $metric [tag $tag] [track $track]
                        #else if($next-hop-ip != null AND $name != null AND $metric != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip $metric [tag $tag] name $name [track $track]
                        #else if($interface-name != null AND $name != null AND $metric != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $metric [tag $tag] name $name [track $track]
                        #else if($interface-name != null AND $metric != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $metric [tag $tag] [track $track]
                        #else if($next-hop-ip != null AND $metric != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip $metric [tag $tag] [track $track]
                        #else if($interface-name != null AND $next-hop-ip != null AND $name != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $next-hop-ip [tag $tag] name $name [track $track]
                        #else if($interface-name != null AND $next-hop-ip != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $next-hop-ip [tag $tag] [track $track]
                        #else if($next-hop-ip != null AND $name != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip [tag $tag] name $name [track $track]
                        #else if($interface-name != null AND $name != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name [tag $tag] name $name [track $track]
                        #else if($interface-name != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name [tag $tag] [track $track]
                        #else if($next-hop-ip != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip [tag $tag] [track $track]
                        #else if($next-hop-ip != null AND $global-address == "true" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask [$interface-name] $next-hop-ip global [$metric] [tag $tag] [name $name] [track $track]
                        #else if($global-address == "true" AND $permanent == "true")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask [$interface-name] [$next-hop-ip] global [$metric] [tag $tag] permanent [name $name]
                        #else if($global-address == "false" AND $permanent == "true")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask [$interface-name] [$next-hop-ip] [$metric] [tag $tag] permanent [name $name]
                        #else
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask [tag $tag] [track $track]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVrfRouteEntry</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($interface-name != null AND $next-hop-ip != null AND $name != null AND $metric != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $next-hop-ip $metric [tag $tag] name $name [track $track]
                        #else if($interface-name != null AND $next-hop-ip != null AND $metric != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $next-hop-ip $metric [tag $tag] [track $track]
                        #else if($next-hop-ip != null AND $name != null AND $metric != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip $metric [tag $tag] name $name [track $track]
                        #else if($interface-name != null AND $name != null AND $metric != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $metric [tag $tag] name $name [track $track]
                        #else if($interface-name != null AND $metric != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $metric [tag $tag] [track $track]
                        #else if($next-hop-ip != null AND $metric != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip $metric [tag $tag] [track $track]
                        #else if($interface-name != null AND $next-hop-ip != null AND $name != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $next-hop-ip [tag $tag] name $name [track $track]
                        #else if($interface-name != null AND $next-hop-ip != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $next-hop-ip [tag $tag] [track $track]
                        #else if($next-hop-ip != null AND $name != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip [tag $tag] name $name [track $track]
                        #else if($interface-name != null AND $name != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name [tag $tag] name $name [track $track]
                        #else if($interface-name != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name [tag $tag] [track $track]
                        #else if($next-hop-ip != null AND $global-address == "false" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip [tag $tag] [track $track]
                        #else if($next-hop-ip != null AND $global-address == "true" AND $permanent == "false")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask [$interface-name] $next-hop-ip global [$metric] [tag $tag] [name $name] [track $track]
                        #else if($global-address == "true" AND $permanent == "true")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask [$interface-name] [$next-hop-ip] global [$metric] [tag $tag] permanent [name $name]
                        #else if($global-address == "false" AND $permanent == "true")
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask [$interface-name] [$next-hop-ip] [$metric] [tag $tag] permanent [name $name]
                        #else
                        ip route vrf $../../../name $../dest-ip-address $../dest-mask [tag $tag] [track $track]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVrfRouteEntry</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($interface-name != null AND $next-hop-ip != null AND $name != null AND $metric != null AND $global-address == "false" AND $permanent == "false")
                        no ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $next-hop-ip $metric [tag $tag] name $name [track $track]
                        #else if($interface-name != null AND $next-hop-ip != null AND $metric != null AND $global-address == "false" AND $permanent == "false")
                        no ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $next-hop-ip $metric [tag $tag] [track $track]
                        #else if($next-hop-ip != null AND $name != null AND $metric != null AND $global-address == "false" AND $permanent == "false")
                        no ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip $metric [tag $tag] name $name [track $track]
                        #else if($interface-name != null AND $name != null AND $metric != null AND $global-address == "false" AND $permanent == "false")
                        no ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $metric [tag $tag] name $name [track $track]
                        #else if($interface-name != null AND $metric != null AND $global-address == "false" AND $permanent == "false")
                        no ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $metric [tag $tag] [track $track]
                        #else if($next-hop-ip != null AND $metric != null AND $global-address == "false" AND $permanent == "false")
                        no ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip $metric [tag $tag] [track $track]
                        #else if($interface-name != null AND $next-hop-ip != null AND $name != null AND $global-address == "false" AND $permanent == "false")
                        no ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $next-hop-ip [tag $tag] name $name [track $track]
                        #else if($interface-name != null AND $next-hop-ip != null AND $global-address == "false" AND $permanent == "false")
                        no ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name $next-hop-ip [tag $tag] [track $track]
                        #else if($next-hop-ip != null AND $name != null AND $global-address == "false" AND $permanent == "false")
                        no ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip [tag $tag] name $name [track $track]
                        #else if($interface-name != null AND $name != null AND $global-address == "false" AND $permanent == "false")
                        no ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name [tag $tag] name $name [track $track]
                        #else if($interface-name != null AND $global-address == "false" AND $permanent == "false")
                        no ip route vrf $../../../name $../dest-ip-address $../dest-mask $interface-name [tag $tag] [track $track]
                        #else if($next-hop-ip != null AND $global-address == "false" AND $permanent == "false")
                        no ip route vrf $../../../name $../dest-ip-address $../dest-mask $next-hop-ip [tag $tag] [track $track]
                        #else if($next-hop-ip != null AND $global-address == "true" AND $permanent == "false")
                        no ip route vrf $../../../name $../dest-ip-address $../dest-mask [$interface-name] $next-hop-ip global [$metric] [tag $tag] [name $name] [track $track]
                        #else if($global-address == "true" AND $permanent == "true")
                        no ip route vrf $../../../name $../dest-ip-address $../dest-mask [$interface-name] [$next-hop-ip] global [$metric] [tag $tag] permanent [name $name]
                        #else if($global-address == "false" AND $permanent == "true")
                        no ip route vrf $../../../name $../dest-ip-address $../dest-mask [$interface-name] [$next-hop-ip] [$metric] [tag $tag] permanent [name $name]
                        #else
                        no ip route vrf $../../../name $../dest-ip-address $../dest-mask [tag $tag] [track $track]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
       
        <operation>
            <target>/controller:devices/device/CopyToServer</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CopyToServer</name>
                    <type>CREATE</type>
                    <command-string>copy $srcFile tftp://$naasServerIp/$destFile</command-string>
                </device-operation>
            </device-operations>
        </operation>
       
                <operation>
                    <target>/controller:devices/device/l2features:port-channels/port-channel</target>
                    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
                    <device-operations>
                        <device-operation>
                            <name>ParsePortChannel</name>
                            <type>PARSE</type>
                            <command-string>interface $name</command-string>
                        </device-operation>
                        <device-operation>
                            <name>createPortChannel</name>
                            <type>CREATE</type>
                            <command-string>interface Port-channel $name</command-string>
                            <command-string>description $description</command-string>
                            <command-string>
                                #if($ip-redirects == "false")
                                no ip redirects
                                #if($ip-redirects == "true")
                                ip redirects
                            </command-string>
                            <command-string>
                                #if($ip-unreachables == "false")
                                no ip unreachables
                                #if($ip-unreachables == "true")
                                ip unreachables
                            </command-string>
                            <command-string>
                                #if($ip-proxy-arp == "false")
                                no ip proxy-arp
                                #if($ip-proxy-arp == "true")
                                ip proxy-arp
                            </command-string>
                            <command-string>
                                #if($mop-enabled == "false")
                                no mop enabled
                                #if($mop-enabled == "true")
                                mop enabled
                            </command-string>
                            <command-string>
                                #if($lldp-transmit == "false")
                                no lldp transmit
                                #if($lldp-transmit == "true")
                                lldp transmit
                            </command-string>
                            <command-string>
                                #if($lldp-receive == "false")
                                no lldp receive
                                #if($lldp-receive == "true")
                                lldp receive
                            </command-string>
                        </device-operation>
                        <device-operation>
                            <name>UpdatePortChannel</name>
                            <type>UPDATE</type>
                            <command-string>interface Port-channel $name</command-string>
                        </device-operation>
                        <device-operation>
                            <name>DeletePortChannel</name>
                            <type>DELETE</type>
                            <command-string>no interface Port-channel $name</command-string>
                        </device-operation>
                    </device-operations>
                </operation>
                <operation>
                    <target>/controller:devices/device/l2features:port-channels/port-channel/description</target>
                    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
                    <device-operations>
                        <device-operation>
                            <name>createDescription</name>
                            <type>CREATE</type>
                            <command-string>description $description</command-string>
                        </device-operation>
                        <device-operation>
                            <name>UpdateDescription</name>
                            <type>UPDATE</type>
                            <command-string>description $description</command-string>
                        </device-operation>
                        <device-operation>
                            <name>DeleteDescription</name>
                            <type>DELETE</type>
                            <command-string>no description $description</command-string>
                        </device-operation>
                    </device-operations>
                </operation>
                <operation>
                    <target>/controller:devices/device/l2features:port-channels/port-channel/ip-redirects</target>
                    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
                    <device-operations>
                        <device-operation>
                            <name>createIpRedirects</name>
                            <type>CREATE</type>
                            <command-string>
                                #if($ip-redirects == "false")
                                no ip redirects
                                #if($ip-redirects == "true")
                                ip redirects
                            </command-string>
                        </device-operation>
                        <device-operation>
                            <name>UpdateIpRedirects</name>
                            <type>UPDATE</type>
                            <command-string>
                                #if($ip-redirects == "false")
                                no ip redirects
                                #if($ip-redirects == "true")
                                ip redirects
                            </command-string>
                        </device-operation>
                        <device-operation>
                            <name>DeleteIpRedirects</name>
                            <type>DELETE</type>
                            <command-string>
                                #if($ip-redirects == "false")
                                ip redirects
                                #if($ip-redirects == "true")
                                no ip redirects
                            </command-string>
                        </device-operation>
                    </device-operations>
                </operation>
                <operation>
                    <target>/controller:devices/device/l2features:port-channels/port-channel/ip-unreachables</target>
                    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
                    <device-operations>
                        <device-operation>
                            <name>createIpunreachables</name>
                            <type>CREATE</type>
                            <command-string>
                                #if($ip-unreachables == "false")
                                no ip unreachables
                                #if($ip-unreachables == "true")
                                ip unreachables
                            </command-string>
                        </device-operation>
                        <device-operation>
                            <name>UpdateIpunreachable</name>
                            <type>UPDATE</type>
                            <command-string>
                                #if($ip-unreachables == "false")
                                no ip unreachables
                                #if($ip-unreachables == "true")
                                ip unreachables
                            </command-string>
                        </device-operation>
                        <device-operation>
                            <name>DeleteIpunreachable</name>
                            <type>DELETE</type>
                            <command-string>
                                #if($ip-unreachables == "false")
                                ip unreachables
                                #if($ip-unreachables == "true")
                                no ip unreachables
                            </command-string>
                        </device-operation>
                    </device-operations>
                </operation>
                <operation>
                    <target>/controller:devices/device/l2features:port-channels/port-channel/ip-proxy-arp</target>
                    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
                    <device-operations>
                        <device-operation>
                            <name>createIp-proxy-arp</name>
                            <type>CREATE</type>
                            <command-string>
                                #if($ip-proxy-arp == "false")
                                no ip proxy-arp
                                #if($ip-proxy-arp == "true")
                                ip proxy-arp
                            </command-string>
                        </device-operation>
                        <device-operation>
                            <name>UpdateIp-proxy-arp</name>
                            <type>UPDATE</type>
                            <command-string>
                                #if($ip-proxy-arp == "false")
                                no ip proxy-arp
                                #if($ip-proxy-arp == "true")
                                ip proxy-arp
                            </command-string>
                        </device-operation>
                        <device-operation>
                            <name>DeleteIp-proxy-arp</name>
                            <type>DELETE</type>
                            <command-string>
                                #if($ip-proxy-arp == "false")
                                ip proxy-arp
                                #if($ip-proxy-arp == "true")
                                no ip proxy-arp
                            </command-string>
                        </device-operation>
                    </device-operations>
                </operation>
                <operation>
                    <target>/controller:devices/device/l2features:port-channels/port-channel/mop-enabled</target>
                    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
                    <device-operations>
                        <device-operation>
                            <name>createMop-enabled</name>
                            <type>CREATE</type>
                            <command-string>
                                #if($mop-enabled == "false")
                                no mop enabled
                                #if($mop-enabled == "true")
                                mop enabled
                            </command-string>
                        </device-operation>
                        <device-operation>
                            <name>UpdateMop-enabled</name>
                            <type>UPDATE</type>
                            <command-string>
                                #if($mop-enabled == "false")
                                no mop enabled
                                #if($mop-enabled == "true")
                                mop enabled
                            </command-string>
                        </device-operation>
                        <device-operation>
                            <name>DeleteMop-enabled</name>
                            <type>DELETE</type>
                            <command-string>
                                #if($mop-enabled == "false")
                                mop enabled
                                #if($mop-enabled == "true")
                                no mop enabled
                            </command-string>
                        </device-operation>
                    </device-operations>
                </operation>

                <operation>
                    <target>/controller:devices/device/l2features:port-channels/port-channel/lldp-transmit</target>
                    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
                    <device-operations>
                        <device-operation>
                            <name>createLldp-transmit</name>
                            <type>CREATE</type>
                            <command-string>
                                #if($lldp-transmit == "false")
                                no lldp transmit
                                #if($lldp-transmit == "true")
                                lldp transmit
                            </command-string>
                        </device-operation>
                        <device-operation>
                            <name>UpdateLldp-transmit</name>
                            <type>UPDATE</type>
                            <command-string>
                                #if($lldp-transmit == "false")
                                no lldp transmit
                                #if($lldp-transmit == "true")
                                lldp transmit
                            </command-string>
                        </device-operation>
                        <device-operation>
                            <name>DeleteLldp-transmit</name>
                            <type>DELETE</type>
                            <command-string>
                                #if($lldp-transmit == "false")
                                lldp transmit
                                #if($lldp-transmit == "true")
                                no lldp transmit
                            </command-string>
                        </device-operation>
                    </device-operations>
                </operation>

                <operation>
                    <target>/controller:devices/device/l2features:port-channels/port-channel/lldp-receive</target>
                    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
                    <device-operations>
                        <device-operation>
                            <name>createLldp-receive</name>
                            <type>CREATE</type>
                            <command-string>
                                #if($lldp-receive == "false")
                                no lldp receive
                                #if($lldp-receive == "true")
                                lldp receive
                            </command-string>
                        </device-operation>
                        <device-operation>
                            <name>UpdateLldp-receive</name>
                            <type>UPDATE</type>
                            <command-string>
                                #if($lldp-receive == "false")
                                no lldp receive
                                #if($lldp-receive == "true")
                                lldp receive
                            </command-string>
                        </device-operation>
                        <device-operation>
                            <name>DeleteLldp-receive</name>
                            <type>DELETE</type>
                            <command-string>
                                #if($lldp-receive == "false")
                                lldp receive
                                #if($lldp-receive == "true")
                                no lldp receive
                            </command-string>
                        </device-operation>
                    </device-operations>
                </operation>
                <operation>
                    <target>/controller:devices/device/basicDeviceConfigs:port-channel-load-balancing</target>
                    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
                    <device-operations>
                        <device-operation>
                            <name>CreatePortChannelLoadBalancing</name>
                            <type>CREATE</type>
                            <command-string>
                                #if($vlan-manual == "true")
                                port-channel load-balancing vlan-manual
                            </command-string>
                        </device-operation>
                        <device-operation>
                            <name>UpdatePortChannelLoadBalancing</name>
                            <type>UPDATE</type>
                            <command-string>
                                #if($vlan-manual == "true")
                                port-channel load-balancing vlan-manual
                            </command-string>
                        </device-operation>
                        <device-operation>
                            <name>DeletePortChannelLoadBalancing</name>
                            <type>DELETE</type>
                            <command-string>
                                no port-channel load-balancing vlan-manual
                            </command-string>
                        </device-operation>
                    </device-operations>
                </operation>
                
                <operation>
                    <target>/controller:devices/device/interface:interfaces/interface/hsrp:hsrp/track-interface</target>
                    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
                    <device-operations>
                        <device-operation>
                            <name>CreateInterfaceHSRPTrackInterface</name>
                            <type>CREATE</type>
                            <command-string>[standby track $name]</command-string>
                        </device-operation>
                        <device-operation>
                            <name>DeleteInterfaceHSRPTrackInterface</name>
                            <type>DELETE</type>
                            <command-string>[no standby track $name]</command-string>
                        </device-operation>
                    </device-operations>
                </operation>
               
                <operation>
                    <target>/controller:devices/device/PersistConfig</target>
                    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
                    <device-operations>
                        <device-operation>
                            <name>PersistConfig</name>
                            <type>CREATE</type>
                            <command-string>write memory</command-string>
                        </device-operation>
                    </device-operations>
                </operation>
                
                <operation>
                    <target>/controller:devices/device/l2features:vlan-groups/vlan-group</target>
                    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
                    <device-operations>
                        <device-operation>
                            <name>CreateVlanGroup</name>
                            <type>CREATE</type>
                            <command-string>
                                #if($l2features:vlans != null)
                                firewall vlan-group $group-number $l2features:vlans
                                #else
                                firewall vlan-group $group-number $l2features:vlan-id</command-string>
                        </device-operation>
                        <device-operation>
                            <name>DeleteVlanGroup</name>
                            <type>DELETE</type>
                            <command-string>
                                #if($l2features:vlans != null)
                                no firewall vlan-group $group-number $l2features:vlans
                                #else
                                no firewall vlan-group $group-number $l2features:vlan-id</command-string>
                        </device-operation>
                    </device-operations>
                </operation>
               
        <operation>
            <target>/controller:devices/device/firewall:svclcs/svclc</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSvclc</name>
                    <type>CREATE</type>
                    <command-string>firewall [switch $switch-number] module $module-number vlan-group $group-number
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSvclc</name>
                    <type>DELETE</type>
                    <command-string>no firewall [switch $switch-number] module $module-number vlan-group $group-number
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVrf</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($name != null AND $name != "GLOBAL"  AND $vrf-definition-mode == "false")
                        ip vrf $name
                        #else if($name != null AND $name != "GLOBAL"  AND $vrf-definition-mode == "true")
                        vrf definition $name
                    </command-string>
                    <command-string>
                        #if($rd != null)
                        rd $rd
                    </command-string>
                    <command-string>
                        #if($name != null AND $name != "GLOBAL" AND $vrf-definition-mode == "true")
                        address-family ipv4
                        exit-address-family
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVrf</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($name != null AND $name != "GLOBAL"  AND $vrf-definition-mode == "false")
                        ip vrf $name
                        #else if($name != null AND $name != "GLOBAL"  AND $vrf-definition-mode == "true")
                        vrf definition $name
                    </command-string>
                    <command-string>
                        #if($rd != null) rd $rd
                    </command-string>
                    <command-string>
                        #if($name != null AND $name != "GLOBAL" AND $vrf-definition-mode == "true")
                        address-family ipv4
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVrf</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($name != null AND $name != "GLOBAL"  AND $vrf-definition-mode == "false")
                        no ip vrf $name
                        #else if($name != null AND $name != "GLOBAL"  AND $vrf-definition-mode == "true")
                        no vrf definition $name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:tftp</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTFTP</name>
                    <type>CREATE</type>
                    <command-string>ip tftp source-interface $tftp-src-interface</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateTFTP</name>
                    <type>UPDATE</type>
                    <command-string>ip tftp source-interface $tftp-src-interface</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTFTP</name>
                    <type>DELETE</type>
                    <command-string>no ip tftp source-interface $tftp-src-interface</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:community-lists/community-list</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                   <name>ParseCommunityList</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($community-list-entry != null AND $community-list-name != null AND $condition != null AND $value != null)
                        ip community-list $community-list-entry $community-list-name $condition $value
                        #else if($community-list-entry == null AND $community-list-name != null AND $condition != null AND $value != null)
                        ip community-list $community-list-name $condition $value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateCommunityList</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($community-list-entry != null AND $community-list-name != null AND $condition != null AND $value != null)
                        ip community-list $community-list-entry $community-list-name $condition $value
                        #else if($community-list-entry == null AND $community-list-name != null AND $condition != null AND $value != null)
                        ip community-list $community-list-name $condition $value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateCommunityList</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($community-list-entry != null AND $community-list-name != null AND $condition != null AND $value != null)
                        ip community-list $community-list-entry $community-list-name $condition $value
                        #else if($community-list-entry == null AND $community-list-name != null AND $condition != null AND $value != null)
                        ip community-list $community-list-name $condition $value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteCommunityList</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($community-list-entry != null AND $community-list-name != null AND $condition != null AND $value != null)
                        no ip community-list $community-list-entry $community-list-name $condition $value
                        #else if($community-list-entry == null AND $community-list-name != null AND $condition != null AND $value != null)
                        no ip community-list $community-list-name $condition $value
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/l3features:extcommunity-lists/extcommunity-list</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateExtCommunityList</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($extcommunity-list-entry == "standard" AND $extcommunity-list-name != null AND $condition != null AND $value != null)
                        ip extcommunity-list $extcommunity-list-entry $extcommunity-list-name $condition $extcomm $value
			#else if($extcommunity-list-entry == "expanded" AND $extcommunity-list-name != null AND $condition != null AND $value != null)
                        ip extcommunity-list $extcommunity-list-entry $extcommunity-list-name $condition $value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateExtCommunityList</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($extcommunity-list-entry == "standard" AND $extcommunity-list-name != null AND $condition != null AND $value != null)
                        ip extcommunity-list $extcommunity-list-entry $extcommunity-list-name $condition $extcomm $value
			#else if($extcommunity-list-entry == "expanded" AND $extcommunity-list-name != null AND $condition != null AND $value != null)
                        ip extcommunity-list $extcommunity-list-entry $extcommunity-list-name $condition $value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteExtCommunityList</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($extcommunity-list-entry == "standard" AND $extcommunity-list-name != null AND $condition != null AND $value != null)
                        no ip extcommunity-list $extcommunity-list-entry $extcommunity-list-name $condition $extcomm $value
			#else if($extcommunity-list-entry == "expanded" AND $extcommunity-list-name != null AND $condition != null AND $value != null)
                        no ip extcommunity-list $extcommunity-list-entry $extcommunity-list-name $condition $value
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:ip-sla/sla</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
		<device-operation>
                    <name>ParseSLAOp</name>
                    <type>PARSE</type>
                    <command-string>$operation-type $destination $destination-port source-ip $source-interface-ip source-port $source-port num-packets $num-packets interval $interval</command-string>
                    <command-string>$operation-type $destination $destination-port source-ip $source-interface-ip source-port $source-port interval $interval</command-string>
                    <command-string>$operation-type $destination $destination-port source-ip $source-interface-ip source-port $source-port num-packets</command-string>
                    <command-string>$operation-type $destination $destination-port source-ip $source-interface-ip source-port $source-port</command-string>
                    <command-string>$operation-type $destination $destination-port source-ip $source-interface-ip num-packets $num-packets interval $interval</command-string>
                    <command-string>$operation-type $destination $destination-port source-ip $source-interface-ip num-packets $num-packets</command-string>
                    <command-string>$operation-type $destination $destination-port source-ip $source-interface-ip interval $interval</command-string>
                    <command-string>$operation-type $destination $destination-port source-ip $source-interface-ip</command-string>
                    <command-string>$operation-type $destination source-ip $source-interface-ip source-port $source-port num-packets $num-packets interval $interval</command-string>
                    <command-string>$operation-type $destination source-ip $source-interface-ip source-port $source-port interval $interval</command-string>
                    <command-string>$operation-type $destination source-ip $source-interface-ip source-port $source-port num-packets</command-string>
                    <command-string>$operation-type $destination source-ip $source-interface-ip source-port $source-port</command-string>
                    <command-string>$operation-type $destination source-ip $source-interface-ip num-packets $num-packets interval $interval</command-string>
                    <command-string>$operation-type $destination source-ip $source-interface-ip num-packets $num-packets</command-string>
                    <command-string>$operation-type $destination source-ip $source-interface-ip interval $interval</command-string>
                    <command-string>$operation-type $destination source-ip $source-interface-ip</command-string>
                </device-operation>
                <device-operation>
                    <name>CreateSLA</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($entry-number != null)
                        ip sla $entry-number
                    </command-string>
                    <command-string>
			#if($operation-type == "http" AND $http-request-type != null AND $source == "source-ip" AND $source-interface-ip != null AND $destination == null)
                        $operation-type $http-request-type $http-url source-ip $source-interface-ip
                        #if($operation-type != null AND $destination != null AND $source == "source-interface" AND $source-interface-name != null)
                        $operation-type $destination source-interface $source-interface-name
                        #else if($operation-type != null AND $destination != null AND $source == "source-ip" AND $source-interface-ip != null)
                        $operation-type $destination [$destination-port] source-ip $source-interface-ip [source-port $source-port] [num-packets $num-packets] [interval $interval]
                    </command-string>
		    <command-string>
                        #if($http-request-type != null)
                        http-raw-request
                    </command-string>
                    <command-string>
                        #if($http-request-type != null AND $http-raw-request != null)
                        $http-raw-request
                    </command-string>
                    <command-string>
                        #if($http-request-type != null)
                        exit
                    </command-string>
		    <command-string>
                        #if($vrf-name != null)
                        vrf $vrf-name
                    </command-string>
                    <command-string>
                        #if($data-size != null)
                        request-data-size $data-size
                    </command-string>
		    <command-string>
                        #if($response-data-size != null)
                        response-data-size $response-data-size
                    </command-string>
		    <command-string>
                        #if($tos != null)
                        tos $tos
                    </command-string>
                    <command-string>
                        #if($tag != null)
                        tag $tag
                    </command-string>
                    <command-string>
                        #if($threshold != null)
                        threshold $threshold
                    </command-string>
                    <command-string>
                        #if($timeout != null)
                        timeout $timeout
                    </command-string>
                    <command-string>
                        #if($frequency != null)
                        frequency $frequency
                    </command-string>
		    <command-string>
                        #if($history-interval != null AND $buckets-size !=null)
                        history enhanced interval $history-interval buckets $buckets-size
                    </command-string>
                </device-operation>
                 <device-operation>
                    <name>UpdateSLA</name>
                    <type>UPDATE</type>
                    <command-string>
                    #if($entry-number != null)
                        no ip sla schedule $entry-number
                    </command-string>
                    <command-string>
                        #if($entry-number != null)
                        no ip sla $entry-number
                    </command-string>
                    <command-string>
                        #if($entry-number != null)
                        ip sla $entry-number
                    </command-string>
                    <command-string>
            #if($operation-type == "http" AND $http-request-type != null AND $source == "source-ip" AND $source-interface-ip != null AND $destination == null)
                        $operation-type $http-request-type $http-url source-ip $source-interface-ip
                        #if($operation-type != null AND $destination != null AND $source == "source-interface" AND $source-interface-name != null)
                        $operation-type $destination source-interface $source-interface-name
                        #else if($operation-type != null AND $destination != null AND $source == "source-ip" AND $source-interface-ip != null)
                        $operation-type $destination [$destination-port] source-ip $source-interface-ip [source-port $source-port] [num-packets $num-packets] [interval $interval]
                    </command-string>
                    <command-string>
                        #if($http-request-type != null)
                        http-raw-request
                    </command-string>
                    <command-string>
                        #if($http-request-type != null AND $http-raw-request != null)
                        $http-raw-request
                    </command-string>
                    <command-string>
                        #if($http-request-type != null)
                        exit
                    </command-string>
            <command-string>
                        #if($vrf-name != null)
                        vrf $vrf-name
                    </command-string>
                    <command-string>
                        #if($data-size != null)
                        request-data-size $data-size
                    </command-string>
            <command-string>
                        #if($response-data-size != null)
                        response-data-size $response-data-size
                    </command-string>
            <command-string>
                        #if($tos != null)
                        tos $tos
                    </command-string>
                    <command-string>
                        #if($tag != null)
                        tag $tag
                    </command-string>
                    <command-string>
                        #if($threshold != null)
                        threshold $threshold
                    </command-string>
                    <command-string>
                        #if($timeout != null)
                        timeout $timeout
                    </command-string>
                    <command-string>
                        #if($frequency != null)
                        frequency $frequency
                    </command-string>
            <command-string>
                        #if($history-interval != null AND $buckets-size !=null)
                        history enhanced interval $history-interval buckets $buckets-size
                    </command-string>
                   <command-string>
                    #if($entry-number != null)
                    ip sla schedule $entry-number life forever start-time now
                </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSLA</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($entry-number != null)
                        no ip sla $entry-number
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:ip-sla/responder</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
           <device-operations>
                <device-operation>
                    <name>ParseSLAResponder</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>ip sla $is-responder $key-chain</command-string>
                    <command-string>ip sla $is-responder</command-string>
                    <command-string>timer inactivity $timer-inactivity</command-string>
                    <command-string>port $port</command-string>
                </device-operation>
                <device-operation>
                    <name>CreateSLAResponder</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($is-responder == "true")
                        ip sla responder
                    </command-string>
                    <command-string>
                        #if($key-chain != null)
                        ip sla key-chain $key-chain
                    </command-string>
                    <command-string>
                        #if($is-logging-traps == "true")
                        ip sla logging traps
                    </command-string>
                    <command-string>
                        #if($is-enable-reaction == "true")
                        ip sla enable reaction-alerts
                    </command-string>
                    <command-string>
                        #if($is-server-twamp == "true")
                        ip sla server twamp
                    </command-string>
                    <command-string>
                        #if($port != "true")
                        port $port
                    </command-string>
                    <command-string>
                        #if($timer-inactivity != null)
                        timer inactivity $timer-inactivity
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSLAResponder</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($is-responder == "true")
                        no ip sla responder
                    </command-string>
                    <command-string>
                        #if($key-chain != null)
                        no ip sla key-chain $key-chain
                    </command-string>
                    <command-string>
                        #if($is-logging-traps == "true")
                        no ip sla logging traps
                    </command-string>
                    <command-string>
                        #if($is-enable-reaction == "true")
                        no ip sla enable reaction-alerts
                    </command-string>
                    <command-string>
                        #if($is-server-twamp == "true")
                        no ip sla server twamp
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:ip-sla/responder/responder-options</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSLAResponderOptions</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($operation-type == "auto-register" AND $host != null AND $auto-register-type == "client-id" AND $client-id != null)
                        ip sla responder $operation-type $host client-id $client-id
                        #else if($operation-type == "auto-register" AND $host != null AND $auto-register-type == "endpoint-list" AND $endpoint-list-name != null AND $client-id != null)
                        ip sla responder $operation-type $host endpoint-list $endpoint-list-name client-id $client-id
                        #else if($operation-type == "auto-register" AND $host != null AND $auto-register-type == "endpoint-list" AND $endpoint-list-name != null AND $retry-timer != null)
                        ip sla responder $operation-type $host endpoint-list $endpoint-list-name retry-timer $retry-timer
                        #else if($operation-type == "tcp-connect" AND $ipaddress != null AND $port != null)
                        ip sla responder $operation-type ipaddress $ipaddress port $port
                        #else if($operation-type == "twamp")
                        ip sla responder $operation-type
                        #else if($operation-type == "udp-echo" AND $ipaddress != null AND $port != null)
                        ip sla responder $operation-type ipaddress $ipaddress port $port
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSLAResponderOptions</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($operation-type == "auto-register" AND $host != null AND $auto-register-type == "client-id" AND $client-id != null)
                        no ip sla responder $operation-type $host client-id $client-id
                        #else if($operation-type == "auto-register" AND $host != null AND $auto-register-type == "endpoint-list" AND $endpoint-list-name != null AND $client-id != null)
                        no ip sla responder $operation-type $host endpoint-list $endpoint-list-name client-id $client-id
                        #else if($operation-type == "auto-register" AND $host != null AND $auto-register-type == "endpoint-list" AND $endpoint-list-name != null AND $retry-timer != null)
                        no ip sla responder $operation-type $host endpoint-list $endpoint-list-name retry-timer $retry-timer
                        #else if($operation-type == "tcp-connect" AND $ipaddress != null AND $port != null)
                        no ip sla responder $operation-type ipaddress $ipaddress port $port
                        #else if($operation-type == "twamp")
                        no ip sla responder $operation-type
                        #else if($operation-type == "udp-echo" AND $ipaddress != null AND $port != null)
                        no ip sla responder $operation-type ipaddress $ipaddress port $port
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:ip-sla-schedules/ip-sla-schedule</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSLASchedule</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($entry-number != null)
                        ip sla schedule $entry-number life forever start-time now
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSLASchedule</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($entry-number != null)
                        no ip sla schedule $entry-number life forever start-time now
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:tracks/track</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTrack</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($track-number != null AND $entry-number != null AND $track-type == "ip") 
                        track $track-number ip $ip-type $entry-number reachability
                        #else
                        track $track-number $track-type $list-type $boolean-type
                    </command-string>
                     <command-string>
                        #if($track-type == "ip" AND $delay-down-time != null AND $delay-up-time == null) 
                        delay down $delay-down-time                    
                        #else if($track-type == "ip" AND $delay-up-time != null AND $delay-down-time == null) 
                        delay up $delay-up-time
                         #else
                         delay down $delay-down-time up $delay-up-time
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTrack</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($track-number != null AND $entry-number != null AND $track-type == "ip") 
                        no track $track-number ip $ip-type $entry-number reachability
                        #else
                        no track $track-number $track-type $list-type $boolean-type
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:tracks/track/object-list</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>Createlistobject</name>
                    <type>CREATE</type>
                    <command-string>track $../track-number $../track-type $../list-type $../boolean-type</command-string>
                    <command-string>
                        #if($not == 'true')
                        object $object-number not
                        #else
                        object $object-number
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>Deletelistobject</name>
                    <type>DELETE</type>
                    <command-string>track $../track-number $../track-type $../list-type $../boolean-type</command-string>
                    <command-string>no object $object-number</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/rt-import</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVrfRTImport</name>
                    <type>CREATE</type>
                    <command-string>
			#if($../name != null AND $../name != "GLOBAL"  AND $../vrf-definition-mode == "false")
                        ip vrf $../name
                        #else if($../name != null AND $../name != "GLOBAL"  AND $../vrf-definition-mode == "true")
                        vrf definition $../name                        
                    </command-string>
                    <command-string>
                        #if($rt-import != null)
                        route-target import $rt-import
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVrfRTImport</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../name != null AND $../name != "GLOBAL"  AND $../vrf-definition-mode == "false")
                        ip vrf $../name
                        #else if($../name != null AND $../name != "GLOBAL"  AND $../vrf-definition-mode == "true")
                        vrf definition $../name
                    </command-string>
                    <command-string>
                        #if($rt-import != null)
                        route-target import $rt-import
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVrfRTImport</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../name != null AND $../name != "GLOBAL"  AND $../vrf-definition-mode == "false")
                        ip vrf $../name
                        #else if($../name != null AND $../name != "GLOBAL"  AND $../vrf-definition-mode == "true")
                        vrf definition $../name
                    </command-string>
                    <command-string>
                        #if($rt-import != null)
                        no route-target import $rt-import
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/rt-export</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVrfRTExport</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../name != null AND $../name != "GLOBAL"  AND $../vrf-definition-mode == "false")
                        ip vrf $../name
                        #else if($../name != null AND $../name != "GLOBAL"  AND $../vrf-definition-mode == "true")
                        vrf definition $../name
                    </command-string>
                    <command-string>
                        #if($rt-export != null)
                        route-target export $rt-export
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVrfRTExport</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../name != null AND $../name != "GLOBAL"  AND $../vrf-definition-mode == "false")
                        ip vrf $../name
                        #else if($../name != null AND $../name != "GLOBAL"  AND $../vrf-definition-mode == "true")
                        vrf definition $../name
                    </command-string>
                    <command-string>
                        #if($rt-export != null)
                        route-target export $rt-export
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVrfRTExport</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../name != null AND $../name != "GLOBAL"  AND $../vrf-definition-mode == "false")
                        ip vrf $../name
                        #else if($../name != null AND $../name != "GLOBAL"  AND $../vrf-definition-mode == "true")
                        vrf definition $../name
                    </command-string>
                    <command-string>
                        #if($rt-export != null)
                        no route-target export $rt-export
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/import-map</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVrfImportMap</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../name != null AND $../name != "GLOBAL" AND $../vrf-definition-mode == "false")
                        ip vrf $../name
                    </command-string>
                    <command-string>
                        #if($import-map != null AND $ipv4 == 'true' AND $upper-limit == null AND $../vrf-definition-mode == "false")                        
                        import ipv4 $table map $import-map
                        #else if($import-map != null AND $ipv4 == 'true' AND $upper-limit != null AND $../vrf-definition-mode == "false")
                        import ipv4 $table $upper-limit map $import-map
                        #else if($import-map != null AND $ipv4 == 'false' AND $../vrf-definition-mode == "false")
                        import map $import-map
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVrfImportMap</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../name != null AND $../name != "GLOBAL" AND $../vrf-definition-mode == "false")
                        ip vrf $../name
                    </command-string>
                    <command-string>
                        #if($import-map != null AND $ipv4 == 'true' AND $upper-limit == null AND $../vrf-definition-mode == "false")                        
                        import ipv4 $table map $import-map
                        #else if($import-map != null AND $ipv4 == 'true' AND $upper-limit != null AND $../vrf-definition-mode == "false")
                        import ipv4 $table $upper-limit map $import-map
                        #else if($import-map != null AND $ipv4 == 'false' AND $../vrf-definition-mode == "false")
                        import map $import-map
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVrfImportMap</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../name != null AND $../name != "GLOBAL" AND $../vrf-definition-mode == "false")
                        ip vrf $../name
                    </command-string>
                    <command-string>
                        #if($import-map != null AND $ipv4 == 'true' AND $../vrf-definition-mode == "false")
                        no import ipv4 $table [$upper-limit] map $import-map
			#else if($import-map != null AND $ipv4 == 'false' AND $../vrf-definition-mode == "false")
			no import map $import-map
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/export-map</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateVrfExportMap</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../name != null AND $../name != "GLOBAL" AND $../vrf-definition-mode == "false")
                        ip vrf $../name
                    </command-string>
                    <command-string>
                        #if($export-map != null AND $ipv4 == 'true' AND $upper-limit == null AND $../vrf-definition-mode == "false")
                        export ipv4 $table map $export-map
			#else if($export-map != null AND $ipv4 == 'true' AND $upper-limit != null AND $../vrf-definition-mode == "false")
                        export ipv4 $table $upper-limit map $export-map
			#else if($export-map != null AND $ipv4 == 'false' AND $../vrf-definition-mode == "false")
			export map $export-map
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVrfExportMap</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../name != null AND $../name != "GLOBAL" AND $../vrf-definition-mode == "false")
                        ip vrf $../name
                    </command-string>
                    <command-string>
                        #if($export-map != null AND $ipv4 == 'true' AND $upper-limit == null AND $../vrf-definition-mode == "false")
                        export ipv4 $table map $export-map
			#else if($export-map != null AND $ipv4 == 'true' AND $upper-limit != null AND $../vrf-definition-mode == "false")
                        export ipv4 $table $upper-limit map $export-map
			#else if($export-map != null AND $ipv4 == 'false' AND $../vrf-definition-mode == "false")
			export map $export-map
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteVrfExportMap</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../name != null AND $../name != "GLOBAL" AND $../vrf-definition-mode == "false")
                        ip vrf $../name
                    </command-string>
                    <command-string>
                        #if($export-map != null AND $ipv4 == 'true' AND $../vrf-definition-mode == "false")
                        no export ipv4 $table [$upper-limit] map $export-map
			#else if($export-map != null AND $ipv4 == 'false' AND $../vrf-definition-mode == "false")
			no export map $export-map
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
       
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:service-time-stamps</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseserviceTimeStamps</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($service-timestamps-debug == "true")
                        service timestamps debug datetime msec show-timezone
                        #else if($service-timestamps-debug == "false")
                        no service timestamps debug datetime
                        #else if($service-timestamps-log == "true")
                        service timestamps log datetime msec show-timezone
                        #else if($service-timestamps-log == "false")
                        no service timestamps log datetime
                        #else if($service-password-encryption == "true")
                        service password-encryption
                        #else if($service-password-encryption == "false")
                        no service password-encryption
                        #else if($tcp-keepalives-in == "true")
                        service tcp-keepalives-in
                        #else if($tcp-keepalives-in == "false")
                        no service tcp-keepalives-in
                        #else if($enable-secret == "true")
                        enable secret $enable-secret-password
                        #else if($enable-secret == "false")
                        no enable secret $enable-secret-password
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateserviceTimeStamps</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($service-timestamps-debug == "true")
                        service timestamps debug datetime msec show-timezone
                    </command-string>
                    <command-string>
                        #if($service-timestamps-log == "true")
                        service timestamps log datetime msec show-timezone
                    </command-string>
                    <command-string>
                        #if($service-password-encryption == "true")
                        service password-encryption
                    </command-string>
                    <command-string>
                        #if($tcp-keepalives-in == "true")
                        service tcp-keepalives-in
                    </command-string>
                    <command-string>
                        #if($enable-secret == "true")
                        enable secret $enable-secret-password 
                        no enable password
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateserviceTimeStamps</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($service-timestamps-debug == "true")
                        service timestamps debug datetime msec show-timezone
                    </command-string>
                    <command-string>
                        #if($service-timestamps-log == "true")
                        service timestamps log datetime msec show-timezone
                    </command-string>
                    <command-string>
                        #if($service-password-encryption == "true")
                        service password-encryption
                    </command-string>
                    <command-string>
                        #if($tcp-keepalives-in == "true")
                        service tcp-keepalives-in
                    </command-string>
                    <command-string>
                        #if($enable-secret == "true")
                        enable secret $enable-secret-password 
                        no enable password
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteserviceTimeStamps</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($service-timestamps-debug == "true")
                        no service timestamps debug datetime msec show-timezone
                    </command-string>
                    <command-string>
                        #if($service-timestamps-log == "true")
                        no service timestamps log datetime msec show-timezone
                    </command-string>
                    <command-string>
                        #if($service-password-encryption == "true")
                        no service password-encryption
                    </command-string>
                    <command-string>
                        #if($tcp-keepalives-in == "true")
                        no service tcp-keepalives-in
                    </command-string>
                    <command-string>
                        #if($enable-secret == "true")
                        no enable secret $enable-secret-password 
                        enable password
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:service-time-stamps/service-tstamps</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateserviceTimeStampsOptions</name>
                    <type>CREATE</type>
                    <command-string>
                        service timestamps $service-time-stamp-level [$service-time-stamp-with] [$service-tstamp-datetime-option-1] [$service-tstamp-datetime-option-2] [$service-tstamp-datetime-option-3]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateserviceTimeStampsOptions</name>
                    <type>UPDATE</type>
                    <command-string>
                        service timestamps $service-time-stamp-level [$service-time-stamp-with] [$service-tstamp-datetime-option-1] [$service-tstamp-datetime-option-2] [$service-tstamp-datetime-option-3]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteserviceTimeStampsOptions</name>
                    <type>DELETE</type>
                    <command-string>
                        no service timestamps $service-time-stamp-level [$service-time-stamp-with] [$service-tstamp-datetime-option-1] [$service-tstamp-datetime-option-2] [$service-tstamp-datetime-option-3]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        
	<operation>
            <target>/controller:devices/device/l3features:as-path-acls/as-path-acl</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAsPathAcl</name>
                    <type>CREATE</type>
                    <command-string>ip as-path access-list $number $condition $expression</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateAsPathAcl</name>
                    <type>UPDATE</type>
                    <command-string>ip as-path access-list $number $condition $expression</command-string>
                </device-operation>
		<device-operation>
                    <name>DeleteAsPathAcl</name>
                    <type>DELETE</type>
                    <command-string>no ip as-path access-list $number $condition $expression</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:route-maps/route-map</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseRouteMap</name>
                    <type>PARSE</type>
                    <command-string>
                        route-map $name $action $seq
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:route-maps/route-map/route-map-entries</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouteMap</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($action != null)
                        route-map $../name $action $seq
                        #else
                        route-map $../name $seq
                    </command-string>
	        <command-string>description $description</command-string>
                </device-operation>
                 <device-operation>
                    <name>UpdateRouteMap</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($action != null)
                        route-map $../name $action $seq
                        #else
                        route-map $../name $seq
                    </command-string>
            <command-string>description $description</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouteMap</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($action != null)
                        no route-map $../name $action $seq
                        #else
                        no route-map $../name $seq
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:route-maps/route-map/route-map-entries/match-condition</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouteMapConditions</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../action != null)
                        route-map $../../name $../action $../seq
                        #else
                        route-map $../../name $../seq
                    </command-string>
                    <command-string>
                        #if($condition-type == 'prefix-list')
                        match ip address prefix-list $value
                        #else if($condition-type == 'route-source')
                        match ip route-source $value
			#else if($condition-type == 'address')
                        match ip address $value
                        #else
                        match $condition-type $value
                    </command-string>
                </device-operation>
		<device-operation>
                    <name>UpdateRouteMapConditions</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../action != null)
                        route-map $../../name $../action $../seq
                        #else
                        route-map $../../name $../seq
                    </command-string>
                    <command-string>
                        #if($condition-type == 'prefix-list')
                        match ip address prefix-list $value
                        #else if($condition-type == 'route-source')
                        match ip route-source $value
			#else if($condition-type == 'address')
                        match ip address $value
                        #else
                        match $condition-type $value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouteMapConditions</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../action != null)
                        route-map $../../name $../action $../seq
                        #else
                        route-map $../../name $../seq
                    </command-string>
                    <command-string>
                        #if($condition-type == 'prefix-list')
                        no match ip address prefix-list $value
                        #else if($condition-type == 'route-source')
                        no match ip route-source $value
			#else if($condition-type == 'address')
                        no match ip address $value
                        #else
                        no match $condition-type $value
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:route-maps/route-map/route-map-entries/set-action</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseRouteMapActions</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($set-type == 'as-path prepend')
                        set as-path prepend $value
                        #else if($set-type == 'comm-list')
                        set comm-list $value delete                     
                        #else if($set-type == 'ip')
                        set ip $ip $value
                        #else if($set-type == 'weight')
                        set weight $value
                        #else if($set-type == 'local-preference')
                        set local-preference $value
                        #else if($set-type == 'community')
                        set community $value
                        #else
                        set $set-type $value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateRouteMapActions</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../action != null)
                        route-map $../../name $../action $../seq
                        #else
                        route-map $../../name $../seq
                    </command-string>
                    <command-string>
			#if($set-type == 'as-path prepend')
			set as-path prepend $value
			#else if($set-type == 'comm-list')
                        set comm-list $value delete			
			#else if($set-type == 'ip')
			set ip $ip $value
			#else
			set $set-type $value
		    </command-string>
                </device-operation>
		<device-operation>
                    <name>UpdateRouteMapActions</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../action != null)
                        route-map $../../name $../action $../seq
                        #else
                        route-map $../../name $../seq
                    </command-string>
                    <command-string>
			#if($set-type == 'as-path prepend')
			set as-path prepend $value
			#else if($set-type == 'comm-list')
                        set comm-list $value delete			
			#else if($set-type == 'ip')
			set ip $ip $value
			#else
			set $set-type $value
		    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouteMapActions</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../action != null)
                        route-map $../../name $../action $../seq
                        #else
                        route-map $../../name $../seq
                    </command-string>
                    <command-string>
			#if($set-type == 'as-path prepend')
			no set as-path prepend $value
			#else if($set-type == 'comm-list')
                        no set comm-list $value delete			
			#else if($set-type == 'ip')
			no set ip $ip $value
			#else
			no set $set-type $value
		    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/wanoptimizer:wanop/interception/inpath</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createInpathInterface</name>
                    <type>CREATE</type>
                    <command-string>interface vlan $l2features:vlan</command-string>
                    <command-string>ip address $ip-address $netmask</command-string>
                </device-operation>
                <device-operation>
                    <name>removeInpathInterface</name>
                    <type>DELETE</type>
                    <command-string>interface vlan $l2features:vlan</command-string>
                    <command-string>no ip address $ip-address $netmask</command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
				<device-operation>
                     <name>ParseRouterBGP</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>router bgp $as-number</command-string>
                    <command-string>
                        #if($log-neighbor-changes)
                        bgp log-neighbor-changes
                    </command-string>
                    <command-string>
                        #if($router-id != null)
                        bgp router-id $router-id
                    </command-string>
                     <command-string>
                        #if($bgp-keepalive-timer != null AND $bgp-holdtime-timer != null)
                        timers bgp $bgp-keepalive-timer $bgp-holdtime-timer
                    </command-string>
                     <command-string>
                        #if($../name != "GLOBAL" AND $address-family == "ipv4-vpnv4")
                        address-family ipv4 vrf $../name
                        #else if($../name != "GLOBAL" AND $address-family == "ipv4")
                        address-family ipv4 vrf $../name
                        #else if($../name != "GLOBAL" AND $address-family != "ipv4")
                        address-family $address-family vrf $../name
                        #else if($address-family != null)
                        address-family $address-family
                    </command-string>
                    <command-string>[bgp listen limit $listen-limit]</command-string>
                    <!--command-string>[timers bgp $keepalive-interval $holdtime]</command-string-->
                    <command-string>
                        #if($default-information-originate)
                        default-information originate
                    </command-string>
                    <command-string>[bgp nexthop trigger delay $trigger-delay]</command-string>
                    <command-string>[maximum-paths ibgp $maximum-paths]</command-string>
                    <command-string>[distance bgp $eroutes $iroutes $lroutes]</command-string>
                    <command-string>
                        #if($redistribute-internal)
                        bgp redistribute-internal
                    </command-string>
                    <command-string>
                        #if($../name != "GLOBAL" AND $address-family == "ipv4-vpnv4")
                        address-family $address-family vrf $../name
                    </command-string>
                    <command-string>
                        #if($qppb-policy != null)
                        table-map $qppb-policy
                    </command-string>
                </device-operation>
				<device-operation>
                    <name>CreateRouterBGP</name>
                    <type>CREATE</type>
                    <command-string>router bgp $as-number</command-string>
                     <command-string>
                        #if($log-neighbor-changes)
                        bgp log-neighbor-changes
                    </command-string>
                    <command-string>
                        #if($router-id != null)
                        bgp router-id $router-id
                    </command-string>
                    <command-string>
                        #if($bgp-keepalive-timer != null AND $bgp-holdtime-timer != null)
                        timers bgp $bgp-keepalive-timer $bgp-holdtime-timer
                    </command-string>
                    <command-string>
                        #if($../name != "GLOBAL" AND $address-family == "ipv4-vpnv4")
                        address-family ipv4 vrf $../name
                        #else if($../name != "GLOBAL" AND $address-family == "ipv4")
                        address-family ipv4 vrf $../name
                        #else if($../name != "GLOBAL" AND $address-family != "ipv4")
                        address-family $address-family vrf $../name
                        #else if($address-family != null)
                        address-family $address-family
                    </command-string>
                   
                    <command-string>[bgp listen limit $listen-limit]</command-string>
                    <!--command-string>[timers bgp $keepalive-interval $holdtime]</command-string-->
					<command-string>
                        #if($default-information-originate)
                        default-information originate
                    </command-string>                    		    
                    <command-string>[bgp nexthop trigger delay $trigger-delay]</command-string>
                    <command-string>[maximum-paths ibgp $maximum-paths]</command-string>
                    <command-string>[distance bgp $eroutes $iroutes $lroutes]</command-string>
                    <command-string>
                        #if($redistribute-internal)
                        bgp redistribute-internal
                    </command-string>
                    <command-string>
                        #if($../name != "GLOBAL" AND $address-family == "ipv4-vpnv4")
                        address-family vpnv4 vrf $../name
                    </command-string>
                    <command-string>
                        #if($qppb-policy != null)
                        table-map $qppb-policy
                    </command-string>
                </device-operation>
		<device-operation>
                    <name>UpdateRouterBGP</name>
                    <type>UPDATE</type>
                    <command-string>router bgp $as-number</command-string>
		    <command-string>
                        #if($log-neighbor-changes)
                        bgp log-neighbor-changes
                    </command-string>
                    <command-string>
                        #if($router-id != null)
                        bgp router-id $router-id
                    </command-string>
                     <command-string>
                        #if($bgp-keepalive-timer != null AND $bgp-holdtime-timer != null)
                        timers bgp $bgp-keepalive-timer $bgp-holdtime-timer
                    </command-string>
					<command-string>
                        #if($../name != "GLOBAL" AND $address-family == "ipv4-vpnv4")
                        address-family ipv4 vrf $../name
                        #else if($../name != "GLOBAL" AND $address-family != "ipv4")
                        address-family ipv4 vrf $../name
                        #else if($../name != "GLOBAL" AND $address-family != "ipv4")
                        address-family $address-family vrf $../name
                        #else if($address-family == "ipv4")
                        address-family $address-family
                    </command-string>
                     <command-string>
                        #if($default-information-originate)
                        default-information originate
                    </command-string>
                    <command-string>[bgp nexthop trigger delay $trigger-delay]</command-string>
                    <command-string>[maximum-paths ibgp $maximum-paths]</command-string>
                    <command-string>[distance bgp $eroutes $iroutes $lroutes]</command-string>
                    <command-string>
                        #if($redistribute-internal)
                        bgp redistribute-internal
                    </command-string>
                    <command-string>
                        #if($qppb-policy != null)
                        table-map $qppb-policy
                    </command-string>    		    
                </device-operation>
                <device-operation>
                    <name>DeleteRouterBGP</name>
                    <type>DELETE</type>
                    <command-string>router bgp $as-number</command-string>
		    <command-string>
			#if($router-id != null)
			no bgp router-id
		    </command-string>
            <command-string>
                        #if($../name != "GLOBAL" AND $address-family == "ipv4-vpnv4")
                        no address-family ipv4 vrf $../name
                        #else if($../name != "GLOBAL" AND $address-family == "ipv4")
                        no address-family $address-family vrf $../name
                        #else if($address-family != null)
                        address-family $address-family
                    </command-string>
		    <command-string>
                        #if($qppb-policy != null)
                        no table-map $qppb-policy
                    </command-string>
		    <command-string>
                        #if($default-information-originate)
                        no default-information originate
                    </command-string>

                     <!--command-string>no router bgp $as-number</command-string-->		    
                </device-operation>
            </device-operations>
        </operation>
         <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/neighbor/send-community</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNeighborSendCommunity</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($send-community == "true")
                        neighbor $../ip-address send-community both
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNeighborSendCommunity</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($send-community == "true")
                        neighbor $../ip-address send-community both
                        #else if($send-community == "false")
                        no neighbor $../ip-address send-community both
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNeighborSendCommunity</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($send-community == "false")
                        no neighbor $../ip-address send-community both
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
    <operation>
    
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/neighbor/next-hop-self</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNeighborNextHopSelf</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($next-hop-self == "true")
                        neighbor $../ip-address next-hop-self
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNeighborNextHopSelf</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($next-hop-self == "true")
                        neighbor $../ip-address next-hop-self
                        #else if($next-hop-self == "false")
                        no neighbor $../ip-address next-hop-self
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNeighborNextHopSelf</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($send-community == "false")
                        no neighbor $../ip-address next-hop-self
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
         <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/neighbor/soft-reconfiguration</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNeighborSoftConfiguration</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($soft-reconfiguration == "true")
                        neighbor $../ip-address soft-reconfiguration inbound
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNeighborSoftConfiguration</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($soft-reconfiguration == "true")
                        neighbor $../ip-address soft-reconfiguration inbound
                        #else if($soft-reconfiguration == "false")
                        no neighbor $../ip-address soft-reconfiguration inbound
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNeighborSoftConfiguration</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($soft-reconfiguration == "false")
                        no neighbor $../ip-address soft-reconfiguration inbound
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/neighbor/keepalive-interval</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNeighborKeepaliveInterval</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($keepalive-interval != null)
                        neighbor $../ip-address timers $keepalive-interval $../holdtime
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNeighborKeepaliveInterval</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($keepalive-interval != null AND $keepalive-interval != $keepalive-interval.%previous)
                        neighbor $../ip-address timers $keepalive-interval $../holdtime
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNeighborKeepaliveInterval</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($keepalive-interval != null)
                        no neighbor $../ip-address timers $keepalive-interval $../holdtime
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/neighbor/route-reflector-client</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNeighborRouteReflectorClient</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($route-reflector-client == "true")
                        neighbor $../ip-address route-reflector-client
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNeighborRouteReflectorClient</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($route-reflector-client == "true")
                        neighbor $../ip-address route-reflector-client
                        #else if($route-reflector-client == "false")
                        no neighbor $../ip-address route-reflector-client
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNeighborRouteReflectorClient</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($route-reflector-client == "false")
                        no neighbor $../ip-address route-reflector-client
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
        <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/neighbor/out-route-map</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateRouteMapBGPNeighbor</name>
                <type>CREATE</type>
                <command-string>neighbor $../ip-address route-map $out-route-map out</command-string>
                 <command-string>do clear ip bgp * out</command-string>
            </device-operation>
            <device-operation>
                <name>UpdateRouteMapBGPNeighbor</name>
                <type>UPDATE</type>
                <command-string>
                    #if($out-route-map != null)
                    neighbor $../ip-address route-map $out-route-map out
                    #else if($out-route-map == null)
                    no neighbor $../ip-address route-map $out-route-map.%previous out
                </command-string>
                 <command-string>do clear ip bgp * out</command-string>
            </device-operation>
            <device-operation>
                <name>DeleteRouteMapBGPNeighbor</name>
                <type>DELETE</type>
                <command-string>
                    #if($out-route-map.%previous != null)
                    no neighbor $../ip-address route-map $out-route-map.%previous out
                    #else if($out-route-map.%previous == null)
                    no neighbor $../ip-address route-map $out-route-map out
                </command-string>
                 <command-string>do clear ip bgp * out</command-string>
            </device-operation>
        </device-operations>
    </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/neighbor/in-route-map</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInRouteMapBGPNeighbor</name>
                    <type>CREATE</type>
                    <command-string>neighbor $../ip-address route-map $in-route-map in</command-string>
                     <command-string>do clear ip bgp * in</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInRouteMapBGPNeighbor</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($in-route-map != null)
                        neighbor $../ip-address route-map $in-route-map in
                        #else if($in-route-map == null)
                        no neighbor $../ip-address route-map $in-route-map.%previous in
                    </command-string>
                     <command-string>do clear ip bgp * in</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInRouteMapBGPNeighbor</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($in-route-map.%previous != null)
                        no neighbor $../ip-address route-map $in-route-map.%previous in
                        #else if($in-route-map.%previous == null)
                        no neighbor $../ip-address route-map $in-route-map in
                    </command-string>
                     <command-string>do clear ip bgp * in</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/path-limit</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouteMapBGPPathLimit</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../../name != "GLOBAL" AND $../address-family == "ipv4" and $path-limit != null)
                        import path limit $path-limit
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateRouteMapBGPPathLimit</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../../name != "GLOBAL" AND $../address-family == "ipv4" and $path-limit != null)
                        import path limit $path-limit
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouteMapBGPPathLimit</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../../name != "GLOBAL" AND $../address-family == "ipv4" and $path-limit != null)
                        no import path limit $path-limit
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/path-selection</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouteMapBGPPathSelection</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../../name != "GLOBAL" AND $../address-family == "ipv4" and $path-selection != null)
                        import path selection $path-selection
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateRouteMapBGPPathSelection</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../../name != "GLOBAL" AND $../address-family == "ipv4" and $path-selection != null)
                        import path selection $path-selection
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouteMapBGPPathSelection</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../../name != "GLOBAL" AND $../address-family == "ipv4" and $path-selection != null)
                        no import path selection $path-selection
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/neighbor/description</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNeighborDescription</name>
                    <type>CREATE</type>
                    <command-string>neighbor $../ip-address description $description</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNeighborDescription</name>
                    <type>UPDATE</type>
                    <command-string>neighbor $../ip-address description $description</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNeighborDescription</name>
                    <type>DELETE</type>
                    <command-string>no neighbor $../ip-address description $description</command-string>
                </device-operation>
            </device-operations>
        </operation>
    <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/neighbor/advertisement-interval</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNeighborAdvInt</name>
                    <type>CREATE</type>
                    <command-string>neighbor $../ip-address advertisement-interval $advertisement-interval</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNeighborAdvInt</name>
                    <type>UPDATE</type>
                    <command-string>neighbor $../ip-address advertisement-interval $advertisement-interval</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNeighborAdvInt</name>
                    <type>DELETE</type>
                    <command-string>no neighbor $../ip-address advertisement-interval $advertisement-interval</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>

            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/neighbor</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterBGPNeighbor</name>
                    <type>CREATE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>        
                        #if($../../name != "GLOBAL" AND $../address-family == "ipv4")
                        address-family ipv4 vrf $../../name
                        #else if($../../name != "GLOBAL" AND $../address-family != "ipv4")
                        address-family $../address-family vrf $../../name
                        #else if($../../name == "GLOBAL" AND $../address-family == "ipv4-vpnv4")
                        address-family ipv4
                        #else if($../../name == "GLOBAL" AND $../address-family == "ipv4")
                        address-family ipv4
                        #else if($../../name == "GLOBAL" AND $../address-family != null)
                        address-family $../address-family
                    </command-string>           
                    <!-- <command-string>[neighbor $peer-group peer-group]</command-string> -->
                    <command-string>[neighbor $ip-address peer-group $peer-group]</command-string> 
                    <command-string>[neighbor $ip-address remote-as $remote-as]</command-string>
                    <command-string>[neighbor $ip-address local-as $local-as-number]</command-string>
                    <command-string>[neighbor $ip-address description $description]</command-string>
                    <command-string>[neighbor $ip-address password $password]</command-string>
                    <command-string>[neighbor $ip-address timers $keepalive-interval $holdtime]</command-string>
                    <command-string>[neighbor $ip-address advertisement-interval $advertisement-interval]</command-string>
                    <command-string>[neighbor $ip-address ebgp-multihop $ebgp-multihop]</command-string>
                    <command-string>[neighbor $ip-address update-source $local-interface]</command-string>                    
                    <command-string>
                        #if($peer-group == null AND $send-community == "true")
                        [neighbor $ip-address send-community both]
                    </command-string>
                    <command-string>neighbor $ip-address activate</command-string>
                    <command-string>
                        #if($as-override)
                        neighbor $ip-address as-override
                    </command-string>
                    <command-string>
                        #if($next-hop-self)
                        neighbor $ip-address next-hop-self
                    </command-string>
                    <command-string>
                        #if($soft-reconfiguration)
                        neighbor $ip-address soft-reconfiguration inbound
                    </command-string>
                    <command-string>
                        #if($route-reflector-client)
                        neighbor $ip-address route-reflector-client
                    </command-string>
                    <command-string>
                        #if($next-hop-unchanged)
                        neighbor $ip-address next-hop-unchanged
                    </command-string>
                    <command-string>
                        #if($default-originate)
                        neighbor $ip-address default-originate
                    </command-string>
                    <command-string>
                        #if($default-originate == "true" AND $def-originate-route-map != null)
                        neighbor $ip-address default-originate route-map $def-originate-route-map
                    </command-string>
                    <command-string>[neighbor $ip-address weight $weight]</command-string>
                    <command-string>
                        #if($allowas-in == "true" AND $allowas_in_value == null)
                        neighbor $ip-address allowas-in
                        #if($allowas-in == "true" AND $allowas_in_value != null)
                        neighbor $ip-address allowas-in $allowas_in_value
                    </command-string>
                    <command-string>[neighbor $ip-address maximum-prefix $maximum-prefix]</command-string>
                    <command-string>[neighbor $ip-address route-map $in-route-map in]</command-string>
                    <command-string>[neighbor $ip-address route-map $out-route-map out]</command-string>
		    <command-string>
                        #if($shut == "true")
                        neighbor $ip-address shutdown
			#else if($shut == "false")
                        no neighbor $ip-address shutdown
                    </command-string>
                    <command-string>exit</command-string>
                    <command-string>
                        #if($../../name == "GLOBAL" AND $../address-family == "ipv4-vpnv4")
                        address-family vpnv4 unicast
                    </command-string>
                    <!--command-string>
                        #if($../../name == "GLOBAL" AND $../address-family == "ipv4-vpnv4")
                        neighbor $ip-address activate
                    </command-string-->
		    <command-string>
                        #if($../address-family == "ipv4-vpnv4")
                        neighbor $ip-address activate
                    </command-string>
                    <command-string>
                        #if($bfd-fall-over == "true")
                        neighbor $ip-address fall-over bfd
                    </command-string>
                    <!--command-string>
                        #if($route-map != null)
                        address-family ipv4
                    </command-string-->
                    <command-string>
                        #if($route-map != null AND $peer-group != null)
                        neighbor $peer-group route-map $route-map $route-map-type
                    </command-string>
                    <!--command-string>
                        #if($route-map != null)
                        exit-address-family
                    </command-string-->
                </device-operation>
                <device-operation>
                    <name>UpdateRouterBGPNeighbor</name>
                    <type>UPDATE</type>
                    <command-string>router bgp $../as-number</command-string>
                   <command-string>
                        #if($../../name != "GLOBAL" AND $../address-family == "ipv4")
                        address-family ipv4 vrf $../../name
                        #else if($../../name != "GLOBAL" AND $../address-family != "ipv4")
                        address-family $../address-family vrf $../../name
                        #else if($../../name == "GLOBAL" AND $../address-family == "ipv4")
                        address-family ipv4
                        #else if($../../name == "GLOBAL" AND $../address-family != null)
                        address-family $../address-family                    
                    </command-string>
                    <!--command-string>
                        #if($../../name == "GLOBAL" AND $../address-family == "ipv4")
                        address-family ipv4
                        #else if($../../name == "GLOBAL" AND $../address-family != "ipv4")
                        address-family $../address-family
                    </command-string-->
                    <command-string>[neighbor $ip-address remote-as $remote-as]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterBGPNeighbor</name>
                    <type>DELETE</type>
                    <command-string>router bgp $../as-number</command-string>
		    <command-string>                        
                        #if($../../name == "GLOBAL" AND $../address-family != "ipv4")
                        no neighbor $ip-address
                    </command-string>
                    <command-string>
                        #if($../../name != "GLOBAL" AND $../address-family == "ipv4")
                        no address-family ipv4 vrf $../../name
                        #else if($../../name != "GLOBAL" AND $../address-family != "ipv4")
                        no address-family $../address-family vrf $../../name
                    </command-string>
                    <command-string>
                        #if($../../name == "GLOBAL" AND $../address-family == "ipv4")
                        address-family ipv4
                        #else if($../../name == "GLOBAL" AND $../address-family != "ipv4")
                        address-family $../address-family
                    </command-string>
                    <command-string>
                        #if($bfd-fall-over == "true")
                        no neighbor $ip-address fall-over bfd
                    </command-string>
                    <command-string>
			#if($../../name == "GLOBAL" AND $../address-family == "ipv4")
                        no neighbor $ip-address
		    </command-string>
                </device-operation>
            </device-operations>
        </operation>
         <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/neighbor/ebgp-multihop</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNeighboreBGPMultihop</name>
                    <type>CREATE</type>
                    <command-string>
            #if($ebgp-multihop != null)
                        neighbor $../ip-address ebgp-multihop $ebgp-multihop
            </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNeighboreBGPMultihop</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($ebgp-multihop != null)
                        neighbor $../ip-address ebgp-multihop $ebgp-multihop
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNeighboreBGPMultihop</name>
                    <type>DELETE</type>
                    <command-string>
                         #if($ebgp-multihop != null)
                        no neighbor $../ip-address ebgp-multihop $ebgp-multihop
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/neighbor/local-interface</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNeighborUpdateSource</name>
                    <type>CREATE</type>
                    <command-string>
            #if($local-interface != null)
                        neighbor $../ip-address update-source $local-interface
            </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNeighborUpdateSource</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($local-interface != null)
                        neighbor $../ip-address update-source $local-interface
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNeighborUpdateSource</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($local-interface != null)
                        no neighbor $../ip-address update-source $local-interface
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/neighbor/shut</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNeighborShut</name>
                    <type>CREATE</type>
                    <command-string>
			#if($shut == "true")
                        neighbor $../ip-address shutdown
			#else if($shut == "false")
                        no neighbor $../ip-address shutdown
		    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNeighborShut</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($shut == "true")
                        neighbor $../ip-address shutdown
			#else if($shut == "false")
                        no neighbor $../ip-address shutdown
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNeighborShut</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($shut == "true")
                        neighbor $../ip-address shutdown
			#else if($shut == "false")
                        no neighbor $../ip-address shutdown
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/neighbor/bfd-fall-over</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNeighborBfd</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($bfd-fall-over == "true")
                        neighbor $../ip-address fall-over bfd
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNeighborBfd</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($bfd-fall-over == "true")
                        neighbor $../ip-address fall-over bfd
                        #else if($bfd-fall-over == "false")
                        no neighbor $../ip-address fall-over bfd
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNeighborBfd</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($bfd-fall-over == "false")
                        no neighbor $../ip-address fall-over bfd
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

	<operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/listen-range</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateBGPListenRange</name>
                    <type>CREATE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>[bgp listen range $cidr peer-group $name]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateBGPListenRange</name>
                    <type>UPDATE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>[bgp listen range $cidr peer-group $name]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteBGPListenRange</name>
                    <type>DELETE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>[no bgp listen range $cidr peer-group $name]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/peer-group</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterBGPPeerGroup</name>
                    <type>CREATE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>[bgp listen range $cidr peer-group $name]</command-string>
                    <command-string>[neighbor $name peer-group]</command-string>
                    <command-string>[neighbor $name remote-as $remote-as]</command-string>
                    <command-string>[neighbor $name local-as $local-as-number]</command-string>
                    <command-string>[neighbor $name description $description]</command-string>
                    <command-string>[neighbor $name password $password]</command-string>
                    <command-string>[neighbor $name timers $keepalive-interval $holdtime]</command-string>
                    <command-string>[neighbor $name ebgp-multihop $ebgp-multihop]</command-string>
                    <command-string>[neighbor $name update-source $local-interface]</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL" AND $../address-family == "ipv4-vpnv4")
                        address-family ipv4 vrf $../../name
                        #else if($../../name != "GLOBAL")
                        address-family $../address-family vrf $../../name
                        #else if($../../name == "GLOBAL" AND $../address-family == "ipv4-vpnv4")
                        address-family ipv4
                        #else
                        address-family $../address-family
                    </command-string>
                   
                    <command-string>neighbor $name activate</command-string>
                    <command-string>
                        #if($send-community)
                        neighbor $name send-community both
                    </command-string>
                    <command-string>
                        #if($next-hop-unchanged)
                        neighbor $name next-hop-unchanged
                    </command-string>
                    <command-string>
                        #if($next-hop-self)
                        neighbor $name next-hop-self
                    </command-string>
                    <command-string>
                        #if($as-override)
                        neighbor $name as-override
                    </command-string>
                    <command-string>
                        #if($soft-reconfiguration)
                        neighbor $name soft-reconfiguration inbound
                    </command-string>
                    <command-string>
                        #if($route-reflector-client)
                        neighbor $name route-reflector-client
                    </command-string>
                    <command-string>
                        #if($default-originate)
                        neighbor $name default-originate
                    </command-string>
                    <command-string>
                        #if($default-originate AND $def-originate-route-map != null)
                        neighbor $name default-originate route-map $def-originate-route-map
                    </command-string>
                    <command-string>[neighbor $name weight $weight]</command-string>
                    <command-string>
                        #if($allowas-in == "true" AND $allowas_in_value == null)
                        neighbor $name allowas-in
                        #if($allowas-in == "true" AND $allowas_in_value != null)
                        neighbor $name allowas-in $allowas_in_value
                    </command-string>
                    <command-string>[neighbor $name maximum-prefix $maximum-prefix]</command-string>
                    <command-string>[neighbor $name route-map $in-route-map in]</command-string>
                    <command-string>[neighbor $name route-map $out-route-map out]</command-string>
                    <command-string>
			#if($../address-family != null)
			exit-address-family
		    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterBGPPeerGroup</name>
                    <type>DELETE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>[no bgp listen range $cidr peer-group $name]</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL" AND $../address-family == "ipv4-vpnv4")
                        address-family ipv4 vrf $../../name
                        #else if($../../name != "GLOBAL")
                        address-family $../address-family vrf $../../name
                        #else if($../../name == "GLOBAL" AND $../address-family == "ipv4-vpnv4")
                        address-family ipv4
                        #else
                        address-family $../address-family
                    </command-string>
                    <command-string>[no neighbor $name peer-group]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/aggregate-summary-network</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterBGPAggregateSummaryNetwork</name>
                    <type>CREATE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL")
                        address-family $../address-family vrf $../../name
                        #else
                        address-family $../address-family
                    </command-string>
                    <command-string>
                        #if ($aggregate-summary-only != null AND $aggregate-summary-only)
                        aggregate-address $network summary-only
                        #else
                        aggregate-address $network
                    </command-string>
                    <command-string>
			#if($../address-family != null)
			exit-address-family
		    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterBGPAggregateSummaryNetwork</name>
                    <type>DELETE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL")
                        address-family $../address-family vrf $../../name
                        #else
                        address-family $../address-family
                    </command-string>
                    <command-string>
                        #if ($aggregate-summary-only != null AND $aggregate-summary-only)
                        no aggregate-address $network summary-only
                        #else
                        no aggregate-address $network
                    </command-string>
                    <command-string>
			#if($../address-family != null)
			exit-address-family
		    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/qppb-policy</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>                
                <device-operation>
                    <name>CreateRouterBGPQppbPolicy</name>
                    <type>CREATE</type>                                        
		    <command-string>
                        #if($qppb-policy != null)
                        table-map $qppb-policy
                    </command-string>
                </device-operation>
		<device-operation>
                    <name>UpdateRouterBGPQppbPolicy</name>
                    <type>UPDATE</type>                                        
		        <command-string>
                        #if($qppb-policy != null)
                        table-map $qppb-policy
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterBGPQppbPolicy</name>
                    <type>DELETE</type>                                
		    <command-string>
                        #if($qppb-policy != null)
                        no table-map $qppb-policy
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/network</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseRouterBGPNetwork</name>
                    <type>PARSE</type>
                    <command-string>network $ip-address route-map $route-map</command-string>
                </device-operation>
                <device-operation>
                    <name>CreateRouterBGPNetwork</name>
                    <type>CREATE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL" AND $address-family == "ipv4")
                        address-family ipv4 vrf $../../name
                        #else if($../../name != "GLOBAL")
                        address-family $../address-family vrf $../../name
                        #else
                        address-family $../address-family
                    </command-string>
                    <command-string>
                        #if($route-map != null)
                        network $ip-address [mask $netmask] route-map $route-map
                        #else
                        network $ip-address [mask $netmask]
                    </command-string>		    
                </device-operation>
                <device-operation>
                    <name>UpdateRouterBGPNetwork</name>
                    <type>UPDATE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL" AND $address-family == "ipv4")
                        address-family ipv4 vrf $../../name
                        #else if($../../name != "GLOBAL")
                        address-family $../address-family vrf $../../name
                        #else
                        address-family $../address-family
                    </command-string>
                    <command-string>
                        #if($route-map != null)
                        no network $ip-address.%previous [mask $netmask.%previous] route-map $route-map
                        network $ip-address [mask $netmask] route-map $route-map
                        #else
                        no network $ip-address.%previous [mask $netmask.%previous]
                        network $ip-address [mask $netmask]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterBGPNetwork</name>
                    <type>DELETE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL" AND $address-family == "ipv4")
                        address-family ipv4 vrf $../../name
                        #else if($../../name != "GLOBAL")
                        address-family $../address-family vrf $../../name
                        #else
                        address-family $../address-family
                    </command-string>
                    <command-string>
                        #if($route-map != null)
                        no network $ip-address [mask $netmask] route-map $route-map
                        #else
                        no network $ip-address [mask $netmask]
                    </command-string>		    
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-bgp/redistribute</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
		<device-operation>
                    <name>ParseRouterBGPRedistribute</name>
                    <type>PARSE</type>
                    <command-string>
                        redistribute $protocol $ospf-process-id match internal [external $ospf-external1] [external $ospf-external2] [route-map $route-map] [metric $metric]
                    </command-string>
                    <command-string>
                        redistribute $protocol $ospf-process-id match internal [external $ospf-external1] [route-map $route-map] [metric $metric]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateRouterBGPRedistribute</name>
                    <type>CREATE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL" AND $../address-family == "ipv4")
                        address-family ipv4 vrf $../../name
                        #else if($../address-family == "ipv4")
                        address-family ipv4
                    </command-string>
                    <command-string>
			#if($protocol == 'eigrp' AND $route-map != null)
                        redistribute $protocol $eigrp-process-id route-map $route-map
			#else if($protocol == 'eigrp' AND $route-map == null)
                        redistribute $protocol $eigrp-process-id
                        #else if($protocol != 'ospf' AND $route-map != null AND $metric != null)
                        redistribute $protocol route-map $route-map metric $metric
                        #else if($protocol != 'ospf' AND $route-map == null AND $metric != null)
                        redistribute $protocol metric $metric
                        #else if($protocol != 'ospf' AND $route-map != null AND $metric == null)
                        redistribute $protocol route-map $route-map
                        #else if($protocol == "static-connected")
                        redistribute connected                        
                        #else if($protocol == 'ospf' AND $ospf-internal == 'true')
                        redistribute $protocol $ospf-process-id match internal [external $ospf-external1] [external $ospf-external2] [metric $metric] [route-map $route-map]
			#else if($protocol == 'ospf' AND $ospf-internal != 'true' AND ($ospf-external1 != null OR $ospf-external2 != null))
                        redistribute $protocol $ospf-process-id match [external $ospf-external1] [external $ospf-external2] [metric $metric] [route-map $route-map]
			#else if($protocol == 'ospf' AND $ospf-internal != 'true')
                        redistribute $protocol $ospf-process-id [metric $metric] [route-map $route-map]                       
                    </command-string>
                </device-operation>
		<device-operation>
                    <name>UpdateRouterBGPRedistribute</name>
                    <type>UPDATE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL" AND $../address-family == "ipv4")
                        address-family ipv4 vrf $../../name
                        #else if($../address-family == "ipv4")
                        address-family ipv4
                    </command-string>
                    <command-string>
                        #if($protocol == 'eigrp' AND $route-map != null)
                        redistribute $protocol $eigrp-process-id route-map $route-map
			#else if($protocol == 'eigrp' AND $route-map == null)
                        redistribute $protocol $eigrp-process-id
                        #else if($protocol != 'ospf' AND $route-map != null AND $metric != null)
                        redistribute $protocol route-map $route-map metric $metric
                        #else if($protocol != 'ospf' AND $route-map == null AND $metric != null)
                        redistribute $protocol metric $metric
                        #else if($protocol != 'ospf' AND $route-map != null AND $metric == null)
                        redistribute $protocol route-map $route-map
                        #else if($protocol == "static-connected")
                        redistribute connected                        
                        #else if($protocol == 'ospf' AND $ospf-internal == 'true')
                        redistribute $protocol $ospf-process-id match internal [external $ospf-external1] [external $ospf-external2] [metric $metric] [route-map $route-map]
			#else if($protocol == 'ospf' AND $ospf-internal != 'true' AND ($ospf-external1 != null OR $ospf-external2 != null))
                        redistribute $protocol $ospf-process-id match [external $ospf-external1] [external $ospf-external2] [metric $metric] [route-map $route-map]
			#else if($protocol == 'ospf' AND $ospf-internal != 'true')
                        redistribute $protocol $ospf-process-id [metric $metric] [route-map $route-map]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterBGPRedistribute</name>
                    <type>DELETE</type>
                    <command-string>router bgp $../as-number</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL")
                        address-family ipv4 vrf $../../name
                        #else if($../address-family == "ipv4")
                        address-family ipv4
                    </command-string>
                    <command-string>
                        #if($protocol == 'eigrp' AND $route-map != null)
                        no redistribute $protocol $eigrp-process-id route-map $route-map
			#else if($protocol == 'eigrp' AND $route-map == null)
                        no redistribute $protocol $eigrp-process-id
                        #else if($protocol != 'ospf' AND $route-map != null AND $metric != null)
                        no redistribute $protocol route-map $route-map metric $metric
                        #else if($protocol != 'ospf' AND $route-map == null AND $metric != null)
                        no redistribute $protocol metric $metric
                        #else if($protocol != 'ospf' AND $route-map != null AND $metric == null)
                        no redistribute $protocol route-map $route-map
                        #else if($protocol == "static-connected")
                        no redistribute connected                        
                        #else if($protocol == 'ospf' AND $ospf-internal == 'true')
                        no redistribute $protocol $ospf-process-id match internal [external $ospf-external1] [external $ospf-external2] [metric $metric] [route-map $route-map]
			#else if($protocol == 'ospf' AND $ospf-internal != 'true' AND ($ospf-external1 != null OR $ospf-external2 != null))
                        no redistribute $protocol $ospf-process-id match [external $ospf-external1] [external $ospf-external2] [metric $metric] [route-map $route-map]
			#else if($protocol == 'ospf' AND $ospf-internal != 'true')
                        no redistribute $protocol $ospf-process-id [metric $metric] [route-map $route-map]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-ospf</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterOspf</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../name != "GLOBAL")
                        router ospf $process-id vrf $../name
                        #else
                        router ospf $process-id
                    </command-string>
                    <command-string>
                        #if($vrf-lite == 'true')
                        capability vrf-lite
                    </command-string>
                    <command-string>
                        #if($router-id != null)
                        router-id $router-id
                    </command-string>
		    <command-string>
                        #if($reference-bandwidth != null)
                        auto-cost reference-bandwidth $reference-bandwidth
                    </command-string>
		    <command-string>snmp context $context [community $community] [$access] [$acl-name]</command-string>
		    <command-string>maximum-paths $maximum-paths</command-string>
                    <!--command-string>
			#if($default-information == 'true')
			default-information originate [metric $default-inf-value] [metric-type $default-inf-value1] [route-map $default-inf-value2]
		    </command-string-->
		    <command-string>distribute-list route-map $dis-list-route-map $dis-list-route-update</command-string>
                </device-operation>
	        <device-operation>
                    <name>UpdateRouterOspf</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../name != "GLOBAL")
                        router ospf $process-id vrf $../name
                        #else
                        router ospf $process-id
                    </command-string>
                    <command-string>
                        #if($vrf-lite == 'true')
                        capability vrf-lite
                    </command-string>
                    <command-string>
                        #if($router-id != null)
                        router-id $router-id
                    </command-string>
		    <command-string>
                        #if($reference-bandwidth != null)
                        auto-cost reference-bandwidth $reference-bandwidth
                    </command-string>
		    <command-string>snmp context $context [community $community] [$access] [$acl-name]</command-string>
		    <command-string>maximum-paths $maximum-paths</command-string>
                    <!--command-string>
			#if($default-information == 'true')
			default-information originate [metric $default-inf-value] [metric-type $default-inf-value1] [route-map $default-inf-value2]
		    </command-string-->
		    <command-string>distribute-list route-map $dis-list-route-map $dis-list-route-update</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterOspf</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../name != "GLOBAL")
                        no router ospf $process-id vrf $../name
                        #else
                        no router ospf $process-id
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-ospf/neighbor</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterOspfNeighbor</name>
                    <type>CREATE</type>
                    <command-string>router ospf $../process-id</command-string>
                    <command-string>neighbor $ip-address</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterOspfNeighbor</name>
                    <type>DELETE</type>
                    <command-string>router ospf $../process-id</command-string>
                    <command-string>no neighbor $ip-address</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-ospf/interface</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterOspfInterface</name>
                    <type>CREATE</type>
                    <command-string>interface $interface-name</command-string>
                    <command-string>
                        #if($auth-type != null AND $auth-type == 'md5')
                        ip ospf authentication message-digest
                        #else if ($auth-type != null AND $auth-type == 'none')
                        ip ospf authentication none
                    </command-string>
                    <command-string>
                        #if($md5-key != null)
                        ip ospf authentication-key $md5-key
                    </command-string>
                    <command-string>
                        #if($network-type != null)
                        ip ospf network $network-type
                    </command-string>
                    <command-string>
                        #if($priority != null)
                        ip ospf priority $priority
                    </command-string>
                    <command-string>
                        #if($cost != null)
                        ip ospf cost $cost
                    </command-string>
                    <command-string>
                        #if($bfd != null AND $bfd == 'enable')
                        ip ospf bfd
                        #else if($bfd != null AND $bfd == 'disable')
                        ip ospf bfd $bfd
                    </command-string>
                    <command-string>
                        #if($ignore-mtu-check != null AND $ignore-mtu-check == 'true')
                        ip ospf mtu-ignore
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterOspfInterface</name>
                    <type>DELETE</type>
                    <command-string>interface $interface-name</command-string>
                    <command-string>
                        #if($auth-type != null AND $auth-type == 'md5')
                        no ip ospf authentication message-digest
                        #else if ($auth-type != null AND $auth-type == 'none')
                        no ip ospf authentication none
                    </command-string>
                    <command-string>
                        #if($md5-key != null)
                        no ip ospf authentication-key $md5-key
                    </command-string>
                    <command-string>
                        #if($network-type != null)
                        no ip ospf network $network-type
                    </command-string>
                    <command-string>
                        #if($priority != null)
                        no ip ospf priority $priority
                    </command-string>
                    <command-string>
                        #if($cost != null)
                        no ip ospf cost $cost
                    </command-string>
                    <command-string>
                        #if($bfd != null AND $bfd == 'enable')
                        no ip ospf bfd
                        #else if($bfd != null AND $bfd == 'disable')
                        no ip ospf bfd $bfd
                    </command-string>
                    <command-string>
                        #if($ignore-mtu-check != null AND $ignore-mtu-check == 'true')
                        no ip ospf mtu-ignore
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-ospf/network</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterOspfNetwork</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../../name != "GLOBAL")
                        router ospf $../process-id vrf $../../name
                        #else
                        router ospf $../process-id
                    </command-string>		    
		    <command-string>
			#if($nssa == 'true' AND $translate == 'true')
			area $area nssa translate type7 suppress-fa
			#else if($nssa == 'true')
			area $area nssa
		    </command-string>
                    <command-string>network $ip-address $wild-card area $area</command-string>
                </device-operation>
                 <device-operation>
                    <name>UpdateRouterOspfNetwork</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../../name != "GLOBAL")
                        router ospf $../process-id vrf $../../name
                        #else
                        router ospf $../process-id
                    </command-string>
                    <command-string>
                        #if($nssa == 'true' AND $translate == 'true')
                        area $area nssa translate type7 suppress-fa
                        #else if($nssa == 'true')
                        area $area nssa
                        #else if($nssa == 'false' AND $translate == 'false')
                        no area $area nssa translate type7 suppress-fa
                        #else if ($nssa == 'false')
                        no area $area nssa
                    </command-string>
                    <command-string>network $ip-address $wild-card area $area</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterOspfNetwork</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../../name != "GLOBAL")
                        router ospf $../process-id vrf $../../name
                        #else
                        router ospf $../process-id
                    </command-string>		    
                    <command-string>no network $ip-address $wild-card area $area</command-string>
		    <command-string>
			#if($nssa == 'true' AND $translate == 'true')
			no area $area nssa translate type7 suppress-fa
			#else if($nssa == 'true')
			no area $area nssa
		    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-ospf/redistribute/ospf-redistribute</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
	    <device-operation>
                    <name>ParseRouterOspfRedistribute</name>
                    <type>PARSE</type>
                    <command-string>
                        redistribute bgp $bgp-as-number [metric $value1] subnets [tag $tag] [route-map $route-map]
                    </command-string>
                    <command-string>
                        redistribute bgp $bgp-as-number [metric $value1] [metric-type $value2] subnets [tag $tag] [route-map $route-map]
                    </command-string>
                    <command-string>
                        redistribute bgp $bgp-as-number subnets [tag $tag] [route-map $route-map]
                    </command-string>
                    <command-string>
                        redistribute ospf $process-id-entry [metric $value1] subnets [tag $tag] [route-map $route-map]
                    </command-string>
                    <command-string>
                        redistribute ospf $process-id-entry [metric $value1] [metric-type $value2] subnets [tag $tag] [route-map $route-map]
                    </command-string>
                    <command-string>
                        redistribute ospf $process-id-entry subnets [tag $tag] [route-map $route-map]
                    </command-string>
	        <command-string>
                        redistribute eigrp $eigrp-as-number [metric $value1] subnets [tag $tag] [route-map $route-map]
                    </command-string>
                    <command-string>
                        redistribute eigrp $eigrp-as-number [metric $value1] [metric-type $value2] subnets [tag $tag] [route-map $route-map]
                    </command-string>
                    <command-string>
                        redistribute eigrp $eigrp-as-number subnets [tag $tag] [route-map $route-map]
                    </command-string>
                    <command-string>
                        redistribute $protocol subnets [route-map $route-map]
                    </command-string>
                    <command-string>
                        redistribute $protocol subnets tag $tag [route-map $route-map]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateRouterOspfRedistribute</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../../../name != "GLOBAL")
                        router ospf $../../process-id vrf $../../../name
                        #else
                        router ospf $../../process-id
                    </command-string>
                    <command-string>
                        #if($protocol == "bgp" AND $bgp-as-number != null)
                        redistribute bgp $bgp-as-number [metric $value1] [metric-type $value2] subnets [tag $tag] [route-map $route-map]
		#else if($protocol == "eigrp" AND $eigrp-as-number != null)
                        redistribute eigrp $eigrp-as-number [metric $value1] [metric-type $value2] subnets [tag $tag] [route-map $route-map]
			#else if($protocol == "ospf")
		        redistribute ospf $process-id-entry [metric $value1] [metric-type $value2] subnets [tag $tag] [route-map $route-map]
                        #else if(($protocol == "static" OR $protocol == "connected") AND $route-map != null)
                        redistribute $protocol subnets route-map $route-map
		        #else
                        redistribute $protocol [metric $value1] [metric-type $value2] subnets [tag $tag] [route-map $route-map]
                    </command-string>              
                    <command-string>
                        #if($protocol == "bgp" AND $bgp-as-number != null AND $nssa-only == 'true')
                        redistribute bgp $bgp-as-number nssa-only
                        #else if($protocol != "rip" AND $nssa-only != null AND $nssa-only == 'true')
                        redistribute $protocol nssa-only
                    </command-string>
                </device-operation>
		<device-operation>
                    <name>UpdateRouterOspfRedistribute</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../../../name != "GLOBAL")
                        router ospf $../../process-id vrf $../../../name
                        #else
                        router ospf $../../process-id
                    </command-string>
                    <command-string>
                        #if($protocol == "bgp" AND $bgp-as-number != null)
                        redistribute bgp $bgp-as-number [metric $value1] [metric-type $value2] subnets [tag $tag] [route-map $route-map]
		#else if($protocol == "eigrp" AND $eigrp-as-number != null)
                        redistribute eigrp $eigrp-as-number [metric $value1] [metric-type $value2] subnets [tag $tag] [route-map $route-map]
			#else if($protocol == "ospf")
		        redistribute ospf $process-id-entry [metric $value1] [metric-type $value2] subnets [tag $tag] [route-map $route-map]
                        #else if(($protocol == "static" OR $protocol == "connected") AND $route-map != null)
                        redistribute $protocol subnets route-map $route-map
		        #else
                        redistribute $protocol [metric $value1] [metric-type $value2] subnets [tag $tag] [route-map $route-map]
                    </command-string>              
                    <command-string>
                        #if($protocol == "bgp" AND $bgp-as-number != null AND $nssa-only == 'true')
                        redistribute bgp $bgp-as-number nssa-only
                        #else if($protocol != "rip" AND $nssa-only != null AND $nssa-only == 'true')
                        redistribute $protocol nssa-only
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterOspfRedistribute</name>
                    <type>DELETE</type>
                    <command-string>
			#if($../../../name != "GLOBAL")
                        router ospf $../../process-id vrf $../../../name
                        #else
                        router ospf $../../process-id                        
                    </command-string>
                    <command-string>
                        #if($protocol == "bgp" AND $bgp-as-number != null)
                        no redistribute bgp $bgp-as-number
		#else if($protocol == "eigrp" AND $eigrp-as-number != null)
                        no redistribute eigrp $eigrp-as-number
			#else if($protocol == "ospf")
		        no redistribute ospf $process-id-entry
                        #else
                        no redistribute $protocol
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
       <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-ospf/inject-default-route</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseRouterOspfInjectDefaultRoute</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($always == 'true' AND $metric != null AND $metric-type !=null AND route-map != null)
                        default-information originate always metric $metric metric-type $metric-type route-map $route-map
                    </command-string>
                     <command-string>
                        #if($always == 'false' AND $metric != null AND $metric-type !=null AND route-map != null)
                        default-information originate metric $metric metric-type $metric-type route-map $route-map
                    </command-string>
                    <command-string>
                        #if($always == 'true' AND $metric == null AND $metric-type == null AND route-map != null)
                        default-information originate always route-map $route-map
                    </command-string>
                     <command-string>
                        #if($always == 'true' AND $metric == null AND $metric-type == null AND route-map != null)
                        default-information originate route-map $route-map
                    </command-string>
                     <command-string>
                        #if($always == 'true' AND $metric != null AND $metric-type == null AND route-map == null)
                        default-information originate always metric $metric
                    </command-string>
                    <command-string>
                        #if($always == 'true' AND $metric != null AND $metric-type == null AND route-map != null)
                        default-information originate always metric $metric route-map $route-map
                    </command-string>
                    <command-string>
                        #if($always == 'false' AND $metric != null AND $metric-type == null AND route-map == null)
                        default-information originate metric $metric
                    </command-string>
                    <command-string>
                        #if($always == 'false' AND $metric != null AND $metric-type == null AND route-map != null)
                        default-information originate metric $metric route-map $route-map
                    </command-string>
                    <command-string>
                        #if($always == 'true' AND $metric == null AND $metric-type != null AND route-map == null)
                        default-information originate always metric-type $metric-type
                    </command-string>
                    <command-string>
                        #if($always == 'true' AND $metric == null AND $metric-type != null AND route-map != null)
                        default-information originate always metric-type $metric-type route-map $route-map
                    </command-string>
                    <command-string>
                        #if($always == 'false' AND $metric == null AND $metric-type != null AND route-map == null)
                        default-information originate metric-type $metric-type
                    </command-string>
                    <command-string>
                        #if($always == 'false' AND $metric == null AND $metric-type != null AND route-map != null)
                        default-information originate metric-type $metric-type route-map $route-map
                    </command-string>
                </device-operation>
               <device-operation>
                    <name>CreateRouterOspfInjectDefaultRoute</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../../name != "GLOBAL")
                        router ospf $../process-id vrf $../../name
                        #else
                        router ospf $../process-id
                    </command-string>
                    <command-string>
                        #if ($always == 'true')
                        default-information originate always [metric $metric] [metric-type $metric-type] [route-map $route-map]
                    </command-string>
                    <command-string>
                        #if ($always == 'false' OR $always == null)
                        default-information originate [metric $metric] [metric-type $metric-type] [route-map $route-map]
                    </command-string>
                    
                </device-operation>
                <device-operation>
                    <name>DeleteRouterOspfInjectDefaultRoute</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../../name != "GLOBAL")
                        router ospf $../process-id vrf $../../name
                        #else
                        router ospf $../process-id
                    </command-string>
                     <command-string>
                        #if ($always == 'true')
                        no default-information originate always [metric $metric] [metric-type $metric-type] [route-map $route-map]
                    </command-string>
                    <command-string>
                        #if ($always == 'false' OR $always == null)
                        no default-information originate [metric $metric] [metric-type $metric-type] [route-map $route-map]
                    </command-string>
                    
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-ospf/summary</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterOspfSummary</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../../name != "GLOBAL")
                        router ospf $../process-id vrf $../../name
                        #else
                        router ospf $../process-id
                    </command-string>
                    <command-string>
                        #if ($not-advertise != null AND $not-advertise == 'true')
                        summary $ip-address $netmask not-advertise
                    </command-string>
                    <command-string>
                        #if ($nssa-only != null AND $nssa-only == 'true')
                        summary $ip-address $netmask nssa-only
                    </command-string>
                    <command-string>
                        #if ($tag != null)
                        summary $ip-address $netmask tag $tag
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterOspfSummary</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../../name != "GLOBAL")
                        router ospf $../process-id vrf $../../name
                        #else
                        router ospf $../process-id
                    </command-string>
                    <command-string>
                        #if ($not-advertise != null AND $not-advertise == 'true')
                        no summary $ip-address $netmask not-advertise
                    </command-string>
                    <command-string>
                        #if ($nssa-only != null AND $nssa-only == 'true')
                        no summary $ip-address $netmask nssa-only
                    </command-string>
                    <command-string>
                        #if ($tag != null)
                        no summary $ip-address $netmask tag $tag
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-ospf/passive-interface</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterOspfPassiveInterface</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../../name != "GLOBAL" AND ($passive-interface != null OR $no-passive-interface-name != null OR $loopback-passive-interface-name != null))
                        router ospf $../process-id vrf $../../name
                        #else if($passive-interface != null OR $no-passive-interface-name != null OR $loopback-passive-interface-name != null)
                        router ospf $../process-id
                    </command-string>
                    <command-string>
                        #if ($passive-interface-default != null AND $passive-interface-default == 'true')
                        passive-interface default
                    </command-string>
                    <command-string>
                        #if ($no-passive-interface-name != null)
                        no passive-interface $no-passive-interface-name
                    </command-string>
                    <command-string>
                        #if ($loopback-passive-interface-name != null)
                        passive-interface $loopback-passive-interface-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterOspfPassiveInterface</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../../name != "GLOBAL" AND ($passive-interface != null OR $no-passive-interface-name != null OR $loopback-passive-interface-name != null))
                        router ospf $../process-id vrf $../../name
                        #else if($passive-interface != null OR $no-passive-interface-name != null OR $loopback-passive-interface-name != null)
                        router ospf $../process-id
                    </command-string>
                    <command-string>
                        #if ($no-passive-interface-name != null)
                        passive-interface $no-passive-interface-name
                    </command-string>
                    <command-string>
                        #if ($passive-interface != null AND $passive-interface == 'true')
                        no passive-interface default
                    </command-string>
                    <command-string>
                        #if ($loopback-passive-interface-name != null)
                        no passive-interface $loopback-passive-interface-name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
       
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/mpls</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateMpls</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../name == "GLOBAL")
                        mpls ip
                    </command-string>
                    <command-string>
                        #if($../name == "GLOBAL")
                        mpls label protocol ldp
                    </command-string>
                    <command-string>
                        #if($../name == "GLOBAL")
                        mpls ldp router-id $loopback-interface
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteMpls</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../name == "GLOBAL")
                        no mpls ldp router-id $loopback-interface
                    </command-string>
                    <command-string>
                        #if($../name == "GLOBAL")
                        no mpls label protocol ldp
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        
         <operation>
            <target>/controller:devices/device/l3features:ip-prefixlist-list/ip-prefixlist</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseIpPrefixList</name>
                    <type>PARSE</type>
                    <command-string>
                        #if($rule-num == null AND $compare == null)
                        ip prefix-list $name $condition $subnet
                        #else if($rule-num == null AND $compare != null)
                        ip prefix-list $name $condition $subnet $compare $num
                        #else if($rule-num != null AND $compare == null)
                        ip prefix-list $name seq $rule-num $condition $subnet
                        #else if($rule-num != null AND $compare != null)
                        ip prefix-list $name seq $rule-num $condition $subnet $compare $num
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:ip-prefixlist-list/ip-prefixlist/ip-prefixlist-entries/ip-prefixlist-entry</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateIpPrefixListEntry</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($rule-num == null AND $compare == null)
                        ip prefix-list $../../name $condition $subnet
                        #else if($rule-num == null AND $compare != null)
                        ip prefix-list $../../name $condition $subnet $compare $num
                        #else if($rule-num != null AND $compare == null)
                        ip prefix-list $../../name seq $rule-num $condition $subnet
                        #else if($rule-num != null AND $compare != null)
                        ip prefix-list $../../name seq $rule-num $condition $subnet $compare $num
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateIpPrefixListEntry</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($rule-num == null AND $compare == null)
                        ip prefix-list $../../name $condition $subnet
                        #else if($rule-num == null AND $compare != null)
                        ip prefix-list $../../name $condition $subnet $compare $num
                        #else if($rule-num != null AND $compare == null)
                        ip prefix-list $../../name seq $rule-num $condition $subnet
                        #else if($rule-num != null AND $compare != null)
                        ip prefix-list $../../name seq $rule-num $condition $subnet $compare $num
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteIpPrefixListEntry</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($rule-num == null AND $compare == null)
                        no ip prefix-list $../../name $condition $subnet
                        #else if($rule-num == null AND $compare != null)
                        no ip prefix-list $../../name $condition $subnet $compare $num
                        #else if($rule-num != null AND $compare == null)
                        no ip prefix-list $../../name seq $rule-num $condition $subnet
                        #else if($rule-num != null AND $compare != null)
                        no ip prefix-list $../../name seq $rule-num $condition $subnet $compare $num
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
       
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/gateway</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateDefaultGateway</name>
                    <type>CREATE</type>
                    <command-string>ip default-gateway $gateway</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteDefaultGateway</name>
                    <type>DELETE</type>
                    <command-string>no ip default-gateway $gateway</command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:aaa-group/aaa-new-model</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAAAGroupNewModel</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($aaa-new-model == "true")
                        aaa new-model
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateAAAGroupNewModel</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($aaa-new-model == "true")
                        aaa new-model
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:aaa-group/tacacs-server-group</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAAAGroupServerGroup</name>
                    <type>CREATE</type>
                    <command-string>aaa group server tacacs+ $tacacs-server-group</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateAAAGroupServerGroup</name>
                    <type>UPDATE</type>
                    <command-string>aaa group server tacacs+ $tacacs-server-group</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAAAGroupServerGroup</name>
                    <type>DELETE</type>
                    <command-string>no aaa group server tacacs+ $tacacs-server-group</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:aaa-group</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAAAGroup</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($aaa-new-model == "true")
                        aaa new-model
                    </command-string>
                    <command-string>aaa group server tacacs+ $tacacs-server-group</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateAAAGroup</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($aaa-new-model == "true")
                        aaa new-model
                    </command-string>
                    <command-string>aaa group server tacacs+ $tacacs-server-group</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAAAGroup</name>
                    <type>DELETE</type>
                    <command-string>no aaa group server tacacs+ $tacacs-server-group</command-string>
                </device-operation>
            </device-operations>
        </operation>


        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:aaa-group/aaa-servers</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAAAGroupServers</name>
                    <type>CREATE</type>
                    <command-string>aaa group server tacacs+ $../tacacs-server-group</command-string>
                    <command-string>server $aaa-server [vrf $../vrf]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAAAGroupServers</name>
                    <type>DELETE</type>
                    <command-string>aaa group server tacacs+ $../tacacs-server-group</command-string>
                    <command-string>no server $aaa-server [vrf $../vrf]</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:aaa-group/aaa-servers-private</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseTemplateServerPrivate</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>aaa group server tacacs+ $../tacacs-server-group</command-string>
                    <command-string>
                        #if($privilege-level == null)
                        server-private $aaa-server-private key $privilege-key
                        #else if($privilege-level != null)
                        server-private $aaa-server-private key $privilege-level $privilege-key
                    </command-string>
                    <command-string>
                        #if($../source-interface != null)
                        ip tacacs source-interface $../source-interface
                    </command-string>
                     <command-string>
                        #if($../vrf != null)
                        ip vrf forwarding $../vrf
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateAAAGroupServers</name>
                    <type>CREATE</type>
                    <command-string>aaa group server tacacs+ $../tacacs-server-group</command-string>
                    <command-string>server-private $aaa-server-private key [$privilege-level] $privilege-key</command-string>

                    <command-string>ip vrf forwarding $../vrf</command-string>
                    <command-string>ip tacacs source-interface $../source-interface</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAAAGroupServers</name>
                    <type>DELETE</type>
                    <command-string>aaa group server tacacs+ $../tacacs-server-group</command-string>
                    <command-string>no server-private $aaa-server-private key [$privilege-level] $privilege-key</command-string>
                    <command-string>no ip vrf forwarding $../vrf</command-string>
                    <command-string>no ip tacacs source-interface $../source-interface</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:aaa-group/authentication</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAuthentication</name>
                    <type>CREATE</type>
                    <command-string>aaa authentication login default group $server-group local</command-string>
                    <command-string>aaa authentication enable default group $server-group enable</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateAuthentication</name>
                    <type>UPDATE</type>
                    <command-string>aaa authentication login default group $server-group local</command-string>
                    <command-string>aaa authentication enable default group $server-group enable</command-string>
                </device-operation>
                <!--device-operation>
                    <name>DeleteAuthentication</name>
                    <type>DELETE</type>
                    <command-string>no aaa authentication login default group $server-group local</command-string>
                    <command-string>no aaa authentication enable default group $server-group enable</command-string>
                </device-operation-->
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:aaa-group/authorization</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>Parseauthorization</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if ($commands != null)
                        aaa authorization $commands default group $server-group local
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>Createauthorization</name>
                    <type>CREATE</type>
                    <command-string>aaa authorization exec default group $server-group local</command-string>
                    <command-string>aaa authorization commands 0 default group $server-group none</command-string>
                    <command-string>aaa authorization commands 1 default group $server-group none</command-string>
                    <command-string>aaa authorization commands 15 default group $server-group none</command-string>
                </device-operation>
                <device-operation>
                    <name>Updateauthorization</name>
                    <type>UPDATE</type>
                    <command-string>aaa authorization exec default group $server-group local</command-string>
                    <command-string>aaa authorization commands 0 default group $server-group none</command-string>
                    <command-string>aaa authorization commands 1 default group $server-group none</command-string>
                    <command-string>aaa authorization commands 15 default group $server-group none</command-string>
                </device-operation>
                <!--device-operation>
                    <name>Deleteauthorization</name>
                    <type>DELETE</type>
                    <command-string>no aaa authorization exec default group $server-group local</command-string>
                    <command-string>no aaa authorization commands 0 default group $server-group none</command-string>
                    <command-string>no aaa authorization commands 1 default group $server-group none</command-string>
                    <command-string>no aaa authorization commands 15 default group $server-group none</command-string>
                </device-operation-->
            </device-operations>
        </operation>


        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:aaa-group/accounting</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>Createaccounting</name>
                    <type>CREATE</type>
                    <command-string>aaa accounting exec default start-stop group $server-group</command-string>
                    <command-string>aaa accounting commands 15 default start-stop group $server-group</command-string>
                    <command-string>aaa accounting network default start-stop group $server-group</command-string>
                    <command-string>aaa accounting system default start-stop group $server-group</command-string>
                </device-operation>
                <device-operation>
                    <name>Updateaccounting</name>
                    <type>UPDATE</type>
                    <command-string>aaa accounting exec default start-stop group $server-group</command-string>
                    <command-string>aaa accounting commands 15 default start-stop group $server-group</command-string>
                    <command-string>aaa accounting network default start-stop group $server-group</command-string>
                    <command-string>aaa accounting system default start-stop group $server-group</command-string>
                </device-operation>
                <!--device-operation>
                    <name>Deleteaccounting</name>
                    <type>DELETE</type>
                    <command-string>no aaa accounting exec default start-stop group $server-group</command-string>
                    <command-string>no aaa accounting commands 15 default start-stop group $server-group</command-string>
                    <command-string>no aaa accounting network default start-stop group $server-group</command-string>
                    <command-string>no aaa accounting system default start-stop group $server-group</command-string>
                </device-operation-->
            </device-operations>
        </operation>

         <operation>
            <target>/controller:devices/device/basicDeviceConfigs:tacacs-conf/timeout</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                     <name>ParseTACACSTimeout</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>tacacs-server timeout $timeout</command-string>
                </device-operation>
                <device-operation>
                     <name>CreateTACACSTimeout</name>
                    <type>CREATE</type>
                    <command-string>tacacs-server timeout $timeout</command-string>
                </device-operation>
                <device-operation>
                     <name>UpdateTACACSTimeout</name>
                    <type>UPDATE</type>
                    <command-string>tacacs-server timeout $timeout</command-string>
                </device-operation>
                <device-operation>
                     <name>DeleteTACACSTimeout</name>
                    <type>DELETE</type>
                    <command-string>tacacs-server timeout $timeout</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:tacacs-conf</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAAA</name>
                    <type>CREATE</type>
                    <command-string>aaa authentication login default group $tacacs-server-group local</command-string>
                    <command-string>aaa authentication enable default group $tacacs-server-group enable</command-string>
                    <command-string>aaa authorization exec default group $tacacs-server-group local</command-string>
                    <command-string>aaa authorization commands 0 default group $tacacs-server-group none</command-string>
                    <command-string>aaa authorization commands 1 default group $tacacs-server-group none</command-string>
                    <command-string>aaa authorization commands 15 default group $tacacs-server-group none</command-string>
                    <command-string>aaa accounting exec default start-stop group $tacacs-server-group</command-string>
                    <command-string>aaa accounting commands 15 default start-stop group $tacacs-server-group</command-string>
                    <command-string>aaa accounting network default start-stop group $tacacs-server-group</command-string>
                    <command-string>aaa accounting system default start-stop group $tacacs-server-group</command-string>
                    <command-string>tacacs-server timeout $timeout</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateAAA</name>
                    <type>UPDATE</type>
                    <command-string>aaa authentication login default group $tacacs-server-group local</command-string>
                    <command-string>aaa authentication enable default group $tacacs-server-group enable</command-string>
                    <command-string>aaa authorization exec default group $tacacs-server-group local</command-string>
                    <command-string>aaa authorization commands 0 default group $tacacs-server-group none</command-string>
                    <command-string>aaa authorization commands 1 default group $tacacs-server-group none</command-string>
                    <command-string>aaa authorization commands 15 default group $tacacs-server-group none</command-string>
                    <command-string>aaa accounting exec default start-stop group $tacacs-server-group</command-string>
                    <command-string>aaa accounting commands 15 default start-stop group $tacacs-server-group</command-string>
                    <command-string>aaa accounting network default start-stop group $tacacs-server-group</command-string>
                    <command-string>aaa accounting system default start-stop group $tacacs-server-group</command-string>
                    <command-string>tacacs-server timeout $timeout</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAAA</name>
                    <type>DELETE</type>
                    <command-string>no aaa authentication login default group $tacacs-server-group local</command-string>
                    <command-string>no aaa authentication enable default group $tacacs-server-group enable</command-string>
                    <command-string>no aaa authorization exec default group $tacacs-server-group local</command-string>
                    <command-string>no aaa authorization commands 0 default group $tacacs-server-group none</command-string>
                    <command-string>no aaa authorization commands 1 default group $tacacs-server-group none</command-string>
                    <command-string>no aaa authorization commands 15 default group $tacacs-server-group none</command-string>
                    <command-string>no aaa accounting exec default start-stop group $tacacs-server-group</command-string>
                    <command-string>no aaa accounting commands 15 default start-stop group $tacacs-server-group</command-string>
                    <command-string>no aaa accounting network default start-stop group $tacacs-server-group</command-string>
                    <command-string>no aaa accounting system default</command-string>
                    <command-string>no tacacs-server timeout $timeout</command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:features</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseIPFeature</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($feature-name == "enable")
                        ip domain $feature-name
                        #else
                        no ip domain $feature-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateFeatures</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($cdp != null and $cdp == "disable")
                        no cdp run
                        #else if($cdp != null and $cdp == "enable")
                        cdp run
                    </command-string>
                    <command-string>
                        #if($domain-lookup != null and $domain-lookup == "disable")
                        no ip domain-lookup
                        #else if($domain-lookup != null and $domain-lookup == "enable")
                        ip domain-lookup
                    </command-string>
                    <command-string>
                        #if($tcp-small-servers != null and $tcp-small-servers == "disable")
                        no service tcp-small-servers
                        #else if($tcp-small-servers != null and $tcp-small-servers == "enable")
                        service tcp-small-servers
                    </command-string>
                    <command-string>
                        #if($udp-small-servers != null and $udp-small-servers == "disable")
                        no service udp-small-servers
                        #else if($udp-small-servers != null and $udp-small-servers == "enable")
                        service udp-small-servers
                    </command-string>
                    <command-string>
                        #if($finger != null and $finger == "disable")
                        no service finger
                        #else if($finger != null and $finger == "enable")
                        service finger
                    </command-string>
                    <command-string>
                        #if($source-route != null and $source-route == "disable")
                        no ip source-route
                        #else if($source-route != null and $source-route == "enable")
                        ip source-route
                    </command-string>
                    <command-string>
                        #if($bootp-server != null and $bootp-server == "disable")
                        no ip bootp server
                        #else if($bootp-server != null and $bootp-server == "enable")
                        ip bootp server
                    </command-string>
                    <command-string>
                        #if($http-server != null and $http-server == "disable")
                        no ip http server
                        #else if($http-server != null and $http-server == "enable")
                        ip http server
                    </command-string>
                    <command-string>
                        #if($http-secure-server != null and $http-secure-server == "disable")
                        no ip http secure-server
                        #else if($http-secure-server != null and $http-secure-server == "enable")
                        ip http secure-server
                    </command-string>
                    <command-string>
                        #if($banner-exec != null and $banner-exec == "disable")
                        no banner exec
                        #else if($banner-exec != null and $banner-exec == "enable")
                        banner exec $banner-exec-string
                    </command-string>
                    <command-string>
                        #if($banner-login != null and $banner-login == "disable")
                        no banner login
                        #else if($banner-login != null and $banner-login == "enable")
                        banner login $banner-login-string
                    </command-string>
                    <command-string>
                        #if($banner-motd != null and $banner-motd == "disable")
                        no banner motd
                        #else if($banner-motd != null and $banner-motd == "enable")
                        banner motd $banner-motd-string
                    </command-string>
                    <command-string>
                        #if($service-pad != null and $service-pad == "disable")
                        no service pad
                        #else if($service-pad != null and $service-pad == "enable")
                        service pad
                    </command-string>
            <command-string>
                        #if($boot-network != null and $boot-network == "disable")
                        no boot network
                        #else if($boot-network != null and $boot-network == "enable")
                        boot network $boot-server $filename
                    </command-string>
            <command-string>
                        #if($service-config != null and $service-config == "disable")
                        no service config
                        #else if($service-config != null and $service-config == "enable")
                        service config
                    </command-string>
            <command-string>
                        #if($ip-identd != null and $ip-identd == "disable")
                        no ip identd
                        #else if($ip-identd != null and $ip-identd == "enable")
                        ip identd
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateFeatures</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($cdp != null and $cdp == "disable")
                        no cdp run
                        #else if($cdp != null and $cdp == "enable")
                        cdp run
                    </command-string>
                    <command-string>
                        #if($domain-lookup != null and $domain-lookup == "disable")
                        no ip domain-lookup
                        #else if($domain-lookup != null and $domain-lookup == "enable")
                        ip domain-lookup
                    </command-string>
                    <command-string>
                        #if($tcp-small-servers != null and $tcp-small-servers == "disable")
                        no service tcp-small-servers
                        #else if($tcp-small-servers != null and $tcp-small-servers == "enable")
                        service tcp-small-servers
                    </command-string>
                    <command-string>
                        #if($udp-small-servers != null and $udp-small-servers == "disable")
                        no service udp-small-servers
                        #else if($udp-small-servers != null and $udp-small-servers == "enable")
                        service udp-small-servers
                    </command-string>
                    <command-string>
                        #if($finger != null and $finger == "disable")
                        no service finger
                        #else if($finger != null and $finger == "enable")
                        service finger
                    </command-string>
                    <command-string>
                        #if($source-route != null and $source-route == "disable")
                        no ip source-route
                        #else if($source-route != null and $source-route == "enable")
                        ip source-route
                    </command-string>
                    <command-string>
                        #if($bootp-server != null and $bootp-server == "disable")
                        no ip bootp server
                        #else if($bootp-server != null and $bootp-server == "enable")
                        ip bootp server
                    </command-string>
                    <command-string>
                        #if($http-server != null and $http-server == "disable")
                        no ip http server
                        #else if($http-server != null and $http-server == "enable")
                        ip http server
                    </command-string>
                    <command-string>
                        #if($http-secure-server != null and $http-secure-server == "disable")
                        no ip http secure-server
                        #else if($http-secure-server != null and $http-secure-server == "enable")
                        ip http secure-server
                    </command-string>
                    <command-string>
                        #if($banner-exec != null and $banner-exec == "disable")
                        no banner exec
                        #else if($banner-exec != null and $banner-exec == "enable")
                        banner exec $banner-exec-string
                    </command-string>
                    <command-string>
                        #if($banner-login != null and $banner-login == "disable")
                        no banner login
                        #else if($banner-login != null and $banner-login == "enable")
                        banner login $banner-login-string
                    </command-string>
                    <command-string>
                        #if($banner-motd != null and $banner-motd == "disable")
                        no banner motd
                        #else if($banner-motd != null and $banner-motd == "enable")
                        banner motd $banner-motd-string
                    </command-string>
                     <command-string>
                        #if($service-pad != null and $service-pad == "disable")
                        no service pad
                        #else if($service-pad != null and $service-pad == "enable")
                        service pad
                    </command-string>
            <command-string>
                        #if($boot-network != null and $boot-network == "disable")
                        no boot network
                        #else if($boot-network != null and $boot-network == "enable")
                        boot network $boot-server $filename
                    </command-string>
            <command-string>
                        #if($service-config != null and $service-config == "disable")
                        no service config
                        #else if($service-config != null and $service-config == "enable")
                        service config
                    </command-string>
            <command-string>
                        #if($ip-identd != null and $ip-identd == "disable")
                        no ip identd
                        #else if($ip-identd != null and $ip-identd == "enable")
                        ip identd
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteFeatures</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($cdp != null and $cdp == "disable")
                        cdp run
                        #else if($cdp != null and $cdp == "enable")
                        no cdp run
                    </command-string>
                    <command-string>
                        #if($domain-lookup != null and $domain-lookup == "disable")
                        ip domain-lookup
                        #else if($domain-lookup != null and $domain-lookup == "enable")
                        no ip domain-lookup
                    </command-string>
                    <command-string>
                        #if($tcp-small-servers != null and $tcp-small-servers == "disable")
                        service tcp-small-servers
                        #else if($tcp-small-servers != null and $tcp-small-servers == "enable")
                        no service tcp-small-servers
                    </command-string>
                    <command-string>
                        #if($udp-small-servers != null and $udp-small-servers == "disable")
                        service udp-small-servers
                        #else if($udp-small-servers != null and $udp-small-servers == "enable")
                        no service udp-small-servers
                    </command-string>
                    <command-string>
                        #if($finger != null and $finger == "disable")
                        service finger
                        #else if($finger != null and $finger == "enable")
                        no service finger
                    </command-string>
                    <command-string>
                        #if($source-route != null and $source-route == "disable")
                        ip source-route
                        #else if($source-route != null and $source-route == "enable")
                        no ip source-route
                    </command-string>
                    <command-string>
                        #if($bootp-server != null and $bootp-server == "disable")
                        ip bootp server
                        #else if($bootp-server != null and $bootp-server == "enable")
                        no ip bootp server
                    </command-string>
                    <command-string>
                        #if($http-server != null and $http-server == "disable")
                        ip http server
                        #else if($http-server != null and $http-server == "enable")
                        no ip http server
                    </command-string>
                    <command-string>
                        #if($http-secure-server != null and $http-secure-server == "disable")
                        ip http secure-server
                        #else if($http-secure-server != null and $http-secure-server == "enable")
                        no ip http secure-server
                    </command-string>
                    <command-string>
                        #if($banner-exec != null and $banner-exec == "enable")
                        no banner exec
                    </command-string>
                    <command-string>
                        #if($banner-login != null and $banner-login == "enable")
                        no banner login
                    </command-string>
                    <command-string>
                        #if($banner-motd != null and $banner-motd == "enable")
                        no banner motd
                    </command-string>
                     <command-string>
                        #if($service-pad != null and $service-pad == "disable")
                        service pad
                        #else if($service-pad != null and $service-pad == "enable")
                        no service pad
                    </command-string>
            <command-string>
                        #if($boot-network != null and $boot-network == "disable")
                        boot network
                        #else if($boot-network != null and $boot-network == "enable")
                        no boot network $boot-server $filename
                    </command-string>
            <command-string>
                        #if($service-config != null and $service-config == "disable")
                        service config
                        #else if($service-config != null and $service-config == "enable")
                        no service config
                    </command-string>
            <command-string>
                        #if($ip-identd != null and $ip-identd == "disable")
                        ip identd
                        #else if($ip-identd != null and $ip-identd == "enable")
                        no ip identd
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/enable-mode</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>EnableMode</name>
                    <type>SYSTEM</type>
                    <command-string>enable</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/config-mode</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ConfigMode</name>
                    <type>SYSTEM</type>
                    <command-string>conf t</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/reset-to-exec-mode</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ResetToExecMode</name>
                    <type>SYSTEM</type>
                    <command-string>end</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/setup-terminal-length</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>SetuTerminalLength</name>
                    <type>SYSTEM</type>
                    <command-string>terminal length 0</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/setup-terminal-width</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>SetuTerminalWidth</name>
                    <type>SYSTEM</type>
                    <command-string>terminal no editing</command-string>
                </device-operation>
            </device-operations>
        </operation>
       
        <operation>
            <target>/controller:devices/device/acl:object-groups-acl/object-group</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateObjectGroup</name>
                    <type>CREATE</type>
                    <command-string>object-group $type $name</command-string>
		    <command-string>
			#if($description != null)
			description $description
		    </command-string>                    
                </device-operation>
                <device-operation>
                    <name>DeleteObjectGroup</name>
                    <type>DELETE</type>
                    <command-string>no object-group $type $name</command-string>		    
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/acl:object-groups-acl/object-group/networks/network</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNetworkGroup</name>
                    <type>CREATE</type>
                    <command-string>object-group $../../type $../../name</command-string>                    
		    <command-string>
			#if($group-object != null)
			group-object $group-object
		    </command-string>
		    <command-string>
			#if($host != null)
			host $host
		    </command-string>
                    <command-string>
			#if($ip-address != null AND $netmask != null)
			$ip-address $netmask
		    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNetworkGroup</name>
                    <type>DELETE</type>
                    <command-string>object-group $../../type $../../name</command-string>		    
		    <command-string>
			#if($group-object != null)
			no group-object $group-object
		    </command-string>
		    <command-string>
			#if($host != null)
			no host $host
		    </command-string>
                    <command-string>
			#if($ip-address != null AND $netmask != null)
			no $ip-address $netmask
		    </command-string>
                </device-operation>
            </device-operations>
        </operation>	
	<operation>
            <target>/controller:devices/device/acl:object-groups-acl/object-group/services/service</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateServiceGroup</name>
                    <type>CREATE</type>
                    <command-string>object-group $../../type $../../name</command-string>                    
		    <command-string>
			#if($group-object != null)
			group-object $group-object
		    </command-string>
            <command-string>                        
            #if($protocol != null AND $operation == 'source')
            $protocol source $compare $port [$end-port]
            #else if($protocol != null AND $operation == null AND $port != null)
            $protocol [$compare] $port [$end-port]
            #else if($protocol != null)
            $protocol
                    </command-string>
		    <command-string>
			#if($ip-protocol != null)
			$ip-protocol
		    </command-string>
		                   
                </device-operation>
                <device-operation>
                    <name>DeleteServiceGroup</name>
                    <type>DELETE</type>
                    <command-string>object-group $../../type $../../name</command-string>		    
		    <command-string>
			#if($group-object != null)
			no group-object $group-object
		    </command-string>
		    <command-string>
			#if($ip-protocol != null)
			no $ip-protocol
		    </command-string>
		    <command-string>                        
            #if($protocol != null AND $operation == 'source')
            no $protocol source $compare $port [$end-port]
            #else if($protocol != null AND $operation == null AND $port != null)
            no $protocol [$compare] $port [$end-port]
            #else if($protocol != null)
            no $protocol
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/acl:access-lists/access-list</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAccessList</name>
                    <type>CREATE</type>
                    <command-string>ip access-list $acl-type $name</command-string>
                    <command-string>[remark $start-remark]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAccessList</name>
                    <type>DELETE</type>
                    <command-string>no ip access-list $acl-type $name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/acl:access-lists/access-list/acl-rules/acl-rule</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                 <device-operation>
                    <name>ParseAcessListRule</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "cidr")
                        $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] [$dest-ip $dest-mask] [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr")
                        $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr")
                        $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr")
                        $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup")
                        $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup")
                        $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup")
                        $action [$layer4protocol] [$service-obj-name] host $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup")
                        $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host")
                        $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] host $dest-ip [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host")
                        $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$acl-typesource-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host")
                        $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] [host $dest-ip] [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host")
                        $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] host $dest-ip [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "any")
                        $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any")
                        $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any")
                        $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any")
                        $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == null)
                        $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateAclRule</name>
                    <type>CREATE</type>
                    <command-string>ip access-list $../../acl-type $../../name</command-string>
                    <command-string>
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "cidr")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] [$dest-ip $dest-mask] [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] host $dest-ip [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$acl-typesource-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] [host $dest-ip] [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($dest-condition-type == "host" AND $dest-ip == null )
                        $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] [host $dest-ip] [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] host $dest-ip [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "any")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == null)
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] [$dest-port-operator $dest-port] [$match-packets] [$precedence] [$extra-options]
		#else if($source-condition-type == "host" AND $dest-condition-type == null)
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] [$dest-port-operator $dest-port] [$match-packets] [$precedence] [$extra-options]
		#else if($source-condition-type == "cidr" AND $dest-condition-type == null)
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] [object-group $dest-obj-name] [$dest-port-operator $dest-port] [$match-packets] [$precedence] [$extra-options]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateAclRule</name>
                    <type>UPDATE</type>
                    <command-string>ip access-list $../../acl-type $../../name</command-string>
                    <command-string>
			#if($linenumber != $linenumber.%previous)
			no $linenumber.%previous
		    </command-string>
                    <command-string>
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "cidr")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] [$dest-ip $dest-mask] [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] host $dest-ip [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$acl-typesource-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] [host $dest-ip] [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($dest-condition-type == "host" AND $dest-ip == null )
                        $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] [host $dest-ip] [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] host $dest-ip [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "any")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any")
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == null)
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] [$dest-port-operator $dest-port] [$match-packets] [$precedence] [$extra-options]
		#else if($source-condition-type == "host" AND $dest-condition-type == null)
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] [$dest-port-operator $dest-port] [$match-packets] [$precedence] [$extra-options]
		#else if($source-condition-type == "cidr" AND $dest-condition-type == null)
                        [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] [object-group $dest-obj-name] [$dest-port-operator $dest-port] [$match-packets] [$precedence] [$extra-options]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAclRule</name>
                    <type>DELETE</type>
                    <command-string>ip access-list $../../acl-type $../../name</command-string>
                    <command-string>
                        #if($source-condition-type == "cidr" AND $dest-condition-type == "cidr")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] [$dest-ip $dest-mask] [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] host $dest-ip [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$acl-typesource-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] [host $dest-ip] [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($dest-condition-type == "host" AND $dest-ip == null )
                        no $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] [host $dest-ip] [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] host $dest-ip [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "any")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any")
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets] [$precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == null)
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] [$dest-port-operator $dest-port] [$match-packets] [$precedence] [$extra-options]
		#else if($source-condition-type == "host" AND $dest-condition-type == null)
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] [$dest-port-operator $dest-port] [$match-packets] [$precedence] [$extra-options]
		#else if($source-condition-type == "cidr" AND $dest-condition-type == null)
                        no [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] [object-group $dest-obj-name] [$dest-port-operator $dest-port] [$match-packets] [$precedence] [$extra-options]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
         <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:mac-access-group</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceMacAccessGroup</name>
                    <type>CREATE</type>
                    <command-string>mac access-group $interface-ext:mac-access-group in</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceMacAccessGroup</name>
                    <type>UPDATE</type>
                    <command-string>mac access-group $interface-ext:mac-access-group in</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceMacAccessGroup</name>
                    <type>DELETE</type>
                    <command-string>no mac access-group $interface-ext:mac-access-group in</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:logging-event</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceLoggingEvent</name>
                    <type>CREATE</type>
                    <command-string>interface $../name</command-string>
                    <command-string>logging event $status</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceLoggingEvent</name>
                    <type>UPDATE</type>
                    <command-string>interface $../name</command-string>
                    <command-string>logging event $status</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceLoggingEvent</name>
                    <type>DELETE</type>
                    <command-string>interface $../name</command-string>
                    <command-string>no logging event $status</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:snmp/trap</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceTrap</name>
                    <type>CREATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>snmp trap $link-ip</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceTrap</name>
                    <type>UPDATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>snmp trap $link-ip</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceTrap</name>
                    <type>DELETE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>no snmp trap $link-ip</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/acl:access-lists/access-list/acl-rules/acl-rule/linenumber</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>UpdateAclRuleLineNumber</name>
                    <type>UPDATE</type>
                    <command-string>no $linenumber.%previous</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAclRuleLineNumber</name>
                    <type>DELETE</type>
                    <command-string>no $linenumber</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/acl:number-access-lists/access-list-numbers/acl-rule</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNumberAclRule</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($source-mac != null AND $dest-mac != null)
                        access-list $../access-list-number [$linenumber] $action $tclextmacacl:source-mac $tclextmacacl:dest-mac
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "cidr")
                        access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] [$dest-ip $dest-mask] [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr")
                        access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr")
                        access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr")
                        access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup")
                        access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup")
                        access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup")
                        access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup")
                        access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host")
                        access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] host $dest-ip [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host")
                        access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$acl-typesource-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host")
                        access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip [$source-port-operator $source-port] [$dest-ip] [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host")
                        access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] host $dest-ip [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "any")
                        access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any")
                        access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any")
                        access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any")
                        access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNumberAclRule</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($source-mac != null AND $dest-mac != null)
                        no access-list $../access-list-number [$linenumber] $action $tclextmacacl:source-mac $tclextmacacl:dest-mac
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "cidr")
                        no access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] [$dest-ip $dest-mask] [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "cidr")
                        no access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "cidr")
                        no access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "cidr")
                        no access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] $dest-ip $dest-mask [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "objectgroup")
                        no access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "objectgroup")
                        no access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "objectgroup")
                        no access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-obj-name [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "objectgroup")
                        no access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] object-group $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "host")
                        no access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] host $dest-ip [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "host")
                        no access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] host $dest-obj-name [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "host")
                        no access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip [$source-port-operator $source-port] [$dest-ip] [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-condition-type == "any")
                        no access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "host" AND $dest-ip == null )
                        no access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] host $source-ip [$source-port-operator $source-port] [host $dest-ip] [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "host")
                        no access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] host $dest-ip [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "cidr" AND $dest-condition-type == "any")
                        no access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] $source-ip $source-mask [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "objectgroup" AND $dest-condition-type == "any")
                        no access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] object-group $source-obj-name [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                        #else if($source-condition-type == "any" AND $dest-condition-type == "any")
                        no access-list $../access-list-number [$linenumber] $action [$layer4protocol] [$service-obj-name] any [$source-port-operator $source-port] any [$dest-port-operator $dest-port] [$match-packets $precedence]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <!--device-operation>
                    <name>ParseSnmp</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #else if ($snmp-version !="v3" AND $group-auth-type == null)
                        snmp-server [group $group-name] $snmp-version [$group-priviledge] [$view-name]
                        #else if($snmp-version =="v3")
                        snmp-server [group $group-name] $snmp-version [$group-auth-type] [$group-priviledge] [$view-name]
                        #else
                        snmp-server user $user [$group-name] [$snmp-version] [auth $v3-auth-type] [$v3-auth-paswd] priv [$encrpt-type] [$encrpt-length] [$encrpt-paswd]
                    </command-string>
                </device-operation-->
                <device-operation>
                    <name>CreateSnmp</name>
                    <type>CREATE</type>
                    <command-string>snmp-server community $community [$comm-auth-type] [view $view-name]</command-string>
                    <command-string>snmp-server trap-source $trap-source</command-string>
                    <command-string>
                        #if ($all-traps == "true")
                        snmp-server enable traps [$trap-type]
                    </command-string>
                    <command-string>
                        #if ($system-shutdown == "true")
                        snmp-server system-shutdown
                    </command-string>
                   <command-string>
                        #if($snmp-version =="v3" AND $acl-name != null)
                        snmp-server group $group-name $snmp-version $group-auth-type access $acl-name [$group-priviledge $view-name]
                        #else if($snmp-version =="v3")
                        snmp-server group $group-name $snmp-version $group-auth-type [$group-priviledge $view-name]
                        #else
                        snmp-server group $group-name $snmp-version [$group-priviledge $view-name]
                    </command-string>
                    <!--command-string>
                        #if ($snmp-ifmib-ifindex-persist == "true")
			snmp ifmib ifindex persist
                    </command-string-->
                    <command-string>snmp-server user $user [$group-name] [$snmp-version] [auth $v3-auth-type] [$v3-auth-paswd] priv [$encrpt-type] [$encrpt-length] [$encrpt-paswd]</command-string>
                    <command-string>snmp-server view $view-name [$oid] [$view-type]</command-string>
                    <command-string>[snmp-server location $location]</command-string>
                    <command-string>[snmp-server contact $contact]</command-string>
                    <command-string>snmp-server community $rw-community rw [$acl-name]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateSnmp</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if ($all-traps == "true")
                        snmp-server enable traps
                    </command-string>
                    <command-string>[snmp-server tftp-server-list $acl-name]</command-string>
                    <command-string>[snmp-server packetsize $packet-size]</command-string>
                    <command-string>snmp-server community $rw-community rw [$acl-name]</command-string>
                </device-operation> 
                <device-operation>
                    <name>DeleteSnmp</name>
                    <type>DELETE</type>
                    <command-string>[no snmp-server group $group-name]</command-string>
                    <command-string>[no snmp-server user $user]</command-string>
                    <command-string>
                        #if ($all-traps == "true")
                        no snmp-server enable traps [$trap-type]
                    </command-string>
                    <command-string>
                        #if ($system-shutdown == "true")
                        no snmp-server system-shutdown
                    </command-string>
                    <command-string>no snmp-server user $user [$group-name] [$snmp-version] [auth $v3-auth-type] [$v3-auth-paswd] priv [$encrpt-type] [$encrpt-length] [$encrpt-paswd]</command-string>
                    <!--command-string>
                        #if ($snmp-ifmib-ifindex-persist == "true")
			no snmp ifmib ifindex persist
                    </command-string-->
                    <command-string>
                        #if($snmp-version =="v3" AND $acl-name != null)
                        no snmp-server [group $group-name] $snmp-version [$group-auth-type] access $acl-name [$group-priviledge] [$view-name]
                        #else if($snmp-version =="v3")
                        no snmp-server [group $group-name] $snmp-version [$group-auth-type] [$group-priviledge] [$view-name]
                        #else
                        no snmp-server [group $group-name] $snmp-version [$group-priviledge] [$view-name]
                    </command-string>
                    <command-string>[no snmp-server trap-source $trap-source]</command-string>
                    <command-string>[no snmp-server community $community ro]</command-string>
                    <command-string>[no snmp-server community $rw-community rw]</command-string>
                    <command-string>[no snmp-server view $view-name]</command-string>
                    <command-string>[no snmp-server location $location]</command-string>
                    <command-string>[no snmp-server contact $contact]</command-string>
                    <command-string>no snmp-server community $rw-community rw [$acl-name]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/view-name</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateView</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../snmp-version =="v3")
                        snmp-server group $../group-name $../snmp-version $../group-auth-type [$../group-priviledge $view-name]
                        #else
                        snmp-server group $../group-name $../snmp-version [$../group-priviledge $view-name]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateView</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../snmp-version =="v3")
                        snmp-server group $../group-name $../snmp-version $../group-auth-type [$../group-priviledge $view-name]
                        #else
                        snmp-server group $../group-name $../snmp-version [$../group-priviledge $view-name]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteView</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../snmp-version =="v3")
                        no snmp-server [group $../group-name] $../snmp-version [$../group-auth-type] [$../group-priviledge] [$view-name]
                        #else
                        no snmp-server [group $../group-name] $../snmp-version [$../group-priviledge] [$view-name]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/snmp-ifmib-ifindex-persist</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseSNMPIfMib</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if ($snmp-ifmib-ifindex-persist == "true")
			snmp-server ifindex persist
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>Createifmib</name>
                    <type>CREATE</type>
                    <command-string>
                        #if ($snmp-ifmib-ifindex-persist == "true")
			snmp-server ifindex persist
                        #else 
			no snmp-server ifindex persist			
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>Updateifmib</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if ($snmp-ifmib-ifindex-persist == "true")
			snmp-server ifindex persist
                        #else 
			no snmp-server ifindex persist			
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>Deleteifmib</name>
                    <type>DELETE</type>
                    <command-string>
                        #if ($snmp-ifmib-ifindex-persist == "true")
			no snmp-server ifindex persist		
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/user</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSnmpUser</name>
                    <type>CREATE</type>
                    <command-string>snmp-server user $user [$../group-name] [$../snmp-version] [auth $../v3-auth-type] [$../v3-auth-paswd] priv [$../encrpt-type] [$../encrpt-length] [$../encrpt-paswd]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateSnmpUser</name>
                    <type>UPDATE</type>
                    <command-string>snmp-server user $user [$../group-name] [$../snmp-version] [auth $../v3-auth-type] [$../v3-auth-paswd] priv [$../encrpt-type] [$../encrpt-length] [$../encrpt-paswd]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSnmpUser</name>
                    <type>DELETE</type>
                    <command-string>no snmp-server user $user [$../group-name] [$../snmp-version] [auth $../v3-auth-type] [$../v3-auth-paswd] priv [$../encrpt-type] [$../encrpt-length] [$../encrpt-paswd]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/system-shutdown</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseSNMPSystemShutDown</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if ($system-shutdown == "true")
                        snmp-server $system-shutdown
                        #else
                        no snmp-server $system-shutdown
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateSNMPSystemShutDown</name>
                    <type>CREATE</type>
                    <command-string>
                        #if ($system-shutdown == "true")
                        snmp-server system-shutdown
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateSNMPSystemShutDown</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if ($system-shutdown == "true")
                        snmp-server system-shutdown
                        #else
                        no snmp-server system-shutdown
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSNMPSystemShutDown</name>
                    <type>DELETE</type>
                    <command-string>
                        #if ($system-shutdown == "true")
                        no snmp-server system-shutdown
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/system-shutdown</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSystemShutdown</name>
                    <type>CREATE</type>
                    <command-string>snmp-server system-shutdown</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateSystemShutdown</name>
                    <type>UPDATE</type>
                    <command-string>snmp-server system-shutdown</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSystemShutdown</name>
                    <type>DELETE</type>
                    <command-string>snmp-server system-shutdown</command-string>
                </device-operation>
            </device-operations>
        </operation>
                <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/location</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateLocation</name>
                    <type>CREATE</type>
                    <command-string>[snmp-server location $location]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateLocation</name>
                    <type>UPDATE</type>
                    <command-string>[snmp-server location $location]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLocation</name>
                    <type>DELETE</type>
                    <command-string>[no snmp-server location $location]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/contact</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateContact</name>
                    <type>CREATE</type>
                    <command-string>[snmp-server contact $contact]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateContact</name>
                    <type>UPDATE</type>
                    <command-string>[snmp-server contact $contact]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteContact</name>
                    <type>DELETE</type>
                    <command-string>[no snmp-server contact $contact]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/trap-source</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTrapSource</name>
                    <type>CREATE</type>
                    <command-string>[snmp-server trap-source $trap-source]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateTrapSource</name>
                    <type>UPDATE</type>
                    <command-string>[snmp-server trap-source $trap-source]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTrapSource</name>
                    <type>DELETE</type>
                    <command-string>[no snmp-server trap-source $trap-source]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <!--operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/snmp-ifmib-ifindex-persist</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>Createifmib</name>
                    <type>CREATE</type>
                    <command-string>
                        #if ($snmp-ifmib-ifindex-persist == "true")
                        snmp-server ifindex persist
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>Updateifmib</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if ($snmp-ifmib-ifindex-persist == "true")
                        snmp-server ifindex persist
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>Deleteifmib</name>
                    <type>DELETE</type>
                    <command-string>
                        #if ($snmp-ifmib-ifindex-persist == "true")
                        no snmp-server ifindex persist
                    </command-string>
                </device-operation>
            </device-operations>
        </operation-->
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/community</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSnmpReadCommunity</name>
                    <type>CREATE</type>
                    <command-string>[snmp-server community $community ro]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateSnmpReadCommunity</name>
                    <type>UPDATE</type>
                    <command-string>[snmp-server community $community ro]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSnmpReadCommunity</name>
                    <type>DELETE</type>
                    <command-string>[no snmp-server community $community ro]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/rw-community</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSnmpWriteCommunity</name>
                    <type>CREATE</type>
                    <command-string>snmp-server community $rw-community rw [$acl-name]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateSnmpWriteCommunity</name>
                    <type>UPDATE</type>
                    <command-string>snmp-server community $rw-community rw [$acl-name]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSnmpWriteCommunity</name>
                    <type>DELETE</type>
                    <command-string>no snmp-server community $rw-community rw [$acl-name]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/snmp-server</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>PARSESnmpserver</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($context-name != null) 
                        snmp-server host $snmp-server-ip [vrf $context-name] [version $snmp-version $community]
                        #else if($basicconfigs-ext:udp-port-number != null) 
                        snmp-server host $snmp-server-ip [version $snmp-version $community] [udp-port $basicconfigs-ext:udp-port-number]
                        #else if($basicconfigs-ext:notification-type != null) 
                        snmp-server host $snmp-server-ip [version $snmp-version $community] [$basicconfigs-ext:notification-type]
                        #else
                        snmp-server host $snmp-server-ip [version $snmp-version $community]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateSnmpServer</name>
                    <type>CREATE</type>
                    <command-string>
                    #if ($context-name != null)
                    snmp-server host $snmp-server-ip [vrf $context-name] [version $snmp-version $community]
                    #else
                    snmp-server host $snmp-server-ip [version $snmp-version $community]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSnmpServer</name>
                    <type>DELETE</type>
                    <command-string>
                    no snmp-server host $snmp-server-ip [vrf $context-name] [version $snmp-version $community]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/snmp-traps</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSnmpTraps</name>
                    <type>CREATE</type>
                    <command-string>
                        snmp-server enable traps $snmp-trap
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSnmpTraps</name>
                    <type>DELETE</type>
                    <command-string>
                        no snmp-server enable traps $snmp-trap
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/snmp-mib</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSnmpMIB</name>
                    <type>CREATE</type>
                    <command-string>
                        snmp mib persist $mib-persistence
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSnmpMIB</name>
                    <type>DELETE</type>
                    <command-string>
                        no snmp mib persist $mib-persistence
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:local-credentials</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateEnableCredentials</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($enable-secret == "true")
                        enable secret [$encryption-type] $enable-secret-password
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateEnableCredentials</name>
                    <type>UPDATE</type>
                    <command-string> </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteEnableCredentials</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($enable-secret == "true")
                        no enable secret [$encryption-type] $enable-secret-password
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:local-credentials/enable-secret-password</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
				<device-operation>
                    <name>ParseEnableCredentials</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
						#if($../enable-secret == "true" and $../encryption-type != null) 
						enable secret $../encryption-type $enable-secret-password
						#else
						enable secret $enable-secret-password
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateEnableSecreteCredentials</name>
                    <type>CREATE</type>
                    <command-string>enable secret [$../encryption-type] $enable-secret-password</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateEnableSecreteCredentials</name>
                    <type>UPDATE</type>
                    <command-string>enable secret [$../encryption-type] $enable-secret-password</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteEnableCredentials</name>
                    <type>DELETE</type>
                    <command-string>no enable secret [$../encryption-type] $enable-secret-password</command-string>
                </device-operation>
            </device-operations>
        </operation>
       <operation>
            <target>/controller:devices/device/basicDeviceConfigs:local-credentials/local-credential</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParselocalCredentials</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                       #if($enable-secret == "true")
                        username $name [privilege $privilege-level] secret [$secret-level] $secret-password [role $role]
                        #else if($enable-secret == "false" AND $privilege-level != null)
                        username $name [privilege $privilege-level] password [$password-level] $password [role $role]
                        #else if($enable-secret == "true" AND $privilege-level == null)
                        username $name secret [$secret-level] $secret-password [role $role]
                        #else
                        username $name password $password-level $password
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreatelocalCredentials</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($password != null)
                        username $name [privilege $privilege-level] password [$password-level] $password [role $role]
                    </command-string>
                    <command-string>
                        #if($password-strength == "false") 
                        no password strength-check
                    </command-string>
                    <command-string>
                        #if($enable-password == "true")
                        enable password [$enable-password-level] $enable-pwd
                    </command-string>
                    <command-string>
                        #if($enable-secret == "true")
                        username $name [privilege $privilege-level] secret [$secret-level] $secret-password [role $role]
                    </command-string>
                    <command-string>
                        #if($enable-privilege == "true")
                        username $name [privilege $privilege-level] secret $privilege-secret
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatelocalCredentials</name>
                    <type>UPDATE</type>
                    <command-string>
                        username $name [privilege $privilege-level] password [$password-level] $password [role $role]
                    </command-string>
                    <command-string>
                        #if($password-strength == "false")
                        no password strength-check
                    </command-string>
                    <command-string>
                        #if($enable-password == "true")
                        enable password [$enable-password-level] $enable-pwd
                    </command-string>
                    <command-string>
                        #if($enable-secret == "true")
                        username $name [privilege $privilege-level] secret $secret-password [role $role]
                    </command-string>
                    <command-string>
                        #if($enable-privilege == "true")
                        username $name [privilege $privilege-level] secret $privilege-secret
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeletelocalCredentials</name>
                    <type>DELETE</type>
                    <command-string>
                        no username $name [privilege $privilege-level] password [$password-level] $password [role $role]
                    </command-string>
                    <command-string>
                        #if($password-strength == "false")
                        password strength-check
                    </command-string>
                    <command-string>
                        #if($enable-password == "true")
                        enable password [$enable-password-level] $enable-pwd
                    </command-string>
                    <command-string>
                        #if($enable-secret == "true")
                        no username $name
                    </command-string>
                    <command-string>
                        #if($enable-privilege == "true")
                        no username $name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:hostname</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateHostName</name>
                    <type>CREATE</type>
                    <command-string>hostname $hostname</command-string>
                    <command-string>ip domain-name $domain-name</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateHostName</name>
                    <type>UPDATE</type>
                    <command-string>hostname $hostname</command-string>
                    <command-string>ip domain-name $domain-name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteHostName</name>
                    <type>DELETE</type>
                    <command-string>no hostname $hostname</command-string>
                    <command-string>no ip domain-name $domain-name</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:snmp/snmp-community-list</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateSnmpCommunity</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($acl != null)
                        snmp-server community $snmp-string [$permission-type] $acl
                        #else
                        snmp-server community $snmp-string [$permission-type] 
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateSnmpCommunity</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($acl != null)
                        snmp-server community $snmp-string [$permission-type] $acl
                        #else
                        snmp-server community $snmp-string [$permission-type] 
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSnmpCommunity</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($acl != null)
                        no snmp-server community $snmp-string [$permission-type] $acl
                        #else
                        no snmp-server community $snmp-string [$permission-type] 
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ntp</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <!--device-operation>
                    <name>ParseNtp</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($ntp-source-interface != null)
                        ntp source $ntp-source-interface
                    </command-string>
                </device-operation-->
                <device-operation>
                    <name>CreateNtp</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($ntp != null)
                        ntp access-group serve $ntp
                    </command-string>
                    <command-string>
                        #if($ntp-source-interface != null)
                        ntp source $ntp-source-interface
                    </command-string>
                    <command-string>
                        #if($update-calendar == "true")
                         ntp update-calendar 
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNtp</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($ntp != null)
                        ntp access-group serve $ntp
                    </command-string>
                    <command-string>
                        #if($ntp-source-interface != null)
                        ntp source $ntp-source-interface
                    </command-string>
                    <command-string>
                        #if($update-calendar == "true")
                         ntp update-calendar 
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNtp</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($ntp != null)
                        no ntp access-group serve $ntp
                    </command-string>
                    <command-string>
                        #if($ntp-source-interface != null)
                        no ntp source $ntp-source-interface
                    </command-string>
                    <command-string>
                        #if($update-calendar == "true")
                         no ntp update-calendar 
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <!--operation>
            <target>/controller:devices/device/basicDeviceConfigs:ntp/ntp-server/ntp-server-address</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseNtpServerAddress</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($vrf != null)
                        ntp server vrf $vrf $ntp-server-address
                        #else
                        ntp server $ntp-server-address
                    </command-string>
                </device-operation>
            </device-operations>
        </operation-->
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ntp/ntp-server</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNtpServer</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($ntp-peer != null)
                        ntp peer $ntp-peer [version $version] [$vrf $vrf]
                    </command-string>
                    <command-string>
                        #if($ntp-source-address != null)
                        ntp source $ntp-source-address
                    </command-string>
                    <command-string>
                        #if($ntp-server-address != null)
                        ntp server [vrf $vrf] $ntp-server-address
                    </command-string>
                    <command-string>ntp master $stratum-number</command-string>
                    <command-string>
                        #if($authkey-id != null)
                        ntp authentication-key $authkey-id md5 [$authkey-value]
                    </command-string>
                    <command-string>[ntp trusted-key $authkey-id]</command-string>
                    <!--command-string>
                        #if($../prefer == "true")
                        no ntp server $ntp-server-address [key $key] [maxpoll $max-poll] [minpoll $min-poll] prefer [source $source] [version $version]
                        #else
                        no ntp server $ntp-server-address [key $key] [maxpoll $max-poll] [minpoll $min-poll] [source $source] [version $version]
                    </command-string-->
                </device-operation>
                <device-operation>
                    <name>DeleteNtpServer</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($ntp-peer != null)
                        no ntp peer $ntp-peer
                    </command-string>
                     <command-string>
                        #if($../prefer == "true" AND $vrf == null)
                        no ntp server $ntp-server-address [key $key] [maxpoll $max-poll] [minpoll $min-poll] prefer [source $source] [version $version]
                        #else if($vrf == null)
                        no ntp server $ntp-server-address [key $key] [maxpoll $max-poll] [minpoll $min-poll] [source $source] [version $version]
                    </command-string>
                    <command-string>
                        #if($ntp-server-address != null AND $vrf !=null )
                        no ntp server [vrf $vrf] $ntp-server-address
                    </command-string>
                    <command-string>[no ntp trusted-key $authkey-id]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ntp/ntp-source-interface</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNtpInterface</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($ntp-source-interface != null)
                        ntp source $ntp-source-interface
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNtpInterface</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($ntp-source-interface != null)
                        ntp source $ntp-source-interface
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNtpInterface</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($ntp-source-interface != null)
                        no ntp source $ntp-source-interface
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ntp/ntp-server/ntp-server-address</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseNtpServer</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if ($../key != null AND $../max-poll != null AND $../min-poll != null AND $../prefer == "true" AND $../source != null AND $../version != null)
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll minpoll $min-poll prefer source $../source version $../version
                        #else if($../vrf != null AND $../prefer == "true")
                        ntp server vrf $../vrf $ntp-server-address prefer
                        #else if($../vrf !== null AND $../prefer == "false")
                        ntp server vrf $../vrf $ntp-server-address
                        #else if ($../key != null AND $../max-poll != null AND $../min-poll != null AND $../prefer == "true" AND $../source != null)
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll minpoll $../min-poll prefer source $../source
                        #else if ($../key != null AND $../max-poll != null AND $../min-poll != null AND $../prefer == "true" AND $../version != null)
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll minpoll $../min-poll prefer version $../version
                        #else if ($../key != null AND $../max-poll != null AND $../min-poll != null AND $../source != null AND $../version != null)
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll minpoll $../min-poll source $../source version $../version
                        #else if ($../key != null AND $../max-poll != null AND $../prefer == "true" AND $../source != null AND $../version != null)
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll prefer source $../source version $../version
                        #else if ($../key != null AND $../min-poll != null AND $../prefer == "true" AND $../source != null AND $../version != null)
                        ntp server $ntp-server-address key $../key minpoll $../min-poll prefer source $../source version $../version
                        #else if ($../key != null AND $../max-poll != null AND $../min-poll != null AND $../prefer == "true")
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll minpoll $../min-poll prefer
                        #else if ($../key != null AND $../max-poll != null AND $../min-poll != null AND $../source != null)
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll minpoll $../min-poll source $../source
                        #else if ($../key != null AND $../max-poll != null AND $../min-poll != null AND $../version != null)
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll minpoll $../min-poll version $../version
                        #else if ($../key != null AND $../max-poll != null AND $../prefer == "true" AND $../version != null)
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll prefer version $../version
                        #else if ($../key != null AND $../max-poll != null AND $../source != null AND $../version != null)
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll source $../source version $../version
                        #else if ($../key != null AND $../min-poll != null AND $../source != null AND $../prefer == "true")
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll prefer source $../source
                        #else if ($../key != null AND $../min-poll != null AND $../version != null AND $../prefer == "true")
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll prefer version $../version
                        #else if ($../key != null AND $../min-poll != null AND $../version != null AND $../source != null)
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll source $../source version $../version
                        #else if ($../key != null AND $../prefer == "true" AND $../version != null AND $../source != null)
                        ntp server $ntp-server-address key $../key prefer source $../source version $../version
                        #else if ($../source != null AND $../max-poll != null AND $../min-poll != null AND $../prefer == "true")
                        ntp server $ntp-server-address maxpoll $../max-poll minpoll $../min-poll prefer source $../source
                        #else if ($../version != null AND $../max-poll != null AND $../min-poll != null AND $../prefer == "true")
                        ntp server $ntp-server-address maxpoll $../max-poll minpoll $../min-poll prefer version $../version
                        #else if ($../version != null AND $../max-poll != null AND $../min-poll != null AND $../source != null)
                        ntp server $ntp-server-address maxpoll $../max-poll minpoll $../min-poll source $../source version $../version
                        #else if ($../version != null AND $../max-poll != null AND $../prefer == "true" AND $../source != null)
                        ntp server $ntp-server-address maxpoll $../max-poll prefer source $../source version $../version
                        #else if ($../version != null AND $../min-poll != null AND $../prefer == "true" AND $../source != null)
                        ntp server $ntp-server-address minpoll $../min-poll prefer source $../source version $../version
                        #else if($../key != null AND $../max-poll != null AND $../min-poll != null)
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll minpoll $min-poll
                        #else if($../prefer == "true" AND $../max-poll != null AND $../min-poll != null)
                        ntp server $ntp-server-address maxpoll $../max-poll minpoll $min-poll prefer
                        #else if($../source != null AND $../max-poll != null AND $../min-poll != null)
                        ntp server $ntp-server-address maxpoll $../max-poll minpoll $min-poll source $../source
                        #else if($../version != null AND $../max-poll != null AND $../min-poll != null)
                        ntp server $ntp-server-address maxpoll $../max-poll minpoll $min-poll version $../version
                        #else if($../source != null AND $../max-poll != null AND $../prefer == "true")
                        ntp server $ntp-server-address maxpoll $../max-poll minpoll $min-poll version $../version
                        #else if($../key != null AND $../source != null AND $../version != null)
                        ntp server $ntp-server-address key $../key source $../source version $../version
                        #else if($../key != null AND $../source != null AND $../prefer == "true")
                        ntp server $ntp-server-address key $../key prefer source $../source
                        #else if($../key != null AND $../version != null AND $../prefer == "true")
                        ntp server $ntp-server-address key $../key prefer version $../version
                        #else if($../key != null AND $../min-poll != null AND $../prefer == "true")
                        ntp server $ntp-server-address key $../key minpoll $../min-poll prefer
                        #else if($../key != null AND $../min-poll != null AND $../source != null)
                        ntp server $ntp-server-address key $../key minpoll $../min-poll source $../source
                        #else if($../key != null AND $../min-poll != null AND $../version != null)
                        ntp server $ntp-server-address key $../key minpoll $../min-poll version $../version
                        #else if($../key != null AND $../source != null AND $../max-poll != null)
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll source $../source
                        #else if($../key != null AND $../version != null AND $../max-poll != null)
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll version $../version
                        #else if($../key != null AND $../maxpoll != null AND $../prefer == "true")
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll prefer
                        #else if($../prefer == "true" AND $../source != null AND $../version != null)
                        ntp server $ntp-server-address prefer source $../source version $../version
                        #else if($../key != null AND $../version != null)
                        ntp server $ntp-server-address key $../key version $../version
                        #else if($../key != null AND $../max-poll != null)
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll
                        #else if($../key != null AND $../min-poll != null)
                        ntp server $ntp-server-address key $../key minpoll $../min-poll
                        #else if($../key != null AND $../source != null)
                        ntp server $ntp-server-address key $../key source $../source
                        #else if($../max-poll != null AND $../min-poll != null)
                        ntp server $ntp-server-address maxpoll $../max-poll minpoll $../min-poll
                        #else if($../max-poll != null AND $../source != null)
                        ntp server $ntp-server-address maxpoll $../max-poll source $../source
                        #else if($../min-poll != null AND $../source != null)
                        ntp server $ntp-server-address minpoll $../min-poll source $../source
                        #else if($../max-poll != null AND $../prefer == "true")
                        ntp server $ntp-server-address maxpoll $../max-poll prefer
                        #else if($../key != null AND $../prefer == "true")
                        ntp server $ntp-server-address key $../key prefer
                        #else if($../max-poll != null AND $../version != null)
                        ntp server $ntp-server-address maxpoll $../max-poll version $../version
                        #else if($../min-poll != null AND $../version != null)
                        ntp server $ntp-server-address minpoll $../min-poll version $../version
                        #else if($../prefer == "true" AND $../version != null)
                        ntp server $ntp-server-address prefer version $../version
                        #else if($../prefer == "true" AND $../source != null)
                        ntp server $ntp-server-address prefer source $../source
                        #else if($../source == true AND $../version != null)
                        ntp server $ntp-server-address source $../source version $../version
                        #else if($../key != null)
                        ntp server $ntp-server-address key $../key
                        #else if($../max-poll != null)
                        ntp server $ntp-server-address maxpoll $../max-poll
                        #else if($../source != null)
                        ntp server $ntp-server-address source $../source
                        #else if($../version != null)
                        ntp server $ntp-server-address version $../version
                        #else if($../min-poll != null)
                        ntp server $ntp-server-address minpoll $min-poll
                        #else if($../prefer == "true")
                        ntp server $ntp-server-address prefer
                        #else
                        ntp server $ntp-server-address key $../key maxpoll $../max-poll minpoll $../min-poll prefer source $../source version $../version
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateNtpServerAddress</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($ntp-server-address != null AND $../vrf == null AND $../prefer == "false")
                        ntp server $ntp-server-address
                        #else if($ntp-server-address != null AND $../vrf == null AND $../prefer == "true")
                        ntp server $ntp-server-address prefer
                        #else if($ntp-server-address != null AND $../vrf != null AND $../prefer == "false")
                        ntp server vrf $../vrf $ntp-server-address 
                        #else if($ntp-server-address != null AND $../vrf != null AND $../prefer == "true")
                        ntp server vrf $../vrf $ntp-server-address prefer
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNtpServerAddress</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($ntp-server-address != null AND $../vrf == null AND $../prefer == "false")
                        ntp server $ntp-server-address
                        #else if($ntp-server-address != null AND $../vrf == null AND $../prefer == "true")
                        ntp server $ntp-server-address prefer
                        #else if($ntp-server-address != null AND $../vrf != null AND $../prefer == "false")
                        ntp server vrf $../vrf $ntp-server-address 
                        #else if($ntp-server-address != null AND $../vrf != null AND $../prefer == "true")
                        ntp server vrf $../vrf $ntp-server-address prefer
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNtpServerAddress</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($ntp-server-address != null AND $../vrf == null AND $../prefer == "false")
                        no ntp server $ntp-server-address
                        #else if($ntp-server-address != null AND $../vrf == null AND $../prefer == "true")
                        no ntp server $ntp-server-address prefer
                        #else if($ntp-server-address != null AND $../vrf != null AND $../prefer == "false")
                        no ntp server vrf $../vrf $ntp-server-address 
                        #else if($ntp-server-address != null AND $../vrf != null AND $../prefer == "true")
                        no ntp server vrf $../vrf $ntp-server-address prefer
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/dns:dns-server</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseDNS</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($domain-name == null) 
                        ip domain lookup source-interface $lookup-source-interface
                        #else
                        ip domain name $domain-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateDNS</name>
                    <type>CREATE</type>
                    <command-string>ip domain lookup source-interface $lookup-source-interface</command-string>
                    <command-string>ip domain name $domain-name</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateDNS</name>
                    <type>UPDATE</type>
                    <command-string>ip domain lookup source-interface $lookup-source-interface</command-string>
					<command-string>ip domain name $domain-name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteDNS</name>
                    <type>DELETE</type>
                    <command-string>no ip domain lookup source-interface $lookup-source-interface</command-string>
                    <command-string>no ip domain name $domain-name</command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/dns:dns-server/name-server</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
				<device-operation>
                    <name>ParseNameServers</name>
                    <type>PARSE_TEMPLATE</type>
					<command-string>
					#if($vrf-name == null)
					ip name-server $server
					#else
					ip name-server vrf $vrf-name $server
					</command-string>
                </device-operation>
                <device-operation>
                    <name>CreateNameServers</name>
                    <type>CREATE</type>
                    <command-string>ip name-server [vrf $vrf-name] $server</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNameServers</name>
                    <type>DELETE</type>
                    <command-string>no ip name-server [vrf $vrf-name] $server</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ntp/ntp-server/key</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseNtpServerKey</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if ($key != null AND $../max-poll != null AND $../min-poll != null AND $../prefer == "true" AND $../source != null AND $../version != null)
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll minpoll $../min-poll prefer source $../source version $../version
                        #else if($../vrf != null AND $../prefer == "true")
                        ntp server vrf $../vrf $../ntp-server-address prefer
                        #else if($../vrf !== null AND $../prefer == "false")
                        ntp server vrf $../vrf $../ntp-server-address
                        #else if($key != null AND $../version != null)
                        ntp server $../ntp-server-address key $key version $../version
                        #else if($key != null AND $../max-poll != null)
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll
                        #else if($key != null AND $../min-poll != null)
                        ntp server $../ntp-server-address key $key minpoll $../min-poll
                        #else if($key != null AND $../source != null)
                        ntp server $../ntp-server-address key $key source $../source
                        #else if($key != null AND $../prefer == "true")
                        ntp server $../ntp-server-address key $key prefer
                        #else if($key != null)
                        ntp server $../ntp-server-address key $key
                        #else if($key != null AND $../max-poll != null AND $../min-poll != null)
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll minpoll $min-poll
                        #else if($key != null AND $../source != null AND $../version != null)
                        ntp server $../ntp-server-address key $key source $../source version $../version
                        #else if($key != null AND $../source != null AND $../prefer == "true")
                        ntp server $../ntp-server-address key $key prefer source $../source
                        #else if($key != null AND $../version != null AND $../prefer == "true")
                        ntp server $../ntp-server-address key $key prefer version $../version
                        #else if($key != null AND $../min-poll != null AND $../prefer == "true")
                        ntp server $../ntp-server-address key $key minpoll $../min-poll prefer
                        #else if($key != null AND $../min-poll != null AND $../source != null)
                        ntp server $../ntp-server-address key $key minpoll $../min-poll source $../source
                        #else if($key != null AND $../min-poll != null AND $../version != null)
                        ntp server $../ntp-server-address key $key minpoll $../min-poll version $../version
                        #else if($key != null AND $../source != null AND $../max-poll != null)
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll source $../source
                        #else if($key != null AND $../version != null AND $../max-poll != null)
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll version $../version
                        #else if($key != null AND $../maxpoll != null AND $../prefer == "true")
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll prefer
                        #else if ($key != null AND $../max-poll != null AND $../min-poll != null AND $../prefer == "true")
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll minpoll $../min-poll prefer
                        #else if ($key != null AND $../max-poll != null AND $../min-poll != null AND $../source != null)
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll minpoll $../min-poll source $../source
                        #else if ($key != null AND $../max-poll != null AND $../min-poll != null AND $../version != null)
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll minpoll $../min-poll version $../version
                        #else if ($key != null AND $../max-poll != null AND $../prefer == "true" AND $../version != null)
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll prefer version $../version
                        #else if ($key != null AND $../max-poll != null AND $../source != null AND $../version != null)
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll source $../source version $../version
                        #else if ($key != null AND $../min-poll != null AND $../source != null AND $../prefer == "true")
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll prefer source $../source
                        #else if ($key != null AND $../min-poll != null AND $../version != null AND $../prefer == "true")
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll prefer version $../version
                        #else if ($key != null AND $../min-poll != null AND $../version != null AND $../source != null)
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll source $../source version $../version
                        #else if ($key != null AND $../prefer == "true" AND $../version != null AND $../source != null)
                        ntp server $../ntp-server-address key $key prefer source $../source version $../version
                        #else if ($key != null AND $../max-poll != null AND $../min-poll != null AND $../prefer == "true" AND $../source != null)
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll minpoll $../min-poll prefer source $../source
                        #else if ($key != null AND $../max-poll != null AND $../min-poll != null AND $../prefer == "true" AND $../version != null)
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll minpoll $../min-poll prefer version $../version
                        #else if ($key != null AND $../max-poll != null AND $../min-poll != null AND $../source != null AND $../version != null)
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll minpoll $../min-poll source $../source version $../version
                        #else if ($key != null AND $../max-poll != null AND $../prefer == "true" AND $../source != null AND $../version != null)
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll prefer source $../source version $../version
                        #else if ($key != null AND $../min-poll != null AND $../prefer == "true" AND $../source != null AND $../version != null)
                        ntp server $../ntp-server-address key $key minpoll $../min-poll prefer source $../source version $../version
                        #else
                        ntp server $../ntp-server-address key $key maxpoll $../max-poll minpoll $../min-poll prefer source $../source version $../version
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateNtpServerKey</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../prefer == "true")
                        ntp server $../ntp-server-address [key $key] [maxpoll $../max-poll] [minpoll $../min-poll] prefer [source $../source] [version $../version]
                        #else
                        ntp server $../ntp-server-address [key $key] [maxpoll $../max-poll] [minpoll $../min-poll] [source $../source] [version $../version]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNtpServerKey</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../prefer == "true")
                        ntp server $../ntp-server-address [key $key] [maxpoll $../max-poll] [minpoll $../min-poll] prefer [source $../source] [version $../version]
                        #else
                        ntp server $../ntp-server-address [key $key] [maxpoll $../max-poll] [minpoll $../min-poll] [source $../source] [version $../version]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNtpServerKey</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../prefer == "true")
                        no ntp server $../ntp-server-address [key $key] [maxpoll $../max-poll] [minpoll $../min-poll] prefer [source $../source] [version $../version]
                        #else
                        no ntp server $../ntp-server-address [key $key] [maxpoll $../max-poll] [minpoll $../min-poll] [source $../source] [version $../version]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ntp/ntp-server/max-poll</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseNtpServerMaxpoll</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if ($../key != null AND $max-poll != null AND $../min-poll != null AND $../prefer == "true" AND $../source != null AND $../version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll minpoll $../min-poll prefer source $../source version $../version
                        #else if($../vrf != null AND $../prefer == "true")
                        ntp server vrf $../vrf $../ntp-server-address prefer
                        #else if($../vrf !== null AND $../prefer == "false")
                        ntp server vrf $../vrf $../ntp-server-address
                        #else if($../key != null AND $max-poll != null)
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll
                        #else if($max-poll != null AND $../min-poll != null)
                        ntp server $../ntp-server-address maxpoll $max-poll minpoll $../min-poll
                        #else if($max-poll != null AND $../source != null)
                        ntp server $../ntp-server-address maxpoll $max-poll source $../source
                        #else if($max-poll != null AND $../prefer == "true")
                        ntp server $../ntp-server-address maxpoll $max-poll prefer
                        #else if($max-poll != null AND $../version != null)
                        ntp server $../ntp-server-address maxpoll $max-poll version $../version
                        #else if($max-poll != null)
                        ntp server $../ntp-server-address maxpoll $max-poll
                        #else if($../key != null AND $max-poll != null AND $../min-poll != null)
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll minpoll $min-poll
                        #else if($../prefer == "true" AND $max-poll != null AND $../min-poll != null)
                        ntp server $../ntp-server-address maxpoll $max-poll minpoll $min-poll prefer
                        #else if($../source != null AND $max-poll != null AND $../min-poll != null)
                        ntp server $../ntp-server-address maxpoll $max-poll minpoll $min-poll source $../source
                        #else if($../version != null AND $max-poll != null AND $../min-poll != null)
                        ntp server $../ntp-server-address maxpoll $max-poll minpoll $min-poll version $../version
                        #else if($../source != null AND $max-poll != null AND $../prefer == "true")
                        ntp server $../ntp-server-address maxpoll $max-poll minpoll $min-poll version $../version
                        #else if($../key != null AND $../source != null AND $max-poll != null)
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll source $../source
                        #else if($../key != null AND $../version != null AND $max-poll != null)
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll version $../version
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll prefer
                        #else if ($../key != null AND $max-poll != null AND $../min-poll != null AND $../prefer == "true")
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll minpoll $../min-poll prefer
                        #else if ($../key != null AND $max-poll != null AND $../min-poll != null AND $../source != null)
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll minpoll $../min-poll source $../source
                        #else if ($../key != null AND $max-poll != null AND $../min-poll != null AND $../version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll minpoll $../min-poll version $../version
                        #else if ($../key != null AND $max-poll != null AND $../prefer == "true" AND $../version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll prefer version $../version
                        #else if ($../key != null AND $max-poll != null AND $../source != null AND $../version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll source $../source version $../version
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll prefer source $../source
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll prefer version $../version
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll source $../source version $../version
                        #else if ($../source != null AND $max-poll != null AND $../min-poll != null AND $../prefer == "true")
                        ntp server $../ntp-server-address maxpoll $max-poll minpoll $../min-poll prefer source $../source
                        #else if ($../version != null AND $max-poll != null AND $../min-poll != null AND $../prefer == "true")
                        ntp server $../ntp-server-address maxpoll $max-poll minpoll $../min-poll prefer version $../version
                        #else if ($../version != null AND $max-poll != null AND $../min-poll != null AND $../source != null)
                        ntp server $../ntp-server-address maxpoll $max-poll minpoll $../min-poll source $../source version $../version
                        #else if ($../version != null AND $max-poll != null AND $../prefer == "true" AND $../source != null)
                        ntp server $../ntp-server-address maxpoll $max-poll prefer source $../source version $../version
                        #else if ($../key != null AND $max-poll != null AND $../min-poll != null AND $../prefer == "true" AND $../source != null)
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll minpoll $../min-poll prefer source $../source
                        #else if ($../key != null AND $max-poll != null AND $../min-poll != null AND $../prefer == "true" AND $../version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll minpoll $../min-poll prefer version $../version
                        #else if ($../key != null AND $max-poll != null AND $../min-poll != null AND $../source != null AND $../version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll minpoll $../min-poll source $../source version $../version
                        #else if ($../key != null AND $max-poll != null AND $../prefer == "true" AND $../source != null AND $../version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll prefer source $../source version $../version
                        #else
                        ntp server $../ntp-server-address key $../key maxpoll $max-poll minpoll $../min-poll prefer source $../source version $../version
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateNtpServerMaxpoll</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../prefer == "true")
                        ntp server $../ntp-server-address [key $../key] [maxpoll $max-poll] [minpoll $../min-poll] prefer [source $../source] [version $../version]
                        #else
                        ntp server $../ntp-server-address [key $../key] [maxpoll $max-poll] [minpoll $../min-poll] [source $../source] [version $../version]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNtpServerMaxpoll</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../prefer == "true")
                        ntp server $../ntp-server-address [key $../key] [maxpoll $max-poll] [minpoll $../min-poll] prefer [source $../source] [version $../version]
                        #else
                        ntp server $../ntp-server-address [key $../key] [maxpoll $max-poll] [minpoll $../min-poll] [source $../source] [version $../version]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNtpServerMaxpoll</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../prefer == "true")
                        no ntp server $../ntp-server-address [key $../key] [maxpoll $max-poll] [minpoll $../min-poll] prefer [source $../source] [version $../version]
                        #else
                        no ntp server $../ntp-server-address [key $../key] [maxpoll $max-poll] [minpoll $../min-poll] [source $../source] [version $../version]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ntp/ntp-server/source</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseNtpServerSource</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if ($../key != null AND $../max-poll != null AND $../min-poll != null AND $../prefer == "true" AND $source != null AND $../version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $../min-poll prefer source $source version $../version
                        #else if($../vrf != null AND $../prefer == "true")
                        ntp server vrf $../vrf $../ntp-server-address prefer
                        #else if($../vrf !== null AND $../prefer == "false")
                        ntp server vrf $../vrf $../ntp-server-address
                        #else if($../key != null AND $source != null)
                        ntp server $../ntp-server-address key $../key source $source
                        #else if($../max-poll != null AND $source != null)
                        ntp server $../ntp-server-address maxpoll $../max-poll source $source
                        #else if($../min-poll != null AND $source != null)
                        ntp server $../ntp-server-address minpoll $../min-poll source $source
                        #else if($../prefer == "true" AND $source != null)
                        ntp server $../ntp-server-address prefer source $source
                        #else if($source == true AND $../version != null)
                        ntp server $../ntp-server-address source $source version $../version
                        #else if($source != null)
                        ntp server $../ntp-server-address source $source
                        #else if($source != null AND $../max-poll != null AND $../min-poll != null)
                        ntp server $../ntp-server-address maxpoll $../max-poll minpoll $min-poll source $source
                        #else if($source != null AND $../max-poll != null AND $../prefer == "true")
                        #else if($../key != null AND $source != null AND $../version != null)
                        ntp server $../ntp-server-address key $../key source $source version $../version
                        #else if($../key != null AND $source != null AND $../prefer == "true")
                        ntp server $../ntp-server-address key $../key prefer source $source
                        #else if($../key != null AND $../min-poll != null AND $source != null)
                        ntp server $../ntp-server-address key $../key minpoll $../min-poll source $source
                        #else if($../key != null AND $source != null AND $../max-poll != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll source $source
                        #else if($../prefer == "true" AND $source != null AND $../version != null)
                        ntp server $../ntp-server-address prefer source $source version $../version
                        #else if ($../key != null AND $../max-poll != null AND $../min-poll != null AND $source != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $../min-poll source $source
                        #else if ($../key != null AND $../max-poll != null AND $source != null AND $../version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll source $source version $../version
                        #else if ($../key != null AND $../min-poll != null AND $source != null AND $../prefer == "true")
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll prefer source $source
                        #else if ($../key != null AND $../min-poll != null AND $../version != null AND $source != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll source $source version $../version
                        #else if ($../key != null AND $../prefer == "true" AND $../version != null AND $source != null)
                        ntp server $../ntp-server-address key $../key prefer source $source version $../version
                        #else if ($source != null AND $../max-poll != null AND $../min-poll != null AND $../prefer == "true")
                        ntp server $../ntp-server-address maxpoll $../max-poll minpoll $../min-poll prefer source $source
                        #else if ($../version != null AND $../max-poll != null AND $../min-poll != null AND $source != null)
                        ntp server $../ntp-server-address maxpoll $../max-poll minpoll $../min-poll source $source version $../version
                        #else if ($../version != null AND $../max-poll != null AND $../prefer == "true" AND $source != null)
                        ntp server $../ntp-server-address maxpoll $../max-poll prefer source $source version $../version
                        #else if ($../version != null AND $../min-poll != null AND $../prefer == "true" AND $source != null)
                        ntp server $../ntp-server-address minpoll $../min-poll prefer source $source version $../version
                        #else if ($../key != null AND $../max-poll != null AND $../min-poll != null AND $../prefer == "true" AND $source != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $../min-poll prefer source $source
                        #else if ($../key != null AND $../max-poll != null AND $../min-poll != null AND $source != null AND $../version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $../min-poll source $source version $../version
                        #else if ($../key != null AND $../max-poll != null AND $../prefer == "true" AND $source != null AND $../version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll prefer source $source version $../version
                        #else if ($../key != null AND $../min-poll != null AND $../prefer == "true" AND $source != null AND $../version != null)
                        ntp server $../ntp-server-address key $../key minpoll $../min-poll prefer source $source version $../version
                        #else
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $../min-poll prefer source $source version $../version
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateNtpServerSource</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../prefer == "true")
                        ntp server $../ntp-server-address [key $../key] [maxpoll $../max-poll] [minpoll $../min-poll] prefer [source $source] [version $../version]
                        #else
                        ntp server $../ntp-server-address [key $../key] [maxpoll $../max-poll] [minpoll $../min-poll] [source $source] [version $../version]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNtpServerSource</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../prefer == "true")
                        ntp server $../ntp-server-address [key $../key] [maxpoll $../max-poll] [minpoll $../min-poll] prefer [source $source] [version $../version]
                        #else
                        ntp server $../ntp-server-address [key $../key] [maxpoll $../max-poll] [minpoll $../min-poll] [source $source] [version $../version]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNtpServerSource</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../prefer == "true")
                        no ntp server $../ntp-server-address [key $../key] [maxpoll $../max-poll] [minpoll $../min-poll] prefer [source $source] [version $../version]
                        #else
                        no ntp server $../ntp-server-address [key $../key] [maxpoll $../max-poll] [minpoll $../min-poll] [source $source] [version $../version]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ntp/ntp-server/min-poll</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseNtpServerMinpoll</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if ($../key != null AND $../max-poll != null AND $min-poll != null AND $../prefer == "true" AND $../source != null AND $../version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $min-poll prefer source $../source version $../version
                        #else if($../vrf != null AND $../prefer == "true")
                        ntp server vrf $../vrf $../ntp-server-address prefer
                        #else if($../vrf !== null AND $../prefer == "false")
                        ntp server vrf $../vrf $../ntp-server-address
                        #else if($../key != null AND $min-poll != null)
                        ntp server $../ntp-server-address key $../key minpoll $min-poll
                        #else if($../max-poll != null AND $min-poll != null)
                        ntp server $../ntp-server-address maxpoll $../max-poll minpoll $min-poll
                        #else if($min-poll != null AND $../source != null)
                        ntp server $../ntp-server-address minpoll $min-poll source $../source
                        #else if($min-poll != null AND $../version != null)
                        ntp server $../ntp-server-address minpoll $min-poll version $../version
                        #else if($min-poll != null)
                        ntp server $../ntp-server-address minpoll $min-poll
                        #else if($../key != null AND $../max-poll != null AND $min-poll != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $min-poll
                        #else if($../prefer == "true" AND $../max-poll != null AND $min-poll != null)
                        ntp server $../ntp-server-address maxpoll $../max-poll minpoll $min-poll prefer
                        #else if($../source != null AND $../max-poll != null AND $min-poll != null)
                        ntp server $../ntp-server-address maxpoll $../max-poll minpoll $min-poll source $../source
                        #else if($../version != null AND $../max-poll != null AND $min-poll != null)
                        ntp server $../ntp-server-address maxpoll $../max-poll minpoll $min-poll version $../version
                        ntp server $../ntp-server-address maxpoll $../max-poll minpoll $min-poll version $../version
                        #else if($../key != null AND $min-poll != null AND $../prefer == "true")
                        ntp server $../ntp-server-address key $../key minpoll $min-poll prefer
                        #else if($../key != null AND $min-poll != null AND $../source != null)
                        ntp server $../ntp-server-address key $../key minpoll $min-poll source $../source
                        #else if($../key != null AND $min-poll != null AND $../version != null)
                        ntp server $../ntp-server-address key $../key minpoll $min-poll version $../version
                        #else if ($../key != null AND $../max-poll != null AND $min-poll != null AND $../prefer == "true")
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $min-poll prefer
                        #else if ($../key != null AND $../max-poll != null AND $min-poll != null AND $../source != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $min-poll source $../source
                        #else if ($../key != null AND $../max-poll != null AND $min-poll != null AND $../version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $min-poll version $../version
                        #else if ($../key != null AND $min-poll != null AND $../source != null AND $../prefer == "true")
                        #else if ($../key != null AND $min-poll != null AND $../version != null AND $../prefer == "true")
                        #else if ($../key != null AND $min-poll != null AND $../version != null AND $../source != null)
                        #else if ($../source != null AND $../max-poll != null AND $min-poll != null AND $../prefer == "true")
                        ntp server $../ntp-server-address maxpoll $../max-poll minpoll $min-poll prefer source $../source
                        #else if ($../version != null AND $../max-poll != null AND $min-poll != null AND $../prefer == "true")
                        ntp server $../ntp-server-address maxpoll $../max-poll minpoll $min-poll prefer version $../version
                        #else if ($../version != null AND $../max-poll != null AND $min-poll != null AND $../source != null)
                        ntp server $../ntp-server-address maxpoll $../max-poll minpoll $min-poll source $../source version $../version
                        #else if ($../version != null AND $min-poll != null AND $../prefer == "true" AND $../source != null)
                        ntp server $../ntp-server-address minpoll $min-poll prefer source $../source version $../version
                        #else if ($../key != null AND $../max-poll != null AND $min-poll != null AND $../prefer == "true" AND $../source != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $min-poll prefer source $../source
                        #else if ($../key != null AND $../max-poll != null AND $min-poll != null AND $../prefer == "true" AND $../version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $min-poll prefer version $../version
                        #else if ($../key != null AND $../max-poll != null AND $min-poll != null AND $../source != null AND $../version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $min-poll source $../source version $../version
                        #else if ($../key != null AND $min-poll != null AND $../prefer == "true" AND $../source != null AND $../version != null)
                        ntp server $../ntp-server-address key $../key minpoll $min-poll prefer source $../source version $../version
                        #else
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $min-poll prefer source $../source version $../version
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateNtpServerMinpoll</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../prefer == "true")
                        ntp server $../ntp-server-address [key $../key] [maxpoll $../max-poll] [minpoll $min-poll] prefer [source $../source] [version $../version]
                        #else
                        ntp server $../ntp-server-address [key $../key] [maxpoll $../max-poll] [minpoll $min-poll] [source $../source] [version $../version]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNtpServerMinpoll</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../prefer == "true")
                        ntp server $../ntp-server-address [key $../key] [maxpoll $../max-poll] [minpoll $min-poll] prefer [source $../source] [version $../version]
                        #else
                        ntp server $../ntp-server-address [key $../key] [maxpoll $../max-poll] [minpoll $min-poll] [source $../source] [version $../version]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNtpServerMinpoll</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../prefer == "true")
                        no ntp server $../ntp-server-address [key $../key] [maxpoll $../max-poll] [minpoll $min-poll] prefer [source $../source] [version $../version]
                        #else
                        no ntp server $../ntp-server-address [key $../key] [maxpoll $../max-poll] [minpoll $min-poll] [source $../source] [version $../version]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ntp/ntp-server/version</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseNtpServerVersion</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if ($../key != null AND $../max-poll != null AND $../min-poll != null AND $../prefer == "true" AND $../source != null AND $version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $../min-poll prefer source $../source version $version
                        #else if($../vrf != null AND $../prefer == "true")
                        ntp server vrf $../vrf $../ntp-server-address prefer
                        #else if($../vrf !== null AND $../prefer == "false")
                        ntp server vrf $../vrf $../ntp-server-address
                        #else if($../key != null AND $version != null)
                        ntp server $../ntp-server-address key $../key version $version
                        #else if($../max-poll != null AND $version != null)
                        ntp server $../ntp-server-address maxpoll $../max-poll version $version
                        #else if($../min-poll != null AND $version != null)
                        ntp server $../ntp-server-address minpoll $../min-poll version $version
                        #else if($../prefer == "true" AND $version != null)
                        ntp server $../ntp-server-address prefer version $version
                        #else if($../source == true AND $version != null)
                        ntp server $../ntp-server-address source $../source version $version
                        #else if($version != null)
                        ntp server $../ntp-server-address version $version
                        #else if($version != null AND $../max-poll != null AND $../min-poll != null)
                        ntp server $../ntp-server-address maxpoll $../max-poll minpoll $min-poll version $version
                        ntp server $../ntp-server-address maxpoll $../max-poll minpoll $min-poll version $version
                        #else if($../key != null AND $../source != null AND $version != null)
                        ntp server $../ntp-server-address key $../key source $../source version $version
                        #else if($../key != null AND $version != null AND $../prefer == "true")
                        ntp server $../ntp-server-address key $../key prefer version $version
                        #else if($../key != null AND $../min-poll != null AND $version != null)
                        ntp server $../ntp-server-address key $../key minpoll $../min-poll version $version
                        #else if($../key != null AND $version != null AND $../max-poll != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll version $version
                        #else if($../prefer == "true" AND $../source != null AND $version != null)
                        ntp server $../ntp-server-address prefer source $../source version $version
                        #else if ($../key != null AND $../max-poll != null AND $../min-poll != null AND $version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $../min-poll version $version
                        #else if ($../key != null AND $../max-poll != null AND $../prefer == "true" AND $version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll prefer version $version
                        #else if ($../key != null AND $../max-poll != null AND $../source != null AND $version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll source $../source version $version
                        #else if ($../key != null AND $../min-poll != null AND $version != null AND $../prefer == "true")
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll prefer version $version
                        #else if ($../key != null AND $../min-poll != null AND $version != null AND $../source != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll source $../source version $version
                        #else if ($../key != null AND $../prefer == "true" AND $version != null AND $../source != null)
                        ntp server $../ntp-server-address key $../key prefer source $../source version $version
                        #else if ($version != null AND $../max-poll != null AND $../min-poll != null AND $../prefer == "true")
                        ntp server $../ntp-server-address maxpoll $../max-poll minpoll $../min-poll prefer version $version
                        #else if ($version != null AND $../max-poll != null AND $../min-poll != null AND $../source != null)
                        ntp server $../ntp-server-address maxpoll $../max-poll minpoll $../min-poll source $../source version $version
                        #else if ($version != null AND $../max-poll != null AND $../prefer == "true" AND $../source != null)
                        ntp server $../ntp-server-address maxpoll $../max-poll prefer source $../source version $version
                        #else if ($version != null AND $../min-poll != null AND $../prefer == "true" AND $../source != null)
                        ntp server $../ntp-server-address minpoll $../min-poll prefer source $../source version $version
                        #else if ($../key != null AND $../max-poll != null AND $../min-poll != null AND $../prefer == "true" AND $version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $../min-poll prefer version $version
                        #else if ($../key != null AND $../max-poll != null AND $../min-poll != null AND $../source != null AND $version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $../min-poll source $../source version $version
                        #else if ($../key != null AND $../max-poll != null AND $../prefer == "true" AND $../source != null AND $version != null)
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll prefer source $../source version $version
                        #else if ($../key != null AND $../min-poll != null AND $../prefer == "true" AND $../source != null AND $version != null)
                        ntp server $../ntp-server-address key $../key minpoll $../min-poll prefer source $../source version $version
                        #else
                        ntp server $../ntp-server-address key $../key maxpoll $../max-poll minpoll $../min-poll prefer source $../source version $version
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateNtpServerVersion</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../prefer == "true")
                        ntp server $../ntp-server-address [key $../key] [maxpoll $../max-poll] [minpoll $../min-poll] prefer [source $../source] [version $version]
                        #else
                        ntp server $../ntp-server-address [key $../key] [maxpoll $../max-poll] [minpoll $../min-poll] [source $../source] [version $version]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNtpServerVersion</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../prefer == "true")
                        ntp server $../ntp-server-address [key $../key] [maxpoll $../max-poll] [minpoll $../min-poll] prefer [source $../source] [version $../version]
                        #else
                        ntp server $../ntp-server-address [key $../key] [maxpoll $../max-poll] [minpoll $../min-poll] [source $../source] [version $../version]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNtpServerVersion</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../prefer == "true")
                        no ntp server $../ntp-server-address [key $../key] [maxpoll $../max-poll] [minpoll $../min-poll] prefer [source $../source] [version $version]
                        #else
                        no ntp server $../ntp-server-address [key $../key] [maxpoll $../max-poll] [minpoll $../min-poll] [source $../source] [version $version]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
         <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ntp/access-group</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNtpAccessGroup</name>
                    <type>CREATE</type>
                    <command-string>
                        ntp access-group $access-group-options $access-list-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateAccessGroup</name>
                    <type>UPDATE</type>
                    <command-string>
                        ntp access-group $access-group-options $access-list-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNtpAccessGroup</name>
                    <type>DELETE</type>
                    <command-string>
                        no ntp access-group $access-group-options $access-list-name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/l3features:dhcp-server</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ConfigureDHCPServer</name>
                    <type>CREATE</type>
                    <command-string>ip dhcp pool $pool-name</command-string>
		    <command-string>
                        #if($pool-vrf != null)
                        vrf $pool-vrf
                    </command-string>
                    <command-string>network $network $mask</command-string>
                    <command-string>
                        #if ($domain-name != null)
                        domain-name $domain-name
                    </command-string>
                    <command-string>
                        #if ($dns-server-ip != null)
                        dns-server $dns-server-ip
                    </command-string>
                    <command-string>default-router $default-router</command-string>
                    <command-string>
                        #if ($lease != null)
                        lease $lease
                    </command-string>
                </device-operation>
                 <device-operation>
                    <name>UpdateDHCPServer</name>
                    <type>UPDATE</type>
                    <command-string>ip dhcp pool $pool-name</command-string>
                    <command-string>
                        #if($pool-vrf != null)
                        vrf $pool-vrf
                    </command-string>
                    <command-string>
                        #if($network != null AND $mask != null)
                        network $network $mask
                    </command-string>
                    <command-string>
                        #if ($domain-name != null)
                        domain-name $domain-name
                    </command-string>
                    <command-string>
                        #if ($dns-server-ip != null)
                        dns-server $dns-server-ip
                    </command-string>
                    <command-string>
                        #if($default-router != null)
                        default-router $default-router
                    </command-string>
                     <command-string>
                        #if ($lease != null)
                        lease $lease
                    </command-string>
                </device-operation>
                <!--device-operation>
                    <name>DeleteDHCPServer</name>
                    <type>DELETE</type>
                    <command-string>no ip dhcp pool $pool-name</command-string>
                </device-operation-->
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:dhcp-server/excluded-address</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseDHCPServerExcludedEntry</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($vrf-name != null)
                        ip dhcp excluded-address vrf $vrf-name $low-ipaddress $high-ipaddress
                        #else
                        ip dhcp excluded-address $low-ipaddress $high-ipaddress
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateDHCPServerExcludedEntry</name>
                    <type>CREATE</type>
                    <command-string>
                        #if ($high-ipaddress != null AND $vrf-name == null)
                        ip dhcp excluded-address $low-ipaddress $high-ipaddress
                        #else if ($high-ipaddress != null AND $vrf-name != null)
                        ip dhcp excluded-address vrf $vrf-name $low-ipaddress $high-ipaddress 
                        #else
                        ip dhcp excluded-address $low-ipaddress
                    </command-string>
                </device-operation>
		<device-operation>
                    <name>DeleteDHCPServerExcludedEntry</name>
                    <type>DELETE</type>
                    <command-string>
                        #if ($high-ipaddress != null AND $vrf-name == null)
                        no ip dhcp excluded-address $low-ipaddress $high-ipaddress
                        #else if ($high-ipaddress != null AND $vrf-name != null)
                        no ip dhcp excluded-address vrf $vrf-name $low-ipaddress $high-ipaddress 
                        #else
                        no ip dhcp excluded-address $low-ipaddress
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:dhcp-server/dhcp</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ConfigureDHCPServer</name>
                    <type>CREATE</type>
                    <command-string>ip dhcp pool $pool-name</command-string>
                    <command-string>
                        #if($pool-vrf != null)
                        vrf $pool-vrf
                    </command-string>
                    <command-string>network $network $mask</command-string>
                    <command-string>
                        #if ($domain-name != null)
                        domain-name $domain-name
                    </command-string>
                    <command-string>
                        #if ($dns-server-ip != null)
                        dns-server $dns-server-ip
                    </command-string>
                    <command-string>default-router $default-router</command-string>
                </device-operation>
                 <device-operation>
                    <name>UpdateDHCPPool</name>
                    <type>UPDATE</type>
                    <command-string>ip dhcp pool $pool-name</command-string>
                    <command-string>
                        #if($pool-vrf != null)
                        vrf $pool-vrf
                    </command-string>
                    <command-string>
                        #if($network != null AND $mask != null)
                        network $network $mask
                    </command-string>
                    <command-string>
                        #if ($domain-name != null)
                        domain-name $domain-name
                    </command-string>
                    <command-string>
                        #if ($dns-server-ip != null)
                        dns-server $dns-server-ip
                    </command-string>
                    <command-string>
                        #if($default-router != null)
                        default-router $default-router
                    </command-string>
                     <command-string>
                        #if ($lease != null)
                        lease $lease
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteDHCPServer</name>
                    <type>DELETE</type>
                    <command-string>no ip dhcp pool $pool-name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:dhcp-server/dhcp/excluded-address</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateDHCPServerExcludedEntry</name>
                    <type>CREATE</type>
                    <command-string>
                        #if ($high-ipaddress != null AND $vrf-name == null)
                        ip dhcp excluded-address $low-ipaddress $high-ipaddress
                        #else if ($high-ipaddress != null AND $vrf-name != null)
                        ip dhcp excluded-address vrf $vrf-name $low-ipaddress $high-ipaddress
                        #else
                        ip dhcp excluded-address $low-ipaddress
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteDHCPServerExcludedEntry</name>
                    <type>DELETE</type>
                    <command-string>
                        #if ($high-ipaddress != null AND $vrf-name == null)
                        no ip dhcp excluded-address $low-ipaddress $high-ipaddress
                        #else if ($high-ipaddress != null AND $vrf-name != null)
                        no ip dhcp excluded-address vrf $vrf-name $low-ipaddress $high-ipaddress
                        #else
                        no ip dhcp excluded-address $low-ipaddress
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:call-home</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateCallHome</name>
                    <type>CREATE</type>
                    <command-string>call-home</command-string>
                    <command-string>profile $profile</command-string>
                    <command-string>destination address http $destination</command-string>
                    <command-string>no destination address http $no-destination</command-string>
                    <command-string>crypto pki trustpoint SLA-TrustPoint</command-string>
                    <command-string>enrollment terminal</command-string>
                    <command-string>revocation-check none</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateCallHome</name>
                    <type>UPDATE</type>
                    <command-string>call-home</command-string>
                    <command-string>profile $profile</command-string>
                    <command-string>destination address http $destination</command-string>
                    <command-string>no destination address http $no-destination</command-string>
                    <command-string>crypto pki trustpoint SLA-TrustPoint</command-string>
                    <command-string>enrollment terminal</command-string>
                    <command-string>revocation-check none</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteCallHome</name>
                    <type>DELETE</type>
                    <command-string>no service call-home</command-string>
                    <command-string>no call-home</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:ssh</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
				
                <device-operation>
                    <name>CreateSSH</name>
                    <type>CREATE</type>
                    <command-string>crypto key generate rsa [label $label] modulus $key-modulus</command-string>
                    <command-string>[ip ssh version $version]</command-string>
                    <command-string>
                        #if($scp-enable == "true")
                        ip scp server enable
                    </command-string>
                    <command-string>[ip ssh time-out $timeout]</command-string>
                    <command-string>[ip ssh authentication-retries $auth-retries-count]</command-string>
                    <command-string>[ip ssh source-interface $source-interface]</command-string>
                    <command-string>ip ssh rsa keypair-name $rsa-keypair-name</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateSSH</name>
                    <type>UPDATE</type>
                    <command-string>crypto key generate rsa [label $label] modulus $key-modulus</command-string>
                    <command-string>[ip ssh version $version]</command-string>
                    <command-string>
                        #if($scp-enable == "true")
                        ip scp server enable
                    </command-string>
                    <command-string>[ip ssh time-out $timeout]</command-string>
                    <command-string>[ip ssh authentication-retries $auth-retries-count]</command-string>
                    <command-string>[ip ssh source-interface $source-interface]</command-string>
                    <command-string>ip ssh rsa keypair-name $rsa-keypair-name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteSSH</name>
                    <type>DELETE</type>
                    <command-string>[no ip ssh version $version]</command-string>
                    <command-string>
                        #if($scp-enable == "true")
                        ip scp server enable
                    </command-string>
                    <command-string>[no ip ssh time-out]</command-string>
                    <command-string>[no ip ssh authentication-retries]</command-string>
                    <command-string>[no ip ssh source-interface $source-interface]</command-string>
                    <command-string>no ip ssh rsa keypair-name $rsa-keypair-name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:vty-configs/vty-config</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseVTYConfig</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>line vty $min-vty $max-vty</command-string>
                    <command-string>
                        #if($network-mask != null AND $acl-rule-number != null)
                        access-list $acl-rule-number permit $network-mask
                    </command-string>
                    <command-string>[exec-timeout $timeout 0]</command-string>
                    <command-string>
                        #if($logging-synchronous == "true")
                        logging synchronous
                    </command-string>
                    <command-string>[login authentication $auth-type]</command-string>
                    <command-string>
                        #if($acl-rule-number != null)
                        access-class $acl-rule-number in [$vrf]
                    </command-string>
                    <command-string>privilege level $privilege-level</command-string>
                    <command-string>history size $history-size</command-string>
                    <!--command-string>no privilege level $no-privilege-level </command-string-->
                    <!--command-string>
                        #if($no-password == "true")
                        no password
                    </command-string-->
                    <command-string>
                        #if($login-local == "true")
                        login local
                    </command-string>
                    <command-string>[transport input $transport-types-in]</command-string>
                    <command-string>[transport output $transport-types-out]</command-string>
                </device-operation>
                <device-operation>
                    <name>CreateVTYConfig</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($network-mask != null AND $acl-rule-number != null)
                        access-list $acl-rule-number permit $network-mask
                    </command-string>
                    <command-string>line vty $min-vty $max-vty</command-string>
                    <command-string>[exec-timeout $timeout 0]</command-string>
                    <command-string>
                        #if($logging-synchronous == "true")
                        logging synchronous
                    </command-string>
                    <command-string>[login authentication $auth-type]</command-string>
                    <command-string>
                        #if($acl-rule-number != null)
                        access-class $acl-rule-number in [$vrf]
                    </command-string>
                    <command-string>privilege level $privilege-level</command-string>
                    <command-string>history size $history-size</command-string>
                    <command-string>no privilege level $no-privilege-level </command-string>
                    <command-string>
                        #if($no-password == "true")
                        no password
                    </command-string>
                    <command-string>
                        #if($login-local == "true")
                        login local
                    </command-string>
                    <command-string>[transport input $transport-types-in]</command-string>
                    <command-string>[transport output $transport-types-out]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateVTYConfig</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($network-mask != null AND $acl-rule-number != null)
                        access-list $acl-rule-number permit $network-mask
                    </command-string>
                    <command-string>line vty $min-vty $max-vty</command-string>
                    <command-string>[exec-timeout $timeout 0]</command-string>
                    <command-string>
                        #if($logging-synchronous == "true")
                        logging synchronous
                    </command-string>
                    <command-string>[login authentication $auth-type]</command-string>
                    <command-string>
                        #if($acl-rule-number == null AND $acl-rule-number.%previous != null)
                        no access-class $acl-rule-number.%previous in [$vrf]
                        #else if($acl-rule-number != null)
                        access-class $acl-rule-number in [$vrf]
                    </command-string>
                    <command-string>privilege level $privilege-level</command-string>
                    <command-string>history size $history-size</command-string>
                   <command-string>
                        #if ($privilege-level != null AND $privilege-level.%previous == null)
                        privilege level $privilege-level
                        #else if ($privilege-level.%previous != null AND $privilege-level == null)
                        no privilege level $privilege-level.%previous
                    </command-string>
                    <command-string>
                        #if($no-password == "true")
                        no password
                    </command-string>
                    <!--command-string>
                        #if($login-local == "true")
                        login local
                    </command-string-->
                    <command-string>[transport input $transport-types-in]</command-string>
                    <command-string>[transport output $transport-types-out]</command-string>
                </device-operation>
                <device-operation>
                    <name>DELETEVTYConfig</name>
                    <type>DELETE</type>
                     <command-string>line vty $min-vty $max-vty</command-string>
                     <command-string>
                        #if($acl-rule-number != null)
                        no access-class $acl-rule-number in [$vrf]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:console</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateConsoleConfig</name>
                    <type>CREATE</type>
                    <command-string>line con $console-line</command-string>
                    <command-string>[exec-timeout $exec-timeout 0]</command-string>
                    <command-string>privilege level $privilege-level </command-string>
                    <command-string>
                        #if($logging-synchronous == "true")
                        logging synchronous
                    </command-string>
                    <command-string>
                        #if($no-password == "true")
                        no password
                    </command-string>
                    <command-string>[login authentication $auth-type]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateConsoleConfig</name>
                    <type>UPDATE</type>
                    <command-string>line con $console-line</command-string>
                    <command-string>[exec-timeout $exec-timeout 0]</command-string>
                    <command-string>privilege level $privilege-level </command-string>
                    <command-string>
                        #if($logging-synchronous == "true")
                        logging synchronous
                    </command-string>
                    <command-string>
                        #if($no-password == "true")
                        no password
                    </command-string>
                    <command-string>[login authentication $auth-type]</command-string>
                </device-operation>
            </device-operations>
        </operation>


        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:auxiliary-port</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAuxiliaryConfig</name>
                    <type>CREATE</type>
                    <command-string>line aux $auxiliary-port-line</command-string>
                    <command-string>
                        #if($no-exec == "true")
                        no exec
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateAuxiliaryConfig</name>
                    <type>UPDATE</type>
                    <command-string>line aux $auxiliary-port-line</command-string>
                    <command-string>
                        #if($no-exec == "true")
                        no exec
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:http</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseIPHTTP</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>
                        #if($no-ip-http-server == "true")
                        no ip http server
                        #else if($no-ip-http-server == "false")
                        ip http server
                        #else if($no-ip-http-secure-server == "true")
                        no ip http secure-server
                        #else if($no-ip-http-secure-server == "false")
                        ip http secure-server
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateHTTP</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($no-ip-http-server == "true")
                        no ip http server
                        #else 
                        ip http server
                    </command-string>
                    <command-string>
                        #if($no-ip-http-secure-server == "true")
                        no ip http secure-server
                        #else 
                        ip http secure-server
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteHTTP</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($no-ip-http-server == "true")
                        ip http server
                        #else
                        no ip http server
                    </command-string>
                    <command-string>
                        #if($no-ip-http-secure-server == "true")
                        ip http secure-server
                        #else
                        no ip http secure-server
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateHTTP</name>
                    <type>UPDATE</type>
                    <command-string> </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:http/no-ip-http-server</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateHTTPServer</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($no-ip-http-server == "true")
                        no ip http server
                        #else
                        ip http server
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteHTTPServer</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($no-ip-http-server == "true")
                        ip http server
                        #else
                        no ip http server
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:http/no-ip-http-secure-server</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateHTTPSecure</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($no-ip-http-secure-server == "true")
                        no ip http secure-server
                        #else
                        ip http secure-server
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteHTTPSecure</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($no-ip-http-secure-server == "true")
                        ip http secure-server
                        #else
                        no ip http secure-server
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:domain</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createDMVPNDomain</name>
                    <type>CREATE</type>
                    <command-string>domain $domain-name</command-string>
                    <command-string>
                        #if($vrf-name != "GLOBAL")
                        vrf $vrf-name
                    </command-string>
                    <command-string>
                        #if($role == "hub-master")
                        master hub
                        #else if($role == "transit")
                        master transit $transid-id
                        #else
                        border
                    </command-string>
                    <command-string>
                        #if($role == "mcbr")
                        master local
                    </command-string>
                    <command-string>
                        #if($role == "mcbr")
                        exit
                    </command-string>
                    <command-string>
                        #if($role == "mcbr")
                        master branch
                    </command-string>
                    <command-string>source-interface $source-interface</command-string>
                    <command-string>
                        #if($role == "hub-master" OR $role == "transit")
                        site-prefixes prefix-list $site-prefix-list
                        enterprise-prefix prefix-list $enterprise-prefix-list
                    </command-string>
                    <command-string>
                        #if($role == "mcbr" OR $role == "transit")
                        hub $hub-ip
                    </command-string>
                    <command-string>
                        #if($role == "border-router")
                        master $master-ip
                    </command-string>
                    <command-string>
                        #if($password != null)
                        password $password
                    </command-string>
                    <command-string>
                        #if($load-balance == "true")
                        load-balance
                    </command-string>
                    <command-string>
                        #if($advanced == "true")
                        advanced
                    </command-string>
                    <command-string>channel-unreachable-timer $channel-unreachable-timer</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateDMVPNDomain</name>
                    <type>UPDATE</type>
                    <command-string> </command-string>
                </device-operation>
                <device-operation>
                    <name>RemoveDMVPNDomain</name>
                    <type>DELETE</type>
                    <command-string>no domain $domain-name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:domain/mcbr</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createDMVPNDomainMCBR</name>
                    <type>CREATE</type>
                    <command-string>domain $../domain-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL")
                        vrf $../vrf-name
                    </command-string>
                    <command-string>
                        #if($../role == "hub-master")
                        master hub
                        #else if($../role == "transit")
                        master transit $transid-id
                        #else
                        border
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        source-interface $source-interface-border
                    </command-string>
                    <command-string>
                        #if($password != null)
                        password $password
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:domain/password</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createDMVPNDomainHubPassword</name>
                    <type>CREATE</type>
                    <command-string>domain $../domain-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL")
                        vrf $../vrf-name
                    </command-string>
                    <command-string>
                        #if($../role == "hub-master")
                        master hub
                        #else if($../role == "transit")
                        master transit $transid-id
                        #else
                        border
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        master local
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        exit
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        master branch
                    </command-string>
                    <command-string>
                        #if($password != null)
                        password $password
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateDMVPNDomainPassword</name>
                    <type>UPDATE</type>
                    <command-string>domain $../domain-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL")
                        vrf $../vrf-name
                    </command-string>
                    <command-string>
                        #if($../role == "hub-master")
                        master hub
                        #else if($../role == "transit")
                        master transit $transid-id
                        #else
                        border
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        master local
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        exit
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        master branch
                    </command-string>
                    <command-string>
                        #if($password != null)
                        password $password
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>RemoveDMVPNDomainPassword</name>
                    <type>DELETE</type>
                    <command-string>domain $../domain-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL")
                        vrf $../vrf-name
                    </command-string>
                    <command-string>
                        #if($../role == "hub-master")
                        master hub
                        #else if($../role == "transit")
                        master transit $transid-id
                        #else
                        border
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        master local
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        exit
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        master branch
                    </command-string>
                    <command-string>
                        #if($password != null)
                        no password $password
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:domain/hub-ip</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createDMVPNDomainHubIp</name>
                    <type>CREATE</type>
                    <command-string>domain $../domain-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL")
                        vrf $../vrf-name
                    </command-string>
                    <command-string>
                        #if($../role == "hub-master")
                        master hub
                        #else if($../role == "transit")
                        master transit $transid-id
                        #else
                        border
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        master local
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        exit
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        master branch
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr" OR $../role == "transit")
                        hub $hub-ip
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateDMVPNDomainHubIp</name>
                    <type>UPDATE</type>
                    <command-string>domain $../domain-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL")
                        vrf $../vrf-name
                    </command-string>
                    <command-string>
                        #if($../role == "hub-master")
                        master hub
                        #else if($../role == "transit")
                        master transit $transid-id
                        #else
                        border
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        master local
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        exit
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        master branch
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr" OR $../role == "transit")
                        hub $hub-ip
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>RemoveDMVPNDomainHubIp</name>
                    <type>DELETE</type>
                    <command-string>domain $../domain-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL")
                        vrf $../vrf-name
                    </command-string>
                    <command-string>
                        #if($../role == "hub-master")
                        master hub
                        #else if($../role == "transit")
                        master transit $transid-id
                        #else
                        border
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        master local
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        exit
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        master branch
                    </command-string>
                    <command-string>no hub $hub-ip.%previous</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:domain/master-ip</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createDMVPNDomainMasterIp</name>
                    <type>CREATE</type>
                    <command-string>domain $../domain-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL")
                        vrf $../vrf-name
                    </command-string>
                    <command-string>
                        #if($../role == "hub-master")
                        master hub
                        #else if($../role == "transit")
                        master transit $transid-id
                        #else
                        border
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        master local
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        exit
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        master branch
                    </command-string>
                    <command-string>
                        #if($../role == "border-router")
                        master $master-ip
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateDMVPNDomainMasterIp</name>
                    <type>UPDATE</type>
                    <command-string>domain $../domain-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL")
                        vrf $../vrf-name
                    </command-string>
                    <command-string>
                        #if($../role == "hub-master")
                        master hub
                        #else if($../role == "transit")
                        master transit $transid-id
                        #else
                        border
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        master local
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        exit
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        master branch
                    </command-string>
                    <command-string>
                        #if($../role == "border-router")
                        master $master-ip
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>RemoveDMVPNDomainMasterIp</name>
                    <type>DELETE</type>
                    <command-string>domain $../domain-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL")
                        vrf $../vrf-name
                    </command-string>
                    <command-string>
                        #if($../role == "hub-master")
                        master hub
                        #else if($../role == "transit")
                        master transit $transid-id
                        #else
                        border
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        master local
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        exit
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        master branch
                    </command-string>
                    <command-string>no master $master-ip.%previous</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:license</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateLicense</name>
                    <type>CREATE</type>
                    <command-string>license smart enable</command-string>
                    <command-string>ip http client source-interface $source-interface</command-string>
                    <command-string>end</command-string>
                    <command-string>license smart register idtoken $license-token</command-string>
                    <command-string>config t</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateLicense</name>
                    <type>UPDATE</type>
                    <command-string>license smart enable</command-string>
                    <command-string>ip http client source-interface $source-interface</command-string>
                    <command-string>end</command-string>
                    <command-string>license smart register idtoken $license-token</command-string>
                    <command-string>config t</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLicense</name>
                    <type>DELETE</type>
                    <command-string>end</command-string>
                    <command-string>license smart deregister</command-string>
                    <command-string>config t</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:CaTrustPointCertificate</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateCaTrustPointCertificate</name>
                    <type>CREATE</type>
                    <command-string>crypto pki trustpoint $name</command-string>
                    <command-string>enrollment retry count 5</command-string>
                    <command-string>enrollment retry period 3</command-string>
                    <command-string>
                        #if($url != null)
                        enrollment url $url
                    </command-string>
                    <command-string>
                        #if($addSerialNumber == 'true')
                        serial-number
                    </command-string>
                    <command-string>
                        #if($vrfName != null)
                        vrf Mgmt-vrf $vrfName
                    </command-string>
                    <command-string>
                        #if($ipAddress != null)
                        ip-address $ipAddress
                    </command-string>
                    <command-string>
                        #if($password != null)
                        password $password
                    </command-string>
                    <command-string>
                        #if($revocationCheck != null)
                        revocation-check $revocationCheck
                    </command-string>
                    <command-string>
                        #if($sourceInterface != null)
                        source interface $sourceInterface
                    </command-string>
                    <command-string>
                        #if($autoEntrollPeriod != -1)
                        auto-enroll $autoEntrollPeriod
                    </command-string>
                    <command-string>
                        #if($caCertificate != null)
                        crypto pki certificate chain $name
                    </command-string>
                    <command-string>
                        #if($caCertificate != null)
                        certificate ca 01
                    </command-string>
                    <command-string>
                        #if($caCertificate != null)
                        $caCertificate
                    </command-string>
                    <command-string>exit</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:class-maps/class-map</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQClassMap</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($name != "class-default" AND $name != 'CLASS-DEFAULT')
                        class-map $match-type $name
                    </command-string>
                    <command-string>[description "$description"]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQClassMap</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($name != "class-default" AND $name != 'CLASS-DEFAULT')
                        no class-map $match-type $name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:class-maps/class-map/class-match-condition</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQClassMapMatchCondition</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($name != "class-default" AND $name != 'CLASS-DEFAULT')
                        class-map $../match-type $../name
                    </command-string>
                    <command-string>
                        #if($condition-type == "dscp" AND $match-value != null)
                        match $condition-type $match-value
                        #else if($condition-type == "access-group" AND $match-value != null)
                        match $condition-type name $match-value
                        #else if($condition-type == "qos-group" AND $match-value != null)
                        match $condition-type $match-value
			#else if($condition-type == "protocol" AND $match-value == "attribute" AND $traffic-class != null )
                        match $condition-type $match-value traffic-class $traffic-class
			#else if($condition-type == "protocol" AND $match-value == "attribute" AND $business-relevant != null )
                        match $condition-type $match-value business-relevance $business-relevant
                        #else if($condition-type == "protocol" AND $match-value != null AND $match-value != "http")
                        match $condition-type $match-value
                        #else if($condition-type == "ip dscp" AND $match-value != null)
                        match $condition-type $match-value
                        #else if($match-value == null AND $condition-type == "any")
                        match $condition-type
			#else if($condition-type == "protocol" AND $match-value != null AND $only-http == "true" )
                        match $condition-type $match-value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQClassMapMatchCondition</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($name != "class-default" AND $name != 'CLASS-DEFAULT')
                        class-map $../match-type $../name
                    </command-string>
                    <command-string>
                        #if($condition-type == "dscp" AND $match-value != null)
                        no match $condition-type $match-value
                        #else if($condition-type == "access-group" AND $match-value != null)
                        no match $condition-type name $match-value
                        #else if($condition-type == "qos-group" AND $match-value != null)
                        no match $condition-type $match-value
			#else if($condition-type == "protocol" AND $match-value == "attribute" AND $traffic-class != null )
                        no match $condition-type $match-value traffic-class $traffic-class
			#else if($condition-type == "protocol" AND $match-value == "attribute" AND $business-relevant != null )
                        no match $condition-type $match-value business-relevance $business-relevant
                        #else if($condition-type == "protocol" AND $match-value != null AND $match-value != "http")
                        no match $condition-type $match-value
                        #else if($condition-type == "ip dscp" AND $match-value != null)
                        no match $condition-type $match-value
                        #else if($match-value == null AND $condition-type == "any")
                        no match $condition-type
			#else if($condition-type == "protocol" AND $match-value != null AND $only-http == "true" )
                        no match $condition-type $match-value
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/shape-average-percentage</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassEntryShapeAveragePercent</name>
                    <type>CREATE</type>
                     <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($shape-average-percentage != null AND $../bits-sustained-ms == null AND $../bits-excess-ms == null)
                        shape average percent $shape-average-percentage
                        #else if ($shape-average-percentage != null AND $../bits-sustained-ms != null AND $../bits-excess-ms == null)
                        shape average percent $shape-average-percentage $../bits-sustained-ms ms
                        #else
                        shape average percent $shape-average-percentage $../bits-sustained-ms ms $../bits-excess-ms ms
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassEntryShapeAveragePercent</name>
                    <type>UPDATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($shape-average-percentage != null AND $../bits-sustained-ms == null AND $../bits-excess-ms == null)
                        shape average percent $shape-average-percentage
                        #else if ($shape-average-percentage != null AND $../bits-sustained-ms != null AND $../bits-excess-ms == null)
                        shape average percent $shape-average-percentage $../bits-sustained-ms ms
                        #else
                        shape average percent $shape-average-percentage $../bits-sustained-ms ms $../bits-excess-ms ms
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassEntryShapeAveragePercent</name>
                    <type>DELETE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($shape-average-percentage != null AND $../bits-sustained-ms == null AND $../bits-excess-ms == null)
                        no shape average percent $shape-average-percentage
                        #else if ($shape-average-percentage != null AND $../bits-sustained-ms != null AND $../bits-excess-ms == null)
                        no shape average percent $shape-average-percentage $../bits-sustained-ms ms
                        #else
                        no shape average percent $shape-average-percentage $../bits-sustained-ms ms $../bits-excess-ms ms
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/shape-average</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassEntryShapeAverage</name>
                    <type>CREATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($shape-average != null AND $../bits-sustained == null AND $../bits-excess == null)
                        shape average $shape-average
                        #else if ($../shape-average != null AND $../bits-sustained != null AND $../bits-excess == null)
                        shape average $shape-average $../bits-sustained
                        #else
                        shape average $shape-average $../bits-sustained $../bits-excess
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassEntryShapeAverage</name>
                    <type>UPDATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($shape-average != null AND $../bits-sustained == null AND $../bits-excess == null)
                        shape average $shape-average
                        #else if ($shape-average != null AND $../bits-sustained != null AND $../bits-excess == null)
                        shape average $shape-average $../bits-sustained
                        #else
                        shape average $shape-average $../bits-sustained $../bits-excess
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassEntryShapeAverage</name>
                    <type>DELETE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($shape-average != null AND $../bits-sustained == null AND $../bits-excess == null)
                        no shape average $shape-average
                        #else if ($shape-average != null AND $../bits-sustained != null AND $../bits-excess == null)
                        no shape average $shape-average $../bits-sustained
                        #else
                        no shape average $shape-average $../bits-sustained $../bits-excess
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/bandwidth-percentage</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassEntryBandwidthPercentage</name>
                    <type>CREATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($../police-cir-percentage == null AND $bandwidth-percentage != null AND $../bandwidth-remaining-percentage == null AND $../bandwidth-remaining-ratio == null)
                        bandwidth percent $bandwidth-percentage
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassEntryBandwidthPercentage</name>
                    <type>UPDATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($../police-cir-percentage == null AND $bandwidth-percentage != null AND $../bandwidth-remaining-percentage == null AND $../bandwidth-remaining-ratio == null AND $bandwidth-percentage != $bandwidth-percentage.%previous)
                        bandwidth percent $bandwidth-percentage
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassEntryBandwidthPercentage</name>
                    <type>DELETE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($bandwidth-percentage != null)
                        no bandwidth percent $bandwidth-percentage
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/bandwidth-remaining-percentage</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassEntryBandwidthRemainingPercentage</name>
                    <type>CREATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($../police-cir-percentage == null AND $../bandwidth-percentage == null AND $bandwidth-remaining-percentage != null AND $../bandwidth-remaining-ratio == null)
                        bandwidth remaining percent $bandwidth-remaining-percentage
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassEntryBandwidthRemainingPercentage</name>
                    <type>UPDATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($../police-cir-percentage == null AND $../bandwidth-percentage == null AND $bandwidth-remaining-percentage != null AND $../bandwidth-remaining-ratio == null AND $bandwidth-remaining-percentage != $bandwidth-remaining-percentage.%previous)
                        bandwidth remaining percent $bandwidth-remaining-percentage
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassEntryBandwidthRemainingPercentage</name>
                    <type>DELETE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($bandwidth-remaining-percentage != null)
                        no bandwidth remaining percent $bandwidth-remaining-percentage
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/bandwidth-remaining-ratio</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassEntryBandwidthRemainingRatio</name>
                    <type>CREATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($../police-cir-percentage == null AND $../bandwidth-percentage == null AND $../bandwidth-remaining-percentage == null AND $bandwidth-remaining-ratio != null)
                        bandwidth remaining ratio $bandwidth-remaining-ratio
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassEntryBandwidthRemainingRatio</name>
                    <type>UPDATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($../police-cir-percentage == null AND $../bandwidth-percentage == null AND $../bandwidth-remaining-percentage == null AND $bandwidth-remaining-ratio != null AND $bandwidth-remaining-ratio != $bandwidth-remaining-ratio.%previous)
                        bandwidth remaining ratio $bandwidth-remaining-ratio
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassEntryBandwidthRemainingRatio</name>
                    <type>DELETE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($bandwidth-remaining-ratio != null)
                        no bandwidth remaining ratio $bandwidth-remaining-ratio
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/priority-percentage</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassEntryPriorityPercentage</name>
                    <type>CREATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($priority-percentage != null)
                        priority percent $priority-percentage
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassEntryPriorityPercentage</name>
                    <type>UPDATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($priority-percentage != null AND $priority-percentage != $priority-percentage.%previous)
                        priority percent $priority-percentage
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassEntryPriorityPercentage</name>
                    <type>DELETE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($priority-percentage != null)
                        no priority percent $priority-percentage
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/service-policy</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassEntryServicePolicy</name>
                    <type>CREATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($service-policy != null)
                        service-policy $service-policy
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassEntryServicePolicy</name>
                    <type>UPDATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($service-policy != null AND $service-policy != $service-policy.%previous)
                        service-policy $service-policy
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassEntryServicePolicy</name>
                    <type>DELETE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($service-policy != null)
                        no service-policy $service-policy
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/flow-monitor-name</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassEntryFlowMonitorName</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($flow-monitor-name !=null )
                        flow monitor $flow-monitor-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassEntryFlowMonitorName</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($flow-monitor-name !=null AND $flow-monitor-name != $flow-monitor-name.%previous)
                        flow monitor $flow-monitor-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassEntryFlowMonitorName</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($flow-monitor-name != null)
                        no flow monitor $flow-monitor-name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:class-maps/class-map/class-match-condition/http-url</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQClassMapMatchConditionHttpUrl</name>
                    <type>CREATE</type>
                    <command-string>class-map $../../match-type $../../name</command-string>
                    <command-string>
                        #if($../condition-type == "protocol" AND $../match-value == "http")
                        match protocol $../match-value [url $url]			
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQClassMapMatchConditionHttpUrl</name>
                    <type>DELETE</type>
                    <command-string>class-map $../../match-type $../../name</command-string>
                    <command-string>
                        #if($../condition-type == "protocol" AND $../match-value == "http")
                        no match protocol $../match-value [url $url]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMap</name>
                    <type>CREATE</type>
                    <command-string>policy-map [type $type] $name</command-string>
                    <command-string>[description $description]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMap</name>
                    <type>DELETE</type>
                    <command-string>no policy-map [type $type] $name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policer-aggregates/policer-aggregate</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicerAggregate</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($policer-agg-conform-action != null AND $policer-agg-exceed-action != null AND $policer-agg-violate-action != null AND $cir-bps != null AND $pir-rate != null)
                        policer aggregate $name cir $cir-bps [bc $bc] pir $pir-rate [be $be] conform-action $policer-agg-conform-action [$policer-agg-conform-action-value] exceed-action $policer-agg-exceed-action [$policer-agg-exceed-action-value] violate-action $policer-agg--violate-action [$policer-agg-violate-action-value]
                        #else if($policer-agg-conform-action != null AND $policer-agg-exceed-action != null AND $cir-bps != null AND $pir-rate != null)
                        policer aggregate $name cir $cir-bps [bc $bc] pir $pir-rate [be $be]conform-action $policer-agg-conform-action [$policer-agg-conform-action-value] exceed-action $policer-agg-exceed-action [$policer-agg-exceed-action-value]
                        #else if($policer-agg-conform-action != null AND $policer-agg-exceed-action == null AND $cir-bps != null AND $pir-rate != null)
                        policer aggregate $name cir $cir-bps [bc $bc] pir $pir-rate [be $be] conform-action $policer-agg-conform-action [$policer-agg-conform-action-value]
                        #else if($policer-agg-conform-action != null AND $policer-agg-exceed-action != null AND $policer-agg-violate-action != null AND $policer-agg-conform-action-types != null AND $cir-bps != null AND $pir-rate != null)
                        policer aggregate $name cir $cir-bps [bc $bc] pir $pir-rate [be $be] conform-action $policer-agg-conform-action $policer-agg-conform-action-types table $policer-agg-conform-action-table-map exceed-action $policer-agg-exceed-action [$policer-agg-exceed-action-value] violate-action $policer-agg--violate-action [$policer-agg-violate-action-value]
                        #else if($policer-agg-conform-action != null AND $policer-agg-exceed-action != null AND $policer-agg-conform-action-types != null AND $cir-bps != null AND $pir-rate != null)
                        policer aggregate $name cir $cir-bps [bc $bc] pir $pir-rate [be $be] conform-action $policer-agg-conform-action $policer-agg-conform-action-types table $policer-agg-conform-action-table-map exceed-action $policer-agg-exceed-action [$policer-agg-exceed-action-value]
                        #else if($policer-agg-conform-action != null AND $policer-agg-exceed-action == null AND $policer-agg-conform-action-types != null AND $cir-bps != null AND $pir-rate != null)
                        policer aggregate $name cir $cir-bps [bc $bc] pir $pir-rate [be $be] conform-action $policer-agg-conform-action $policer-agg-conform-action-types table $policer-agg-conform-action-table-map
                        #else if($policer-agg-conform-action == null AND $policer-agg-exceed-action == null AND $cir-bps != null AND $pir-rate != null)
                        policer aggregate $name cir $cir-bps [bc $bc] pir $pir-rate [be $be]
                        #else if($policer-agg-conform-action != null AND $policer-agg-exceed-action != null AND $cir-bps != null AND $pir-rate == null AND $policer-agg-conform-action-types != null)
                        policer aggregate $name cir $cir-bps [bc $bc] conform-action $policer-agg-conform-action $policer-agg-conform-action-types table $policer-agg-conform-action-table-map exceed-action $policer-agg-exceed-action [$policer-agg-exceed-action-value]
                        #else if($policer-agg-conform-action != null AND $policer-agg-exceed-action == null AND $cir-bps != null AND $pir-rate == null AND $policer-agg-conform-action-types != null)
                        policer aggregate $name cir $cir-bps [bc $bc] conform-action $policer-agg-conform-action $policer-agg-conform-action-types table $policer-agg-conform-action-table-map
                        #else if($policer-agg-conform-action == null AND $policer-agg-exceed-action == null AND $cir-bps != null AND $pir-rate == null)
                        policer aggregate $name cir $cir-bps [bc $bc]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicerAggregate</name>
                    <type>UPDATE</type>
                    <command-string> </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicerAggregate</name>
                    <type>DELETE</type>
                    <command-string>no policer aggregate $name cir $cir-bps</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policer-aggregates/policer-aggregate/policer-agg-conform-action</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicerAggConformAction</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($policer-agg-conform-action != null AND $../policer-agg-exceed-action != null AND $../policer-agg-violate-action != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $policer-agg-conform-action [$../policer-agg-conform-action-value] exceed-action $../policer-agg-exceed-action [$../policer-agg-exceed-action-value] violate-action $../policer-agg-violate-action [$../policer-agg-violate-action-value]
                        #else if($policer-agg-conform-action != null AND $../policer-agg-exceed-action != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $policer-agg-conform-action [$../policer-agg-conform-action-value] exceed-action $../policer-agg-exceed-action [$../policer-agg-exceed-action-value]
                        #else if($policer-agg-conform-action != null AND $../policer-agg-exceed-action == null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $policer-agg-conform-action [$../policer-agg-conform-action-value]
                        #else if($policer-agg-conform-action != null AND $../policer-agg-exceed-action != null AND $../policer-agg-violate-action != null AND $../policer-agg-conform-action-types != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $policer-agg-conform-action $../policer-agg-conform-action-types table $../policer-agg-conform-action-table-map exceed-action $../policer-agg-exceed-action [$../policer-agg-exceed-action-value] violate-action $../policer-agg-violate-action [$../policer-agg-violate-action-value]
                        #else if($policer-agg-conform-action != null AND $../policer-agg-exceed-action != null AND $../policer-agg-conform-action-types != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $policer-agg-conform-action $../policer-agg-conform-action-types table $../policer-agg-conform-action-table-map exceed-action $../policer-agg-exceed-action [$../policer-agg-exceed-action-value]
                        #else if($policer-agg-conform-action != null AND $../policer-agg-exceed-action == null AND $../policer-agg-conform-action-types != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $policer-agg-conform-action $../policer-agg-conform-action-types table $../policer-agg-conform-action-table-map
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicerAggConformAction</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($policer-agg-conform-action != null AND $../policer-agg-exceed-action != null AND $../policer-agg-violate-action != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $policer-agg-conform-action [$../policer-agg-conform-action-value] exceed-action $../policer-agg-exceed-action [$../policer-agg-exceed-action-value] violate-action $../policer-agg-violate-action [$../policer-agg-violate-action-value]
                        #else if($policer-agg-conform-action != null AND $../policer-agg-exceed-action != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $policer-agg-conform-action [$../policer-agg-conform-action-value] exceed-action $../policer-agg-exceed-action [$../policer-agg-exceed-action-value]
                        #else if($policer-agg-conform-action != null AND $../policer-agg-exceed-action == null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $policer-agg-conform-action [$../policer-agg-conform-action-value]
                        #else if($policer-agg-conform-action != null AND $../policer-agg-exceed-action != null AND $../policer-agg-violate-action != null AND $../policer-agg-conform-action-types != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $policer-agg-conform-action $../policer-agg-conform-action-types table $../policer-agg-conform-action-table-map exceed-action $../policer-agg-exceed-action [$../policer-agg-exceed-action-value] violate-action $../policer-agg-violate-action [$../policer-agg-violate-action-value]
                        #else if($policer-agg-conform-action != null AND $../policer-agg-exceed-action != null AND $../policer-agg-conform-action-types != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $policer-agg-conform-action $../policer-agg-conform-action-types table $../policer-agg-conform-action-table-map exceed-action $../policer-agg-exceed-action [$../policer-agg-exceed-action-value]
                        #else if($policer-agg-conform-action != null AND $../policer-agg-exceed-action == null AND $../policer-agg-conform-action-types != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $policer-agg-conform-action $../policer-agg-conform-action-types table $../policer-agg-conform-action-table-map
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicerAggConformAction</name>
                    <type>DELETE</type>
                    <command-string>policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be]</command-string>
                    <command-string>no conform-action $policer-agg-conform-action [$../policer-agg-conform-action-value]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policer-aggregates/policer-aggregate/policer-agg-conform-action-types</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicerAggregateConformActionTypes</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../policer-agg-conform-action != null AND $../policer-agg-exceed-action != null AND $../policer-agg-violate-action != null AND $policer-agg-conform-action-types != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action $policer-agg-conform-action-types table [$../policer-agg-conform-action-table-map] exceed-action $../policer-agg-exceed-action [$../policer-agg-exceed-action-value] violate-action $../policer-agg-violate-action [$../policer-agg-violate-action-value]
                        #else if($../policer-agg-conform-action != null AND $../policer-agg-exceed-action != null AND $policer-agg-conform-action-types != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action $policer-agg-conform-action-types table [$../policer-agg-conform-action-table-map] exceed-action $../policer-agg-exceed-action [$../policer-agg-exceed-action-value]
                        #else if($../policer-agg-conform-action != null AND $../policer-agg-exceed-action == null AND $policer-agg-conform-action-types != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action $policer-agg-conform-action-types table [$../policer-agg-conform-action-table-map]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicerAggregateConformActionTypes</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../policer-agg-conform-action != null AND $../policer-agg-exceed-action != null AND $../policer-agg-violate-action != null AND $policer-agg-conform-action-types != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action $policer-agg-conform-action-types table [$../policer-agg-conform-action-table-map] exceed-action $../policer-agg-exceed-action [$../policer-agg-exceed-action-value] violate-action $../policer-agg-violate-action [$../policer-agg-violate-action-value]
                        #else if($../policer-agg-conform-action != null AND $../policer-agg-exceed-action != null AND $policer-agg-conform-action-types != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action $policer-agg-conform-action-types table [$../policer-agg-conform-action-table-map] exceed-action $../policer-agg-exceed-action [$../policer-agg-exceed-action-value]
                        #else if($../policer-agg-conform-action != null AND $../policer-agg-exceed-action == null AND $policer-agg-conform-action-types != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action $policer-agg-conform-action-types table [$../policer-agg-conform-action-table-map]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicerAggregateConformActionTypes</name>
                    <type>DELETE</type>
                    <command-string>policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be]</command-string>
                    <command-string>no conform-action $../policer-agg-conform-action $policer-agg-conform-action-types table [$../policer-agg-conform-action-table-map]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policer-aggregates/policer-aggregate/policer-agg-conform-action-value</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicerAggregateConformActionValue</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../policer-agg-conform-action != null AND $../policer-agg-exceed-action != null AND $../policer-agg-violate-action != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action [$policer-agg-conform-action-value] exceed-action $../policer-agg-exceed-action [$../policer-agg-exceed-action-value] violate-action $../policer-agg-violate-action [$../policer-agg-violate-action-value]
                        #else if($../policer-agg-conform-action != null AND $../policer-agg-exceed-action != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action [$policer-agg-conform-action-value] exceed-action $../policer-agg-exceed-action [$../policer-agg-exceed-action-value]
                        #else if($../policer-agg-conform-action != null AND $../policer-agg-exceed-action == null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action [$policer-agg-conform-action-value]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicerAggregateConformActionValue</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../policer-agg-conform-action != null AND $../policer-agg-exceed-action != null AND $../policer-agg-violate-action != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action [$policer-agg-conform-action-value] exceed-action $../policer-agg-exceed-action [$../policer-agg-exceed-action-value] violate-action $../policer-agg-violate-action [$../policer-agg-violate-action-value]
                        #else if($../policer-agg-conform-action != null AND $../policer-agg-exceed-action != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action [$policer-agg-conform-action-value] exceed-action $../policer-agg-exceed-action [$../policer-agg-exceed-action-value]
                        #else if($../policer-agg-conform-action != null AND $../policer-agg-exceed-action == null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action [$policer-agg-conform-action-value]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicerAggregateConformActionValue</name>
                    <type>DELETE</type>
                    <command-string>policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be]</command-string>
                    <command-string>no conform-action $../policer-agg-conform-action $policer-agg-conform-action-value</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policer-aggregates/policer-aggregate/policer-agg-exceed-action</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicerAggExceedAction</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../policer-agg-conform-action != null AND $policer-agg-exceed-action != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action [$../policer-agg-conform-action-value] exceed-action $policer-agg-exceed-action [$../policer-agg-exceed-action-value]
                        #else if($../policer-agg-conform-action != null AND $policer-agg-exceed-action != null AND $../policer-agg-conform-action-types != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action $../policer-agg-conform-action-types table $../policer-agg-conform-action-table-map exceed-action $policer-agg-exceed-action [$../policer-agg-exceed-action-value]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicerAggExceedAction</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../policer-agg-conform-action != null AND $policer-agg-exceed-action != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action [$../policer-agg-conform-action-value] exceed-action $policer-agg-exceed-action [$../policer-agg-exceed-action-value]
                        #else if($../policer-agg-conform-action != null AND $policer-agg-exceed-action != null AND $../policer-agg-conform-action-types != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action $../policer-agg-conform-action-types table $../policer-agg-conform-action-table-map exceed-action $policer-agg-exceed-action [$../policer-agg-exceed-action-value]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicerAggExceedAction</name>
                    <type>DELETE</type>
                    <command-string>policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be]</command-string>
                    <command-string>no exceed-action $policer-agg-exceed-action [$../policer-agg-exceed-action-value]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policer-aggregates/policer-aggregate/policer-agg-exceed-action-value</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicerAggregateExceedActionValue</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../policer-agg-conform-action != null AND $../policer-agg-exceed-action != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action [$../policer-agg-conform-action-value] exceed-action $../policer-agg-exceed-action $policer-agg-exceed-action-value
                        #else if($../policer-agg-conform-action != null AND $policer-agg-exceed-action != null AND $../policer-agg-conform-action-types != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action $../policer-agg-conform-action-types table $../policer-agg-conform-action-table-map exceed-action $../policer-agg-exceed-action $policer-agg-exceed-action-value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicerAggregateExceedActionValue</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../policer-agg-conform-action != null AND $../policer-agg-exceed-action != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action [$../policer-agg-conform-action-value] exceed-action $../policer-agg-exceed-action $policer-agg-exceed-action-value
                        #else if($../policer-agg-conform-action != null AND $policer-agg-exceed-action != null AND $../policer-agg-conform-action-types != null AND $../cir-bps != null)
                        policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be] conform-action $../policer-agg-conform-action $../policer-agg-conform-action-types table $../policer-agg-conform-action-table-map exceed-action $../policer-agg-exceed-action $policer-agg-exceed-action-value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicerAggregateExceedActionValue</name>
                    <type>DELETE</type>
                    <command-string>policer aggregate $../name cir $../cir-bps [bc $../bc] [pir $../pir-rate] [be $../be]</command-string>
                    <command-string>no exceed-action $../policer-agg-exceed-action $policer-agg-exceed-action-value</command-string>
                </device-operation>
            </device-operations>
        </operation>
    <operation>
        <target>/controller:devices/device/qos:policer-aggregates/policer-aggregate/conform-action</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateQPolicerAggregateConformAction</name>
                <type>CREATE</type>
                <command-string>policer aggregate $../name [cir $../cir-bps] [pir $../pir-rate]</command-string>
                <command-string>
                    #if($action-value != null)
                    conform-action $policer-conform-action $action-value
                </command-string>
                <command-string>
                    #if($action-types != null AND $table-map != null )
                    conform-action $policer-conform-action $action-types table $table-map
                </command-string>
                <command-string>
                    #if($action-types == null AND $action-value == null )
                    conform-action $policer-conform-action
                </command-string>
            </device-operation>
            <device-operation>
                <name>UpdateQPolicerAggregateConformAction</name>
                <type>UPDATE</type>
                <command-string>policer aggregate $../name [cir $../cir-bps] [pir $../pir-rate]</command-string>
                <command-string>
                    #if($action-value != null AND $action-value != $action-value.%previous)
                    conform-action $policer-conform-action $action-value
                </command-string>
                <command-string>
                    #if($action-types != null AND $action-types != $action-types.%previous AND $table-map != null AND $table-map != $table-map.%previous)
                    conform-action $policer-conform-action $action-types table $table-map
                </command-string>
            </device-operation>
            <device-operation>
                <name>DeleteQPolicerAggregateConformAction</name>
                <type>DELETE</type>
                <command-string>policer aggregate $../name [cir $../cir-bps] [pir $../pir-rate]</command-string>
                <command-string>
                    #if($action-value != null)
                    no conform-action $policer-conform-action $action-value
                </command-string>
                <command-string>
                    #if($action-types != null AND $table-map != null )
                    no conform-action $policer-conform-action $action-types table $table-map
                </command-string>
            </device-operation>
        </device-operations>
    </operation>
    <operation>
        <target>/controller:devices/device/qos:policer-aggregates/policer-aggregate/exceed-action</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateQPolicerAggregateExceedAction</name>
                <type>CREATE</type>
                <command-string>policer aggregate $../name [cir $../cir-bps] [pir $../pir-rate]</command-string>
                <command-string>
                    #if($action-value != null)
                    exceed-action $policer-exceed-action $action-value
                </command-string>
                <command-string>
                    #if($action-types != null AND $table-map != null )
                    exceed-action $policer-exceed-action $action-types table $table-map
                </command-string>
                <command-string>
                    #if($action-types == null AND $action-value == null )
                    exceed-action $policer-exceed-action
                </command-string>
            </device-operation>
            <device-operation>
                <name>UpdateQPolicerAggregateExceedAction</name>
                <type>UPDATE</type>
                <command-string>policer aggregate $../name [cir $../cir-bps] [pir $../pir-rate]</command-string>
                <command-string>
                    #if($action-value != null AND $action-value != $action-value.%previous)
                    exceed-action $policer-exceed-action $action-value
                </command-string>
                <command-string>
                    #if($action-types != null AND $action-types != $action-types.%previous AND $table-map != null AND $table-map != $table-map.%previous )
                    exceed-action $policer-exceed-action $action-types table $table-map
                </command-string>
            </device-operation>
            <device-operation>
                <name>DeleteQPolicerAggregateExceedAction</name>
                <type>DELETE</type>
                <command-string>policer aggregate $../name [cir $../cir-bps] [pir $../pir-rate]</command-string>
                <command-string>
                    #if($action-value != null)
                    no exceed-action $policer-exceed-action $action-value
                </command-string>
                <command-string>
                    #if($action-types != null AND $table-map != null )
                    no exceed-action $policer-exceed-action $action-types table $table-map
                </command-string>
                <command-string>
                    #if($action-types == null AND $action-value == null )
                    no exceed-action $policer-exceed-action
                </command-string>
            </device-operation>
        </device-operations>
    </operation>
    
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/bit-rate</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassEntryBitRate</name>
                    <type>CREATE</type>
                     <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($bit-rate != null)
                        police rate $bit-rate
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassEntryBitRate</name>
                    <type>UPDATE</type>
                     <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($bit-rate != null AND $bit-rate != $bit-rate.%previous)
                        police rate $bit-rate
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassEntryBitRate</name>
                    <type>DELETE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($bit-rate != null)
                        no police rate $bit-rate
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/bit-rate-percent</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassEntryBitRatePercent</name>
                    <type>CREATE</type>
                     <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($bit-rate-percent != null)
                        police rate percent $bit-rate-percent
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassEntryBitRatePercent</name>
                    <type>UPDATE</type>
                     <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($bit-rate-percent != null)
                        police rate percent $bit-rate-percent
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassEntryBitRatePercent</name>
                    <type>DELETE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($bit-rate-percent != null)
                        no police rate percent $bit-rate-percent
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/cir-rate</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassCirRate</name>
                    <type>CREATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($cir-rate != null)
                        police cir $cir-rate
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassCirRate</name>
                    <type>UPDATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($cir-rate != null)
                        police cir $cir-rate
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassCirRate</name>
                    <type>DELETE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($cir-rate != null)
                        no police cir $cir-rate
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>        
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/qos-group</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassEntryQosGroup</name>
                    <type>CREATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($qos-group != null)
                        set qos-group $qos-group
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassEntryQosGroup</name>
                    <type>UPDATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($qos-group != null AND $qos-group != $qos-group.%previous)
                        set qos-group $qos-group
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassEntryQosGroup</name>
                    <type>DELETE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($qos-group != null)
                        no set qos-group $qos-group
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
         <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/precedence</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassEntryPrecedence</name>
                    <type>CREATE</type>
                    <command-string>policy-map $../../name</command-string>
                    <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($precedence != null)
                        set ip precedence $precedence
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassEntryPrecedence</name>
                    <type>UPDATE</type>
                     <command-string>policy-map $../../name</command-string>
                    <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($precedence != null)
                        set ip precedence $precedence
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassEntryPrecedence</name>
                    <type>DELETE</type>
                     <command-string>policy-map $../../name</command-string>
                    <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($precedence != null)
                        no set ip precedence $precedence
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
         <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/dscp-value</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassEntryDSCPValue</name>
                    <type>CREATE</type>
                    <command-string>policy-map $../../name</command-string>
                    <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($dscp-value != null)
                        set ip dscp $dscp-value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassEntryDSCPValue</name>
                    <type>UPDATE</type>
                    <command-string>policy-map $../../name</command-string>
                    <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($dscp-value != null)
                        set ip dscp $dscp-value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassEntryDSCPValue</name>
                    <type>DELETE</type>
                    <command-string>policy-map $../../name</command-string>
                    <command-string>class $../class-name</command-string>
                    <command-string>no set ip dscp $dscp-value</command-string>
                </device-operation>
            </device-operations>
        </operation>
    <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/conform-action</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassEntryPoliceCirConformAction</name>
                    <type>CREATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                      <command-string>
                        #if($../cir-rate != null)
                        police cir $../cir-rate
                        #else if($../police-cir-percentage != null)
                        police cir percent $../police-cir-percentage
                    </command-string>
                    <command-string>
                        #if($police-cir-conform-action != null)
                        conform-action $police-cir-conform-action [$action-value]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassEntryPoliceCirConformAction</name>
                    <type>UPDATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                      <command-string>
                        #if($../cir-rate != null)
                        police cir $../cir-rate
                        #else if($../police-cir-percentage != null)
                        police cir percent $../police-cir-percentage
                    </command-string>
                    <command-string>
                        #if($police-cir-conform-action != null)
                        conform-action $police-cir-conform-action [$action-value]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassEntryPoliceCirConformAction</name>
                    <type>DELETE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                      <command-string>
                        #if($../cir-rate != null)
                        police cir $../cir-rate
                        #else if($../police-cir-percentage != null)
                        police cir percent $../police-cir-percentage
                    </command-string>
                    <command-string>
                        #if($police-cir-conform-action != null)
                        no conform-action $police-cir-conform-action [$action-value]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/exceed-action</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapPoliceCirExceedAction</name>
                    <type>CREATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                      <command-string>
                        #if($../cir-rate != null)
                        police cir $../cir-rate
                        #else if($../police-cir-percentage != null)
                        police cir percent $../police-cir-percentage
                    </command-string>
                    <command-string>
                        #if($police-cir-exceed-action != null)
                        exceed-action $police-cir-exceed-action [$action-value]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapPoliceCirExceedAction</name>
                    <type>UPDATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                      <command-string>
                        #if($../cir-rate != null)
                        police cir $../cir-rate
                        #else if($../police-cir-percentage != null)
                        police cir percent $../police-cir-percentage
                    </command-string>
                    <command-string>
                        #if($police-cir-exceed-action != null)
                        exceed-action $police-cir-exceed-action [$action-value]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapPoliceCirExceedAction</name>
                    <type>DELETE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                      <command-string>
                        #if($../cir-rate != null)
                        police cir $../cir-rate
                        #else if($../police-cir-percentage != null)
                        police cir percent $../police-cir-percentage
                    </command-string>
                    <command-string>
                        #if($police-cir-exceed-action != null)
                        no exceed-action $police-cir-exceed-action [$action-value]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
    <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/violate-action</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapPoliceCirViolateAction</name>
                    <type>CREATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                      <command-string>
                        #if($../cir-rate != null)
                        police cir $../cir-rate
                        #else if($../police-cir-percentage != null)
                        police cir percent $../police-cir-percentage
                    </command-string>
                    <command-string>
                        #if($police-cir-violate-action != null)
                        violate-action $police-cir-violate-action [$action-value]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapPoliceCirViolateAction</name>
                    <type>UPDATE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                      <command-string>
                        #if($../cir-rate != null)
                        police cir $../cir-rate
                        #else if($../police-cir-percentage != null)
                        police cir percent $../police-cir-percentage
                    </command-string>
                    <command-string>
                        #if($police-cir-violate-action != null)
                        violate-action $police-cir-violate-action [$action-value]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapPoliceCirViolateAction</name>
                    <type>DELETE</type>
                    <command-string>policy-map $../../name</command-string>
                     <command-string>class $../class-name</command-string>
                      <command-string>
                        #if($../cir-rate != null)
                        police cir $../cir-rate
                        #else if($../police-cir-percentage != null)
                        police cir percent $../police-cir-percentage
                    </command-string>
                    <command-string>
                        #if($police-cir-violate-action != null)
                        no violate-action $police-cir-violate-action [$action-value]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassEntry</name>
                    <type>CREATE</type>
                    <command-string>policy-map $../name</command-string>
                    <command-string>class $class-name</command-string>
                     <command-string>
                        #if($shape-average != null AND $bits-sustained == null AND $bits-excess == null)
                        shape average $shape-average
                        #else if($shape-average != null AND $bits-sustained != null AND $bits-excess == null)
                        shape average $shape-average $bits-sustained
                        #else
                        shape average $shape-average $bits-sustained $bits-excess
                    </command-string>
                    <command-string>
                        #if($shape-average-percentage != null AND $bits-sustained-ms == null AND $bits-excess-ms == null)
                        shape average percent $shape-average-percentage
                        #else if($shape-average-percentage != null AND $bits-sustained-ms != null AND $bits-excess-ms == null)
                        shape average percent $shape-average-percentage $bits-sustained-ms ms
                        #else
                        shape average percent $shape-average-percentage $bits-sustained-ms ms $bits-excess-ms ms
                    </command-string>
                    <command-string>
                        #if($police-cir-percentage == null AND $bandwidth-percentage != null AND $bandwidth-remaining-percentage == null AND $bandwidth-remaining-ratio == null)
                        bandwidth percent $bandwidth-percentage
                    </command-string>
                    <command-string>
                        #if($police-cir-percentage == null AND $bandwidth-percentage == null AND $bandwidth-remaining-percentage != null AND $bandwidth-remaining-ratio == null)
                        bandwidth remaining percent $bandwidth-remaining-percentage
                    </command-string>
                    <command-string>
                        #if($police-cir-percentage == null AND $bandwidth-percentage == null AND $bandwidth-remaining-percentage == null AND $bandwidth-remaining-ratio != null)
                        bandwidth remaining ratio $bandwidth-remaining-ratio
                    </command-string>
                    <command-string>
                        #if($priority-value != null)
                        priority $priority-value
                    </command-string>
                    <command-string>
                        #if($priority-percentage != null)
                        priority percent $priority-percentage
                    </command-string>
                    <!--command-string>
                        #if($cir-rate != null)
                        police cir $cir-rate
                    </command-string-->
                    <command-string>
                        #if($priority-level != null)
                        priority level $priority-level
                    </command-string>
                    <command-string>
                        #if($fair-queue != null AND $fair-queue == "true")
                        fair-queue
                    </command-string>
                    <command-string>
                        #if($is-dscp-tunnel == "true" AND $dscp-value != null)
                        set dscp tunnel $dscp-value
                        #else if($dscp-value != null)
                        set ip dscp $dscp-value
                    </command-string>
                    <command-string>
                        #if($precedence != null)
                        set ip precedence $precedence
                    </command-string>
                    <command-string>
                        #if($random-detect != null AND $random-detect == "default")
                        random-detect
                        #else if($random-detect != null AND $random-detect != "none")
                        random-detect $random-detect
                    </command-string>
                    <command-string>
                        #if($service-policy != null)
                        service-policy $service-policy
                    </command-string>
		    <command-string>
                        #if($qos-group != null)
                        set qos-group $qos-group
                    </command-string>
                    <command-string>
                        #if($flow-monitor-name !=null )
                        flow monitor $flow-monitor-name
                    </command-string>
                     <command-string>
            #if($police-conform-action != null AND $police-exceed-action != null AND $police-violate-action != null AND $cir-rate != null AND $pir-rate != null AND $conform-action-types == null)
                    police cir $cir-rate pir $pir-rate conform-action $police-conform-action [$conform-action-value] exceed-action $police-exceed-action [$exceed-action-value] violate-action $police-violate-action [$violate-action-value]
                    #else if($police-conform-action != null AND $police-exceed-action != null AND $police-violate-action == null AND $cir-rate != null AND $pir-rate != null AND $conform-action-types == null)
                    police cir $cir-rate pir $pir-rate conform-action $police-conform-action [$conform-action-value] exceed-action $police-exceed-action [$exceed-action-value]
                    #else if($police-conform-action != null AND $police-exceed-action == null AND $police-violate-action == null AND $cir-rate != null AND $pir-rate != null AND $conform-action-types == null)
                    police cir $cir-rate pir $pir-rate conform-action $police-conform-action [$conform-action-value]                    
                    #else if($police-conform-action != null AND $police-exceed-action != null AND $police-violate-action != null AND $cir-rate != null AND $pir-rate == null AND $conform-action-types == null)
                    police cir $cir-rate conform-action $police-conform-action [$conform-action-value] exceed-action $police-exceed-action [$exceed-action-value] violate-action $police-violate-action [$violate-action-value]
                    #else if($police-conform-action != null AND $police-exceed-action != null AND $police-violate-action == null AND $cir-rate != null AND $pir-rate == null AND $conform-action-types == null)
                    police cir $cir-rate conform-action $police-conform-action [$conform-action-value] exceed-action $police-exceed-action [$exceed-action-value]
            #else if($police-conform-action != null AND $police-exceed-action != null AND $police-violate-action != null AND $cir-rate != null AND $pir-rate != null AND $conform-action-value == null)
                    police cir $cir-rate pir $pir-rate conform-action $police-conform-action [$conform-action-types table $conform-action-table-map] exceed-action $police-exceed-action [$exceed-action-value] violate-action $police-violate-action [$violate-action-value]
                    #else if($police-conform-action != null AND $police-exceed-action != null AND $police-violate-action != null AND $cir-rate != null AND $pir-rate != null)
                    police cir $cir-rate pir $pir-rate conform-action $police-conform-action [$conform-action-value] [$conform-action-types table $conform-action-table-map] exceed-action $police-exceed-action [$exceed-action-value] violate-action $police-violate-action [$violate-action-value]
                    #else if($police-conform-action != null AND $police-exceed-action != null AND $police-violate-action == null AND $cir-rate != null AND $pir-rate != null)
                    police cir $cir-rate pir $pir-rate conform-action $police-conform-action [$conform-action-value] [$conform-action-types table $conform-action-table-map] exceed-action $police-exceed-action [$exceed-action-value]
                    #else if($police-conform-action != null AND $police-exceed-action == null AND $police-violate-action == null AND $cir-rate != null AND $pir-rate != null )
                    police cir $cir-rate pir $pir-rate conform-action $police-conform-action [$conform-action-value] [$conform-action-types table $conform-action-table-map]
                    #else if($police-conform-action == null AND $police-exceed-action == null AND $police-violate-action == null AND $cir-rate != null AND $pir-rate != null)
                    police cir $cir-rate pir $pir-rate
                    #else if($police-conform-action != null AND $police-exceed-action != null AND $police-violate-action != null AND $cir-rate != null AND $pir-rate == null)
                    police cir $cir-rate conform-action $police-conform-action [$conform-action-value] [$conform-action-types table $conform-action-table-map] exceed-action $police-exceed-action [$exceed-action-value] violate-action $police-violate-action [$violate-action-value]
                    #else if($police-conform-action != null AND $police-exceed-action != null AND $police-violate-action == null AND $cir-rate != null AND $pir-rate == null)
                    police cir $cir-rate conform-action $police-conform-action [$conform-action-value] [$conform-action-types table $conform-action-table-map] exceed-action $police-exceed-action [$exceed-action-value]
                    #else if($police-conform-action != null AND $police-exceed-action == null AND $police-violate-action == null AND $cir-rate != null AND $pir-rate == null )
                    police cir $cir-rate conform-action $police-conform-action [$conform-action-value] [$conform-action-types table $conform-action-table-map]
                    #else if($police-conform-action == null AND $police-exceed-action == null AND $police-violate-action == null AND $cir-rate != null AND $pir-rate == null)
                    police cir $cir-rate
                </command-string>
                </device-operation>
               <device-operation>
                    <name>UpdateQPolicyMapClassEntry</name>
                    <type>UPDATE</type>
                    <command-string>policy-map $../name</command-string>
                    <command-string>class $class-name</command-string>
                    <command-string>
                        #if($cir-rate != null)
                        police cir $cir-rate
                    </command-string> 
                     <command-string>
                        #if($shape-average != null AND $bits-sustained == null AND $bits-excess == null)
                        shape average $shape-average
                        #else if ($shape-average != null AND $bits-sustained != null AND $bits-excess == null)
                        shape average $shape-average $bits-sustained
                        #else
                        shape average $shape-average $bits-sustained $bits-excess
                    </command-string>
            <command-string>
                        #if($shape-average-percentage != null AND $bits-sustained-ms == null AND $bits-excess-ms == null)
                        shape average percent $shape-average-percentage
                        #else if ($shape-average-percentage != null AND $bits-sustained-ms != null AND $bits-excess-ms == null)
                        shape average percent $shape-average-percentage $bits-sustained-ms ms
                        #else
                        shape average percent $shape-average-percentage $bits-sustained-ms ms $bits-excess-ms ms
                    </command-string>
                    <command-string>
                        #if($police-cir-percentage == null AND $bandwidth-percentage != null AND $bandwidth-remaining-percentage == null AND $bandwidth-remaining-ratio == null)
                        bandwidth percent $bandwidth-percentage
                    </command-string>
                    <command-string>
                        #if($police-cir-percentage == null AND $bandwidth-percentage == null AND $bandwidth-remaining-percentage != null AND $bandwidth-remaining-ratio == null)
                        bandwidth remaining percent $bandwidth-remaining-percentage
                    </command-string>
                    <command-string>
                        #if($police-cir-percentage == null AND $bandwidth-percentage == null AND $bandwidth-remaining-percentage == null AND $bandwidth-remaining-ratio != null)
                        bandwidth remaining ratio $bandwidth-remaining-ratio
                    </command-string>
                    <command-string>
                        #if($priority-value != null)
                        priority $priority-value
                    </command-string>
                    <command-string>
                        #if($priority-percentage != null)
                        priority percent $priority-percentage
                    </command-string>
                    <command-string>
                        #if($priority-level != null)
                        priority level $priority-level
                    </command-string>
                    <command-string>
                        #if($fair-queue != null AND $fair-queue == "true")
                        fair-queue
                    </command-string>
                     <command-string>
                        #if($precedence != null)
                        set ip precedence $precedence
                    </command-string>
                    <command-string>
                        #if($is-dscp-tunnel == "true" AND $dscp-value != null)
                        set dscp tunnel $dscp-value
                        #else if($dscp-value != null)
                        set ip dscp $dscp-value
                    </command-string>
                    <command-string>
                        #if($random-detect != null AND $random-detect == "default")
                        random-detect
                        #else if($random-detect != null AND $random-detect != "none")
                        random-detect $random-detect
                    </command-string>
                    <command-string>
                        #if($service-policy != null)
                        service-policy $service-policy
                    </command-string>
                    <command-string>
                        #if($qos-group != null)
                        set qos-group $qos-group
                    </command-string>
                    <command-string>
                        #if($police-cir-percentage != null)
                        police cir percent $police-cir-percentage
                    </command-string>
                    <command-string>
                        #if($bit-rate-percent != null)
                        police rate percent $bit-rate-percent
                    </command-string>     
                    <command-string>
                        #if($bit-rate != null)
                        police rate $bit-rate
                    </command-string> 
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassEntry</name>
                    <type>DELETE</type>
                    <command-string>policy-map $../name</command-string>
                    <command-string>no class $class-name</command-string>
                </device-operation>
            </device-operations>
        </operation>
         <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/police-conform-action</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassPoliceConformAction</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($police-conform-action != null AND $../police-exceed-action != null AND $../police-violate-action != null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $police-conform-action [$../conform-action-value] [$../conform-action-types table $../conform-action-table-map] exceed-action $../police-exceed-action [$../exceed-action-value] violate-action $../police-violate-action [$../violate-action-value]
                        #else if($police-conform-action != null AND $../police-exceed-action != null AND $../police-violate-action == null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action [$../conform-action-value] [$../conform-action-types table $../conform-action-table-map] exceed-action $../police-exceed-action [$../exceed-action-value]
                        #else if($police-conform-action != null AND $../police-exceed-action == null AND $../police-violate-action == null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $police-conform-action [$../conform-action-value] [$../conform-action-types table $../conform-action-table-map]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassPoliceConformAction</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($police-conform-action != null AND $../police-exceed-action != null AND $../police-violate-action != null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $police-conform-action [$../conform-action-value] [$../conform-action-types table $../conform-action-table-map] exceed-action $../police-exceed-action [$../exceed-action-value] violate-action $../police-violate-action [$../violate-action-value]
                        #else if($police-conform-action != null AND $../police-exceed-action != null AND $../police-violate-action == null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $police-conform-action [$../conform-action-value] [$../conform-action-types table $../conform-action-table-map] exceed-action $../police-exceed-action [$../exceed-action-value]
                        #else if($police-conform-action != null AND $../police-exceed-action == null AND $../police-violate-action == null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $police-conform-action [$../conform-action-value] [$../conform-action-types table $../conform-action-table-map]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassPoliceConformAction</name>
                    <type>DELETE</type>
                    <command-string>police cir $../cir-rate [pir $../pir-rate]</command-string>
                    <command-string>no conform-action $police-conform-action [$../conform-action-value] [$../conform-action-types table $../conform-action-table-map]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/conform-action-value</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassPoliceConformActionValue</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../police-conform-action != null AND $../police-exceed-action != null AND $../police-violate-action != null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action $conform-action-value exceed-action $../police-exceed-action [$../exceed-action-value] violate-action $../police-violate-action [$../violate-action-value]
                        #else if($../police-conform-action != null AND $../police-exceed-action != null AND $../police-violate-action == null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action $conform-action-value exceed-action $../police-exceed-action [$../exceed-action-value]
                        #else if($../police-conform-action != null AND $../police-exceed-action == null AND $../police-violate-action == null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action $conform-action-value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassPoliceConformActionValue</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../police-conform-action != null AND $../police-exceed-action != null AND $../police-violate-action != null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action $conform-action-value exceed-action $../police-exceed-action [$../exceed-action-value] violate-action $../police-violate-action [$../violate-action-value]
                        #else if($../police-conform-action != null AND $../police-exceed-action != null AND $../police-violate-action == null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action $conform-action-value exceed-action $../police-exceed-action [$../exceed-action-value]
                        #else if($../police-conform-action != null AND $../police-exceed-action == null AND $../police-violate-action == null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action $conform-action-value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassPoliceConformActionValue</name>
                    <type>DELETE</type>
                    <command-string>police cir $../cir-rate [pir $../pir-rate]</command-string>
                    <command-string>no conform-action $../police-conform-action $conform-action-value</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/police-exceed-action</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassPoliceExceedAction</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../police-conform-action != null AND $police-exceed-action != null AND $../police-violate-action != null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action [$../conform-action-value] exceed-action $police-exceed-action [$../exceed-action-value] violate-action $../police-violate-action [$../violate-action-value]
                        #else if($../police-conform-action != null AND $police-exceed-action != null AND $../police-violate-action == null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action [$../conform-action-value] exceed-action $police-exceed-action [$../exceed-action-value]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassPoliceExceedAction</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../police-conform-action != null AND $police-exceed-action != null AND $../police-violate-action != null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action [$../conform-action-value] exceed-action $police-exceed-action [$../exceed-action-value] violate-action $../police-violate-action [$../violate-action-value]
                        #else if($../police-conform-action != null AND $police-exceed-action != null AND $../police-violate-action == null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action [$../conform-action-value] exceed-action $police-exceed-action [$../exceed-action-value]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassPoliceExceedAction</name>
                    <type>DELETE</type>
                    <command-string>police cir $../cir-rate [pir $../pir-rate]</command-string>
                    <command-string>no exceed-action $police-exceed-action [$../exceed-action-value]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/exceed-action-value</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassPoliceExceedActionValue</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../police-conform-action != null AND $../police-exceed-action != null AND $../police-violate-action != null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action [$../conform-action-value] exceed-action $../police-exceed-action $exceed-action-value violate-action $../police-violate-action [$../violate-action-value]
                        #else if($../police-conform-action != null AND $../police-exceed-action != null AND $../police-violate-action == null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action [$../conform-action-value] exceed-action $../police-exceed-action $exceed-action-value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassPoliceExceedActionValue</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../police-conform-action != null AND $../police-exceed-action != null AND $../police-violate-action != null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action [$../conform-action-value] exceed-action $../police-exceed-action $exceed-action-value violate-action $../police-violate-action [$../violate-action-value]
                        #else if($../police-conform-action != null AND $../police-exceed-action != null AND $../police-violate-action == null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action [$../conform-action-value] exceed-action $../police-exceed-action $exceed-action-value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassPoliceExceedActionValue</name>
                    <type>DELETE</type>
                    <command-string>police cir $../cir-rate [pir $../pir-rate]</command-string>
                    <command-string>no exceed-action $../police-exceed-action $exceed-action-value</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/police-violate-action</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassPoliceViolateAction</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../police-conform-action != null AND $../police-exceed-action != null AND $police-violate-action != null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action [$../conform-action-value] exceed-action $../police-exceed-action $../exceed-action-value violate-action $police-violate-action [$../violate-action-value]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassPoliceViolateAction</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../police-conform-action != null AND $../police-exceed-action != null AND $police-violate-action != null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action [$../conform-action-value] exceed-action $../police-exceed-action $../exceed-action-value violate-action $police-violate-action [$../violate-action-value]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassPoliceViolateAction</name>
                    <type>DELETE</type>
                    <command-string>police cir $../cir-rate [pir $../pir-rate]</command-string>
                    <command-string>no violate-action $police-violate-action [$../violate-action-value]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/violate-action-value</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassPoliceViolateActionValue</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../police-conform-action != null AND $../police-exceed-action != null AND $../police-violate-action != null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action [$../conform-action-value] exceed-action $../police-exceed-action $../exceed-action-value violate-action $../police-violate-action $violate-action-value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateQPolicyMapClassPoliceViolateActionValue</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../police-conform-action != null AND $../police-exceed-action != null AND $police-violate-action != null AND $../cir-rate != null)
                        police cir $../cir-rate [pir $../pir-rate] conform-action $../police-conform-action [$../conform-action-value] exceed-action $../police-exceed-action $../exceed-action-value violate-action $../police-violate-action $violate-action-value
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassPoliceViolateActionValue</name>
                    <type>DELETE</type>
                    <command-string>police cir $../cir-rate [pir $../pir-rate]</command-string>
                    <command-string>no violate-action $../police-violate-action $violate-action-value</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:policy-maps/policy-map/class-entry/queue-limit</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateQPolicyMapClassEntryQLimit</name>
                    <type>CREATE</type>
                    <command-string>policy-map $../../name</command-string>
                    <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($queue-limit != null AND $packet == "true")
                        queue-limit $queue-limit packets
                        #else if($queue-limit != null AND $packet == "false")
                        queue-limit $queue-limit
                    </command-string>
                </device-operation>
                 <device-operation>
                    <name>UpdateQPolicyMapClassEntryQLimit</name>
                    <type>UPDATE</type>
                    <command-string>policy-map $../../name</command-string>
                    <command-string>class $../class-name</command-string>
                    <command-string>
                        #if($queue-limit != null AND $packet == "true")
                        queue-limit $queue-limit packets
                        #else if($queue-limit != null AND $packet == "false")
                        queue-limit $queue-limit
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteQPolicyMapClassEntryQLimit</name>
                    <type>DELETE</type>
                    <command-string>policy-map $../../name</command-string>
                    <command-string>class $../class-name</command-string>
                    <command-string>no queue-limit $queue-limit</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:pfr-classes/pfr-class</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePFRClass</name>
                    <type>CREATE</type>
                    <command-string>domain $domain-name</command-string>
                    <command-string>
                        #if($vrf-name != "GLOBAL")
                        vrf $vrf-name
                    </command-string>
                    <command-string>master hub</command-string>
                    <command-string>class $name sequence $sequence-number</command-string>
                </device-operation>
                <device-operation>
                    <name>DeletePFRClass</name>
                    <type>DELETE</type>
                    <command-string></command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:pfr-classes/pfr-class/class-match-condition</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePFRClassMatchCondition</name>
                    <type>CREATE</type>
                    <command-string>domain $../domain-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL")
                        vrf $../vrf-name                       
                    </command-string>
                    <command-string>master hub</command-string>
                    <command-string>class $../name sequence $../sequence-number</command-string>
                    <command-string>match $condition-type $match-value policy $match-policy</command-string>
                </device-operation>
                <device-operation>
                    <name>DeletePFRClassMatchCondition</name>
                    <type>DELETE</type>
                    <command-string></command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:pfr-classes/pfr-class/class-match-condition/priority</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePFRClassMatchConditionPriority</name>
                    <type>CREATE</type>
                    <command-string>domain $../../domain-name</command-string>
                    <command-string>
                        #if($../../vrf-name != "GLOBAL")
                        vrf $../../vrf-name                        
                    </command-string>
                    <command-string>master hub</command-string>
                    <command-string>class $../../name sequence $../../sequence-number</command-string>
                    <command-string>match $../condition-type $../match-value policy $../match-policy</command-string>
                    <command-string>priority $priority-value $priority-type threshold $threshold-value</command-string>
                </device-operation>
                <device-operation>
                    <name>DeletePFRClassMatchConditionPriority</name>
                    <type>DELETE</type>
                    <command-string></command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:pfr-policy-maps/pfr-policy-map</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePfrPolicyMap</name>
                    <type>CREATE</type>
                    <command-string></command-string>
                </device-operation>
                <device-operation>
                    <name>DeletePfrPolicyMap</name>
                    <type>DELETE</type>
                    <command-string></command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/qos:pfr-classes/pfr-class/pfr-path</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePfrPolicyMapClassEntry</name>
                    <type>CREATE</type>
                    <command-string>domain $../domain-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL")
                        vrf $../vrf-name                        
                    </command-string>
                    <command-string>master hub</command-string>
                    <command-string>class $../name sequence $../sequence-number</command-string>
                    <command-string>
                        #if($primary-path-preference != null)
                        path-preference $primary-path-preference [fallback $secondary-path-preference] [next-fallback $next-fallback]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeletePfrPolicyMapClassEntry</name>
                    <type>DELETE</type>
                    <command-string>domain $../domain-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL")
                        vrf $../vrf-name                       
                    </command-string>
                    <command-string>master hub</command-string>
                    <command-string>no class $../name sequence $../sequence-number</command-string>
                </device-operation>
            </device-operations>
        </operation>
        
   	<operation>
            <target>/controller:devices/device/l3features:key-chain/router-key-chain</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateKeyChain</name>
                    <type>CREATE</type>
                    <command-string>key chain $key-chain-name</command-string>                    
                </device-operation>	    
                <device-operation>
                    <name>DeleteKeyChain</name>
                    <type>DELETE</type>
                    <command-string>no key chain $key-chain-name</command-string>	        
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/l3features:key-chain/router-key-chain/keys</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateKeyChainKey</name>
                    <type>CREATE</type>
                    <command-string>key chain $../key-chain-name</command-string>
	        <command-string>key $key-identifier</command-string>
   	        <command-string>key-string $key-string-password</command-string>
                </device-operation> 
                 <device-operation>
                    <name>UpdateKeyChainKey</name>
                    <type>UPDATE</type>
                    <command-string>key chain $../key-chain-name</command-string>
                    <command-string>key $key-identifier</command-string>
                    <command-string>key-string $key-string-password</command-string>
                </device-operation>               
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/l3features:eigrp/router-eigrp</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateEigrp</name>
                    <type>CREATE</type>
                    <command-string>router eigrp $eigrp-name</command-string>
                </device-operation>
	    <device-operation>
                    <name>UpdateEigrp</name>
                    <type>UPDATE</type>
                    <command-string>router eigrp $eigrp-name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterEigrp</name>
                    <type>DELETE</type>
                    <command-string>no router eigrp $eigrp-name</command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/l3features:eigrp/router-eigrp/address-family</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterEigrp</name>
                    <type>CREATE</type>
                    <command-string>router eigrp $../eigrp-name</command-string>
                    <command-string>
                        #if($vrf-name != "GLOBAL" AND $vrf-name != null AND $cast == "unicast" AND $as-number != null)
                            address-family ipv4 $cast vrf $vrf-name autonomous-system $as-number
			            #else if(($vrf-name == "GLOBAL" OR $vrf-name == null) AND $cast != null AND $as-number != null)
			                address-family ipv4 $cast autonomous-system $as-number	
			            #else if($vrf-name != "GLOBAL" AND $vrf-name != null AND $cast == null AND $as-number != null)
			                address-family ipv4 vrf $vrf-name autonomous-system $as-number		
			            #else if(($vrf-name == "GLOBAL" OR $vrf-name == null) AND $cast == null AND $as-number != null)
			                address-family ipv4 autonomous-system $as-number
                    </command-string>
	        <command-string>
                        #if($router-id != null)
                        eigrp router-id $router-id
                    </command-string>	        
	        <command-string>
                        #if($eigrp-stub != null AND $summary == "true" AND $redistributed == "true")
                        eigrp stub $eigrp-stub summary redistributed
		#else if($eigrp-stub != null AND $summary != "true" AND $redistributed == "true")
                        eigrp stub $eigrp-stub redistributed
		#else if($eigrp-stub != null AND $summary == "true" AND $redistributed != "true")
                        eigrp stub $eigrp-stub summary
                    </command-string>
	        <command-string>
		#if($topology-base == "true")
		topology base
	        </command-string>
	        <command-string>distance eigrp $internal-route-distance $external-route-distance</command-string>
                </device-operation>
	    <device-operation>
                    <name>UpdateRouterEigrp</name>
                    <type>UPDATE</type>
                    <command-string>router eigrp $../eigrp-name</command-string>
                    <command-string>
                        #if($vrf-name != "GLOBAL" AND $vrf-name != null AND $cast == "unicast" AND $as-number != null)
                            address-family ipv4 $cast vrf $vrf-name autonomous-system $as-number
			            #else if(($vrf-name == "GLOBAL" OR $vrf-name == null) AND $cast != null AND $as-number != null)
			                address-family ipv4 $cast autonomous-system $as-number	
			            #else if($vrf-name != "GLOBAL" AND $vrf-name != null AND $cast == null AND $as-number != null)
			                address-family ipv4 vrf $vrf-name autonomous-system $as-number		
			            #else if(($vrf-name == "GLOBAL" OR $vrf-name == null) AND $cast == null AND $as-number != null)
			                address-family ipv4 autonomous-system $as-number
                    </command-string>
		    <command-string>
                        #if($router-id != null)
                        eigrp router-id $router-id
                    </command-string>		    
		    <command-string>
                        #if($eigrp-stub != null AND $summary == "true" AND $redistributed == "true")
                        eigrp stub $eigrp-stub summary redistributed
		#else if($eigrp-stub != null AND $summary != "true" AND $redistributed == "true")
                        eigrp stub $eigrp-stub redistributed
		#else if($eigrp-stub != null AND $summary == "true" AND $redistributed != "true")
                        eigrp stub $eigrp-stub summary
                    </command-string>
	        <command-string>
		#if($topology-base == "true")
		topology base
	        </command-string>
	        <command-string>distance eigrp $internal-route-distance $external-route-distance</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterEigrp</name>
                    <type>DELETE</type>
                    <command-string>router eigrp $../eigrp-name</command-string>
	        <command-string>
                        #if($vrf-name != "GLOBAL" AND $vrf-name != null AND $cast == "unicast" AND $as-number != null)
                            no address-family ipv4 $cast vrf $vrf-name autonomous-system $as-number
			            #else if(($vrf-name == "GLOBAL" OR $vrf-name == null) AND $cast != null AND $as-number != null)
			                no address-family ipv4 $cast autonomous-system $as-number	
			            #else if($vrf-name != "GLOBAL" AND $vrf-name != null AND $cast == null AND $as-number != null)
			                no address-family ipv4 vrf $vrf-name autonomous-system $as-number		
			            #else if(($vrf-name == "GLOBAL" OR $vrf-name == null) AND $cast == null AND $as-number != null)
			                no address-family ipv4 autonomous-system $as-number
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/l3features:eigrp/router-eigrp/address-family/af-interface</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterEigrpAfInterface</name>
                    <type>CREATE</type>
                    <command-string>router eigrp $../../eigrp-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == "unicast" AND $../as-number != null)
                            address-family ipv4 $../cast vrf $../vrf-name autonomous-system $../as-number
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast != null AND $../as-number != null)
			                address-family ipv4 $../cast autonomous-system $../as-number	
                        #else if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == null AND $../as-number != null)
			                address-family ipv4 vrf $../vrf-name autonomous-system $../as-number		
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast == null AND $../as-number != null)
			                address-family ipv4 autonomous-system $../as-number
                    </command-string>
                    <command-string>af-interface $interface</command-string>
		    <command-string>
                        #if($passive-interface == "true")
                        passive-interface
			#else if($passive-interface == "false")
                        no passive-interface
                    </command-string>
	        <command-string>authentication mode $auth-mode</command-string>
                    <command-string>authentication key-chain $key-chain</command-string>
	        <command-string>hello-interval $hello-interval</command-string>
	        <command-string>hold-time $hold-time</command-string>
	        <command-string>
                        #if($split-horizon == "true")
                        split-horizon
		#else if($split-horizon == "false")
                        no split-horizon
                    </command-string>    
	        <command-string>exit-address-family</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateRouterEigrpAfInterface</name>
                    <type>UPDATE</type>
                    <command-string>router eigrp $../../eigrp-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == "unicast" AND $../as-number != null)
                            address-family ipv4 $../cast vrf $../vrf-name autonomous-system $../as-number
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast != null AND $../as-number != null)
			                address-family ipv4 $../cast autonomous-system $../as-number	
                        #else if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == null AND $../as-number != null)
			                address-family ipv4 vrf $../vrf-name autonomous-system $../as-number		
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast == null AND $../as-number != null)
			                address-family ipv4 autonomous-system $../as-number
                    </command-string>
                    <command-string>af-interface $interface</command-string>
		    <command-string>
                        #if($passive-interface == "true")
                        passive-interface
			#else if($passive-interface == "false")
                        no passive-interface
                    </command-string>
	        <command-string>authentication mode $auth-mode</command-string>
                    <command-string>authentication key-chain $key-chain</command-string>
	        <command-string>hello-interval $hello-interval</command-string>
	        <command-string>hold-time $hold-time</command-string>
	        <command-string>
                        #if($split-horizon == "true")
                        split-horizon
		#else if($split-horizon == "false")
                        no split-horizon
                    </command-string>	        
	        <command-string>exit-address-family</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterEigrpAfInterface</name>
                    <type>DELETE</type>
                    <command-string>router eigrp $../../eigrp-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == "unicast" AND $../as-number != null)
                            address-family ipv4 $../cast vrf $../vrf-name autonomous-system $../as-number
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast != null AND $../as-number != null)
			                address-family ipv4 $../cast autonomous-system $../as-number	
                        #else if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == null AND $../as-number != null)
			                address-family ipv4 vrf $../vrf-name autonomous-system $../as-number		
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast == null AND $../as-number != null)
			                address-family ipv4 autonomous-system $../as-number
                    </command-string>
                    <command-string>
                        no af-interface $interface
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:eigrp/router-eigrp/address-family/af-interface/summary-network</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterEigrpAfIntSummaryNetworks</name>
                    <type>CREATE</type>
                    <command-string>router eigrp $../../../eigrp-name</command-string>
                    <command-string>
                        #if($../../vrf-name != "GLOBAL" AND $../../vrf-name != null AND $../../cast == "unicast" AND $../../as-number != null)
                            address-family ipv4 $../../cast vrf $../../vrf-name autonomous-system $../../as-number
			            #else if(($../../vrf-name == "GLOBAL" OR $../../vrf-name == null) AND $../../cast != null AND $../../as-number != null)
			                address-family ipv4 $../../cast autonomous-system $../../as-number	
                        #else if($../../vrf-name != "GLOBAL" AND $../../vrf-name != null AND $../../cast == null AND $../../as-number != null)
			                address-family ipv4 vrf $../../vrf-name autonomous-system $../../as-number		
			            #else if(($../../vrf-name == "GLOBAL" OR $../../vrf-name == null) AND $../../cast == null AND $../../as-number != null)
			                address-family ipv4 autonomous-system $../../as-number
                    </command-string>
                    <command-string>af-interface $../interface</command-string>
	        <command-string>summary-address $ip-address $netmask</command-string>
                </device-operation>
	    <device-operation>
                    <name>UpdateEigrpAfIntSummaryNetworks</name>
                    <type>UPDATE</type>
                    <command-string>router eigrp $../../../eigrp-name</command-string>
                    <command-string>
                        #if($../../vrf-name != "GLOBAL" AND $../../vrf-name != null AND $../../cast == "unicast" AND $../../as-number != null)
                            address-family ipv4 $../../cast vrf $../../vrf-name autonomous-system $../../as-number
			            #else if(($../../vrf-name == "GLOBAL" OR $../../vrf-name == null) AND $../../cast != null AND $../../as-number != null)
			                address-family ipv4 $../../cast autonomous-system $../../as-number	
                        #else if($../../vrf-name != "GLOBAL" AND $../../vrf-name != null AND $../../cast == null AND $../../as-number != null)
			                address-family ipv4 vrf $../../vrf-name autonomous-system $../../as-number		
			            #else if(($../../vrf-name == "GLOBAL" OR $../../vrf-name == null) AND $../../cast == null AND $../../as-number != null)
			                address-family ipv4 autonomous-system $../../as-number
                    </command-string>
                    <command-string>af-interface $../interface</command-string>
	        <command-string>summary-address $ip-address $netmask</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterEigrpAfIntSummaryNetworks</name>
                    <type>DELETE</type>
                    <command-string>router eigrp $../../../eigrp-name</command-string>
                    <command-string>
                        #if($../../vrf-name != "GLOBAL" AND $../../vrf-name != null AND $../../cast == "unicast" AND $../../as-number != null)
                            address-family ipv4 $../../cast vrf $../../vrf-name autonomous-system $../../as-number
			            #else if(($../../vrf-name == "GLOBAL" OR $../../vrf-name == null) AND $../../cast != null AND $../../as-number != null)
			                address-family ipv4 $../../cast autonomous-system $../../as-number	
                        #else if($../../vrf-name != "GLOBAL" AND $../../vrf-name != null AND $../../cast == null AND $../../as-number != null)
			                address-family ipv4 vrf $../../vrf-name autonomous-system $../../as-number		
			            #else if(($../../vrf-name == "GLOBAL" OR $../../vrf-name == null) AND $../../cast == null AND $../../as-number != null)
			                address-family ipv4 autonomous-system $../../as-number
                    </command-string>
                    <command-string>af-interface $../interface</command-string>
	        <command-string>no summary-address $ip-address $netmask</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:eigrp/router-eigrp/address-family/distribute-list</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterEigrpDistributeList</name>
                    <type>CREATE</type>
                    <command-string>router eigrp $../../eigrp-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == "unicast" AND $../as-number != null)
                            address-family ipv4 $../cast vrf $../vrf-name autonomous-system $../as-number
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast != null AND $../as-number != null)
			                address-family ipv4 $../cast autonomous-system $../as-number	
                        #else if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == null AND $../as-number != null)
			                address-family ipv4 vrf $../vrf-name autonomous-system $../as-number		
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast == null AND $../as-number != null)
			                address-family ipv4 autonomous-system $../as-number
                    </command-string>
	        <command-string>
		#if($../topology-base == "true")
		topology base
	        </command-string>
	        <command-string>distribute-list route-map $route-map $filter $interface</command-string>	        
	        <command-string>exit-af-topology</command-string>
                </device-operation>
	    <device-operation>
                    <name>UpdateRouterEigrpDistributeList</name>
                    <type>UPDATE</type>
                    <command-string>router eigrp $../../eigrp-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == "unicast" AND $../as-number != null)
                            address-family ipv4 $../cast vrf $../vrf-name autonomous-system $../as-number
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast != null AND $../as-number != null)
			                address-family ipv4 $../cast autonomous-system $../as-number	
                        #else if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == null AND $../as-number != null)
			                address-family ipv4 vrf $../vrf-name autonomous-system $../as-number		
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast == null AND $../as-number != null)
			                address-family ipv4 autonomous-system $../as-number
                    </command-string>
	        <command-string>
		#if($../topology-base == "true")
		topology base
	        </command-string>
	        <command-string>distribute-list route-map $route-map $filter $interface</command-string>	        
	        <command-string>exit-af-topology</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterEigrpDistributeList</name>
                    <type>DELETE</type>
                    <command-string>router eigrp $../../eigrp-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == "unicast" AND $../as-number != null)
                            address-family ipv4 $../cast vrf $../vrf-name autonomous-system $../as-number
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast != null AND $../as-number != null)
			                address-family ipv4 $../cast autonomous-system $../as-number	
                        #else if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == null AND $../as-number != null)
			                address-family ipv4 vrf $../vrf-name autonomous-system $../as-number		
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast == null AND $../as-number != null)
			                address-family ipv4 autonomous-system $../as-number
                    </command-string>
	        <command-string>
		#if($../topology-base == "true")
		topology base
	        </command-string>
	        <command-string>no distribute-list route-map $route-map $filter $interface</command-string>	        
	        <command-string>exit-af-topology</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:eigrp/router-eigrp/address-family/summary-metric</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterEigrpSummaryMetric</name>
                    <type>CREATE</type>
                    <command-string>router eigrp $../../eigrp-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == "unicast" AND $../as-number != null)
                            address-family ipv4 $../cast vrf $../vrf-name autonomous-system $../as-number
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast != null AND $../as-number != null)
			                address-family ipv4 $../cast autonomous-system $../as-number	
                        #else if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == null AND $../as-number != null)
			                address-family ipv4 vrf $../vrf-name autonomous-system $../as-number		
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast == null AND $../as-number != null)
			                address-family ipv4 autonomous-system $../as-number
                    </command-string>
	        <command-string>
		#if($../topology-base == "true")
		topology base
	        </command-string>
	        <command-string>summary-metric $summary $bandwidth-metric $delay-metric $reliability-metric $load-metric $mtu</command-string>
	        <command-string>exit-af-topology</command-string>
                </device-operation>
	    <device-operation>
                    <name>UpdateEigrpSummaryMetric</name>
                    <type>UPDATE</type>
                    <command-string>router eigrp $../../eigrp-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == "unicast" AND $../as-number != null)
                            address-family ipv4 $../cast vrf $../vrf-name autonomous-system $../as-number
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast != null AND $../as-number != null)
			                address-family ipv4 $../cast autonomous-system $../as-number	
                        #else if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == null AND $../as-number != null)
			                address-family ipv4 vrf $../vrf-name autonomous-system $../as-number		
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast == null AND $../as-number != null)
			                address-family ipv4 autonomous-system $../as-number
                    </command-string>
	        <command-string>
		#if($../topology-base == "true")
		topology base
	        </command-string>
	        <command-string>summary-metric $summary $bandwidth-metric $delay-metric $reliability-metric $load-metric $mtu</command-string>
	        <command-string>exit-af-topology</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterEigrpSummaryMetric</name>
                    <type>DELETE</type>
                    <command-string>router eigrp $../../eigrp-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == "unicast" AND $../as-number != null)
                            address-family ipv4 $../cast vrf $../vrf-name autonomous-system $../as-number
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast != null AND $../as-number != null)
			                address-family ipv4 $../cast autonomous-system $../as-number	
                        #else if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == null AND $../as-number != null)
			                address-family ipv4 vrf $../vrf-name autonomous-system $../as-number		
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast == null AND $../as-number != null)
			                address-family ipv4 autonomous-system $../as-number
                    </command-string>
	        <command-string>
		#if($../topology-base == "true")
		topology base
	        </command-string>
	        <command-string>no summary-metric $summary $bandwidth-metric $delay-metric $reliability-metric $load-metric $mtu</command-string>
	        <command-string>exit-af-topology</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:eigrp/router-eigrp/address-family/network</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterEigrpNetwork</name>
                    <type>CREATE</type>
                    <command-string>router eigrp $../../eigrp-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == "unicast" AND $../as-number != null)
                            address-family ipv4 $../cast vrf $../vrf-name autonomous-system $../as-number
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast != null AND $../as-number != null)
			                address-family ipv4 $../cast autonomous-system $../as-number	
                        #else if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == null AND $../as-number != null)
			                address-family ipv4 vrf $../vrf-name autonomous-system $../as-number		
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast == null AND $../as-number != null)
			                address-family ipv4 autonomous-system $../as-number
                    </command-string>
                    <command-string>
		#if($wild-card != null)
		network $ip-address $wild-card
		#else if($wild-card == null)
		network $ip-address
	        </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateRouterEigrpNetwork</name>
                    <type>UPDATE</type>
                    <command-string>router eigrp $../../eigrp-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == "unicast" AND $../as-number != null)
                            address-family ipv4 $../cast vrf $../vrf-name autonomous-system $../as-number
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast != null AND $../as-number != null)
			                address-family ipv4 $../cast autonomous-system $../as-number	
                        #else if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == null AND $../as-number != null)
			                address-family ipv4 vrf $../vrf-name autonomous-system $../as-number		
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast == null AND $../as-number != null)
			                address-family ipv4 autonomous-system $../as-number
                    </command-string>
                    <command-string>
		#if($wild-card != null)
		no network $ip-address.%previous $wild-card.%previous
                        network $ip-address $wild-card
		#else if($wild-card == null)
		no network $ip-address.%previous
                        network $ip-address                   
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterEigrpNetwork</name>
                    <type>DELETE</type>
                    <command-string>router eigrp $../../eigrp-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == "unicast" AND $../as-number != null)
                            address-family ipv4 $../cast vrf $../vrf-name autonomous-system $../as-number
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast != null AND $../as-number != null)
			                address-family ipv4 $../cast autonomous-system $../as-number	
                        #else if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == null AND $../as-number != null)
			                address-family ipv4 vrf $../vrf-name autonomous-system $../as-number		
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast == null AND $../as-number != null)
			                address-family ipv4 autonomous-system $../as-number
                    </command-string>
                    <command-string>
		#if($wild-card != null)
		no network $ip-address $wild-card
		#else if($wild-card == null)
		no network $ip-address
	        </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:eigrp/router-eigrp/address-family/redistribute</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterEigrpRedistribute</name>
                    <type>CREATE</type>
                    <command-string>router eigrp $../../eigrp-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == "unicast" AND $../as-number != null)
                            address-family ipv4 $../cast vrf $../vrf-name autonomous-system $../as-number
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast != null AND $../as-number != null)
			                address-family ipv4 $../cast autonomous-system $../as-number	
                        #else if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == null AND $../as-number != null)
			                address-family ipv4 vrf $../vrf-name autonomous-system $../as-number		
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast == null AND $../as-number != null)
			                address-family ipv4 autonomous-system $../as-number
                    </command-string>
                    <command-string>
		#if($../topology-base == "true")
		topology base
	        </command-string>	        
	        <command-string>
		#if($protocol == "connected")
		redistribute $protocol [metric $bandwidth-metric] [$delay-metric] [$reliability-metric] [$load-metric] [$mtu] [route-map $route-map]
		#else if($protocol == "eigrp")
		redistribute $protocol $as-number [metric $bandwidth-metric] [$delay-metric] [$reliability-metric] [$load-metric] [$mtu] [route-map $route-map]
		#else if($protocol == "ospf")
		redistribute $protocol $ospf-id [metric $bandwidth-metric] [$delay-metric] [$reliability-metric] [$load-metric] [$mtu] [route-map $route-map]
	        </command-string>
	        <command-string>exit-af-topology</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterEigrpRedistribute</name>
                    <type>DELETE</type>
                    <command-string>router eigrp $../../eigrp-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == "unicast" AND $../as-number != null)
                            address-family ipv4 $../cast vrf $../vrf-name autonomous-system $../as-number
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast != null AND $../as-number != null)
			                address-family ipv4 $../cast autonomous-system $../as-number	
                        #else if($../vrf-name != "GLOBAL" AND $../vrf-name != null AND $../cast == null AND $../as-number != null)
			                address-family ipv4 vrf $../vrf-name autonomous-system $../as-number		
			            #else if(($../vrf-name == "GLOBAL" OR $../vrf-name == null) AND $../cast == null AND $../as-number != null)
			                address-family ipv4 autonomous-system $../as-number
                    </command-string>
                    <command-string>
                        #if($../topology-base == "true")
		topology base
                    </command-string>
	        <command-string>
		#if($protocol == "connected")
		no redistribute $protocol [metric $bandwidth-metric] [$delay-metric] [$reliability-metric] [$load-metric] [$mtu] [route-map $route-map]
		#else if($protocol == "eigrp")
		no redistribute $protocol $as-number [metric $bandwidth-metric] [$delay-metric] [$reliability-metric] [$load-metric] [$mtu] [route-map $route-map]
		#else if($protocol == "ospf")
		no redistribute $protocol $ospf-id [metric $bandwidth-metric] [$delay-metric] [$reliability-metric] [$load-metric] [$mtu] [route-map $route-map]
	        </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-eigrp/eigrp</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createVrfRouterEigrp</name>
                    <type>CREATE</type>
                    <command-string>router eigrp $process-id</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL")
                        address-family ipv4 vrf $../../name
                    </command-string>
	        <command-string>
                        #if($router-id != null)
                        eigrp router-id $router-id
                    </command-string>
		    <command-string>
                        #if($eigrp-stub != null)
                        eigrp stub $eigrp-stub
                    </command-string>
	        <command-string>distance eigrp $internal-route-distance $external-route-distance</command-string>
                </device-operation>
		<device-operation>
                    <name>updateVrfRouterEigrp</name>
                    <type>UPDATE</type>
                    <command-string>router eigrp $process-id</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL")
                        address-family ipv4 vrf $../../name
                    </command-string>
		    <command-string>
                        #if($eigrp-stub != null)
                        eigrp stub $eigrp-stub
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>deleteVrfRouterEigrp</name>
                    <type>DELETE</type>
                    <command-string>no router eigrp $process-id</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
	<target>/controller:devices/device/l3features:vrfs/vrf/router-eigrp/eigrp/passive-interface</target>
	<platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	<device-operations>
	    <device-operation>
	        <name>CreateRouterEigrpPassiveInterface</name>
	        <type>CREATE</type>
	        <command-string>router eigrp $../../process-id</command-string>
	        <command-string>
                        #if($../../../name != "GLOBAL")
                        address-family ipv4 vrf $../../../name
                    </command-string>
	        <command-string>
		#if($passive-interface == "true")                        
                        passive-interface $interface
		#else if($passive-interface == "false")
                        no passive-interface $interface                    			
                    </command-string>
                </device-operation>
	    <device-operation>
	        <name>UpdateRouterEigrpPassiveInterface</name>
                    <type>UPDATE</type>
	        <command-string>router eigrp $../../process-id</command-string>
	        <command-string>
                        #if($../../../name != "GLOBAL")
                        address-family ipv4 vrf $../../../name
                    </command-string>
	        <command-string>
		#if($passive-interface == "true")                        
                        passive-interface $interface
		#else if($passive-interface == "false")
                        no passive-interface $interface                    			
                    </command-string>
	    </device-operation>
        <device-operation>
            <name>DeleteRouterEigrpPassiveInterface</name>
                    <type>DELETE</type>
            <command-string>router eigrp $../process-id</command-string>
            <command-string>
                        #if($../../../name != "GLOBAL")
                        address-family ipv4 vrf $../../../name
                    </command-string>
            <command-string>
        #if($passive-interface.%previous == "true")                        
                        no passive-interface $interface                            
                    </command-string>
        </device-operation>
	</device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-eigrp/eigrp/default-metric</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateRouterEigrpDefaultMetric</name>
                    <type>CREATE</type>
                    <command-string>router eigrp $../process-id</command-string>
                    <command-string>
                        #if($../../../name != "GLOBAL")
                        address-family ipv4 vrf $../../../name
                    </command-string>
                    <command-string>default-metric $bandwidth-metric $delay-metric $reliability-metric $load-metric $mtu</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateRouterEigrpDefaultMetric</name>
                    <type>UPDATE</type>
                    <command-string>router eigrp $../process-id</command-string>
                    <command-string>
                        #if($../../../name != "GLOBAL")
                        address-family ipv4 vrf $../../../name
                    </command-string>
                    <command-string>default-metric $bandwidth-metric $delay-metric $reliability-metric $load-metric $mtu</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteRouterEigrpDefaultMetric</name>
                    <type>DELETE</type>
                    <command-string>router eigrp $../process-id</command-string>
                    <command-string>
                        #if($../../../name != "GLOBAL")
                        address-family ipv4 vrf $../../../name
                    </command-string>
                    <command-string>no default-metric $bandwidth-metric $delay-metric $reliability-metric $load-metric $mtu</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
	<target>/controller:devices/device/l3features:vrfs/vrf/router-eigrp/eigrp/distribute-list</target>
	<platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	<device-operations>
	    <device-operation>
	        <name>CreateRouterEigrpDistributeList</name>
	        <type>CREATE</type>
	        <command-string>router eigrp $../../process-id</command-string>
	        <command-string>
                        #if($../../../name != "GLOBAL")
                        address-family ipv4 vrf $../../../name
                    </command-string>
	        <command-string>distribute-list route-map $route-map $filter $interface</command-string>
                </device-operation>
	    <device-operation>
	        <name>UpdateRouterEigrpDistributeList</name>
                    <type>UPDATE</type>
	        <command-string>router eigrp $../process-id</command-string>
	        <command-string>
                        #if($../../../name != "GLOBAL")
                        address-family ipv4 vrf $../../../name
                    </command-string>
	        <command-string>distribute-list route-map $route-map $filter $interface</command-string>
	    </device-operation>
	    <device-operation>
	        <name>DeleteRouterEigrpDistributeList</name>
	        <type>DELETE</type>
	        <command-string>router eigrp $../../process-id</command-string>
	        <command-string>
                        #if($../../../name != "GLOBAL")
                        address-family ipv4 vrf $../../../name
                    </command-string>
	        <command-string>no distribute-list route-map $route-map $filter $interface</command-string>
                </device-operation>
	</device-operations>
        </operation>
        <operation>
	<target>/controller:devices/device/l3features:vrfs/vrf/router-eigrp/eigrp/summary-metric</target>
	<platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	<device-operations>
	    <device-operation>
	        <name>CreateRouterEigrpSummaryMetric</name>
	        <type>CREATE</type>
	        <command-string>router eigrp $../../process-id</command-string>
	        <command-string>
                        #if($../../../name != "GLOBAL")
                        address-family ipv4 vrf $../../../name
                    </command-string>
	        <command-string>summary-metric $summary $bandwidth-metric $delay-metric $reliability-metric $load-metric $mtu</command-string>
                </device-operation>
	    <device-operation>
	        <name>UpdateEigrpSummaryMetric</name>
                    <type>UPDATE</type>
	        <command-string>router eigrp $../../process-id</command-string>
	        <command-string>
                        #if($../../../name != "GLOBAL")
                        address-family ipv4 vrf $../../../name
                    </command-string>
	        <command-string>summary-metric $summary $bandwidth-metric $delay-metric $reliability-metric $load-metric $mtu</command-string>
	    </device-operation>
	    <device-operation>
	        <name>DeleteRouterEigrpSummaryMetric</name>
	        <type>DELETE</type>
	        <command-string>router eigrp $../../process-id</command-string>
	        <command-string>
                        #if($../../../name != "GLOBAL")
                        address-family ipv4 vrf $../../../name
                    </command-string>
	        <command-string>no summary-metric $summary $bandwidth-metric $delay-metric $reliability-metric $load-metric $mtu</command-string>
                </device-operation>
	</device-operations>
        </operation>
        <operation>
	<target>/controller:devices/device/l3features:vrfs/vrf/router-eigrp/eigrp/redistribute</target>
	<platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	<device-operations>
	    <device-operation>
	        <name>CreateRouterEigrpRedistribute</name>
	        <type>CREATE</type>
	        <command-string>router eigrp $../../process-id</command-string>
	        <command-string>
                        #if($../../../name != "GLOBAL")
                        address-family ipv4 vrf $../../../name
                    </command-string>
	        <command-string>
	            #if($protocol == "connected" or $protocol == "static")
		redistribute $protocol [metric $bandwidth-metric] [$delay-metric] [$reliability-metric] [$load-metric] [$mtu] [route-map $route-map]
		#else if($protocol == "eigrp" or $protocol == "bgp")
		redistribute $protocol $as-number [metric $bandwidth-metric] [$delay-metric] [$reliability-metric] [$load-metric] [$mtu] [route-map $route-map]
		#else if($protocol == "ospf")
		redistribute $protocol $ospf-id [metric $bandwidth-metric] [$delay-metric] [$reliability-metric] [$load-metric] [$mtu] [route-map $route-map]
	        </command-string>
                </device-operation>	 
                 <device-operation>
            <name>UpdateRouterEigrpRedistribute</name>
            <type>UPDATE</type>
            <command-string>router eigrp $../../process-id</command-string>
            <command-string>
                        #if($../../../name != "GLOBAL")
                        address-family ipv4 vrf $../../../name
                    </command-string>
            <command-string>
                #if($protocol == "connected" or $protocol == "static")
        redistribute $protocol [metric $bandwidth-metric] [$delay-metric] [$reliability-metric] [$load-metric] [$mtu] [route-map $route-map]
        #else if($protocol == "eigrp" or $protocol == "bgp")
        redistribute $protocol $as-number [metric $bandwidth-metric] [$delay-metric] [$reliability-metric] [$load-metric] [$mtu] [route-map $route-map]
        #else if($protocol == "ospf")
        redistribute $protocol $ospf-id [metric $bandwidth-metric] [$delay-metric] [$reliability-metric] [$load-metric] [$mtu] [route-map $route-map]
            </command-string>
            </device-operation>        
	    <device-operation>
	        <name>DeleteRouterEigrpRedistribute</name>
	        <type>DELETE</type>
	        <command-string>router eigrp $../../process-id</command-string>
	        <command-string>
                        #if($../../../name != "GLOBAL")
                        address-family ipv4 vrf $../../../name
                    </command-string>
	        <command-string>
	            #if($protocol == "connected" or $protocol == "static")
		no redistribute $protocol [metric $bandwidth-metric] [$delay-metric] [$reliability-metric] [$load-metric] [$mtu] [route-map $route-map]
		#else if($protocol == "eigrp" or $protocol == "bgp")
		no redistribute $protocol $as-number [metric $bandwidth-metric] [$delay-metric] [$reliability-metric] [$load-metric] [$mtu] [route-map $route-map]
		#else if($protocol == "ospf")
		no redistribute $protocol $ospf-id [metric $bandwidth-metric] [$delay-metric] [$reliability-metric] [$load-metric] [$mtu] [route-map $route-map]
	        </command-string>
                </device-operation>
	</device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-eigrp/eigrp/network</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
	    <device-operation>
                    <name>parseVrfRouterEigrp</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>router eigrp $process-id</command-string>
	        <command-string>
                        #if($../../name != "GLOBAL")
                        address-family ipv4 vrf $../../name
                    </command-string>
	        <command-string>nsf</command-string>		    
	        <command-string>eigrp router-id $router-id</command-string>
	        <command-string>eigrp stub $eigrp-stub</command-string>
	        <command-string>distance eigrp $internal-route-distance $external-route-distance</command-string>
                </device-operation>
                <device-operation>
                    <name>createVrfRouterEigrpNetwork</name>
                    <type>CREATE</type>
                    <command-string>router eigrp $../../process-id</command-string>
                    <command-string>
                        #if($../../../name != "GLOBAL")
                        address-family ipv4 vrf $../../../name
                    </command-string>
                    <command-string>
			#if($wild-card != null)
			network $ip-address $wild-card
			#else if($wild-card == null)
			network $ip-address
		    </command-string>
                </device-operation>
                <device-operation>
                    <name>updateVrfRouterEigrpNetwork</name>
                    <type>UPDATE</type>
                    <command-string>router eigrp $../../process-id</command-string>
                    <command-string>
                        #if($../../../name != "GLOBAL")
                        address-family ipv4 vrf $../../../name
                    </command-string>
                    <command-string>
                        no network $ip-address.%previous $wild-card.%previous
                        #if($wild-card != null)
			network $ip-address $wild-card
			#else if($wild-card == null)
			network $ip-address
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>deleteVrfRouterEigrpNetwork</name>
                    <type>DELETE</type>
                    <command-string>router eigrp $../../process-id</command-string>
                    <command-string>
                        #if($../../../name != "GLOBAL")
                        address-family ipv4 vrf $../../../name
                    </command-string>
                    <command-string>
                        #if($wild-card != null)
			no network $ip-address $wild-card
			#else if($wild-card == null)
			no network $ip-address
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-eigrp</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>                
                <device-operation>
                    <name>deleteVrfRouterEigrp</name>
                    <type>DELETE</type>
                    <command-string>no router eigrp $process-id</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:vrfs/vrf/router-eigrp/network</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>                
                <device-operation>
                    <name>deleteVrfRouterEigrpNetwork</name>
                    <type>DELETE</type>
                    <command-string>router eigrp $../process-id</command-string>
                    <command-string>
                        #if($../../name != "GLOBAL")
                        address-family ipv4 vrf $../../name
                    </command-string>
                    <command-string>
                        no network $ip-address $wild-card
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseDmvpnTunnel</name>
                    <type>PARSE</type>
                    <command-string>interface $name</command-string>
                     <command-string>
                        #if($tunnel-mode == "gre")
                        tunnel mode $tunnel-mode multipoint
                        #else if($tunnel-mode == "mpls")
                        tunnel mode $tunnel-mode traffic-eng [$multimode]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateDmvpnTunnel</name>
                    <type>CREATE</type>
                    <command-string>interface tunnel $name</command-string>
                    <command-string>
                        #if($description != null)
                        description $description
                    </command-string>
                    <command-string>
                        #if($vrf-name != null AND $vrf-name != "GLOBAL" AND $vrf-definition-mode == "false")
                        ip vrf forwarding $vrf-name
			#else if($vrf-name != null AND $vrf-name != "GLOBAL" AND $vrf-definition-mode == "true")
                        vrf forwarding $vrf-name
                    </command-string>
                    <command-string>ip address $ipaddress $netmask</command-string>
                    <command-string>no ip redirects</command-string>
                    <command-string>ip mtu $mtu</command-string>
                    <command-string>ip tcp adjust-mss $tcp-adjust-mss</command-string>
                    <command-string>[ip nhrp authentication $nhrp-auth-key]</command-string>
                    <command-string>[ip nhrp network-id $nhrp-network-id]</command-string>
                    <command-string>[ip nhrp holdtime $nhrp-holdtime]</command-string>
                    <command-string>
                        #if($type == "HUB" AND $nhrp-redirect == "true")
                        ip nhrp redirect
			#else if($type == "HUB" AND $nhrp-redirect == "false")
                        no ip nhrp redirect
                    </command-string>
                    <command-string>ip nhrp registration timeout $nhrp-reg-timeout</command-string>
                    <command-string>
                        #if($nhrp-reg-no-uniq == 'true')
                        ip nhrp registration no-unique
                    </command-string>
                    <command-string>
                        #if($type == "SPOKE" AND $nhrp-shortcut == "true")
                        ip nhrp shortcut
			#else if($type == "SPOKE" AND $nhrp-shortcut == "false")
                        no ip nhrp shortcut
                    </command-string>
                     <command-string>
                        #if($ip-unnumbered != null)
                        ip unnumbered $ip-unnumbered
                    </command-string>
                    <command-string>
                        #if($if-state-nhrp == "true")
                        if-state nhrp
                    </command-string>
                    <command-string>
                        #if($type == "SPOKE" AND $no-nhrp-route-watch == 'true')
                        no nhrp route-watch
                    </command-string>
                     <command-string>
                    #if($qos-pre-classify == "true")
                    qos pre-classify
            </command-string>
                   <command-string>
                        #if($load-interval-delay != null)
                        load-interval $load-interval-delay
                    </command-string>
                    <command-string>[delay $delay]</command-string>
		    <command-string>
                        #if($nat-name != null)
                        ip nat $nat-name
                    </command-string>
                    <command-string>[bandwidth $bandwidth]</command-string>
                    <command-string>tunnel source $tunnel-source</command-string>
                    <command-string>tunnel destination $tunnel-destination</command-string>
                    <command-string>
                    #if($tunnel-mode == "gre")
                    tunnel mode $tunnel-mode multipoint
                    #else if($tunnel-mode == "mpls")
                    tunnel mode $tunnel-mode traffic-eng [$multimode]
                    </command-string>
                    <command-string>tunnel key $tunnel-key</command-string>
		    <command-string>                        
                        [keepalive $tunnel-keepalive-period $tunnel-keepalive-retries]
                    </command-string>
                    <command-string>
                        #if($front-vrf-name != null AND $front-vrf-name != "GLOBAL")
                        tunnel vrf $front-vrf-name
                    </command-string>
                    <command-string>
                        #if($type == "HUB" AND $domain-name != null)
                        domain $domain path $domain-name
                    </command-string>
                    <command-string>
                        #if($authentication-type != null)
                        ip authentication mode eigrp $eigrpProcessNumber $authentication-type
                    </command-string>
                    <command-string>
                        #if($key-chain != null)
                        ip authentication key-chain eigrp $eigrpProcessNumber $key-chain
                    </command-string>
                    <command-string>
                        #if($routing-protocol == 'ospf')
                        ip ospf network broadcast
                    </command-string>
                    <command-string>
                        #if($routing-protocol == 'ospf' AND $type == "SPOKE")
                        ip ospf priority 0
			#else if($routing-protocol == 'ospf' AND $type == "HUB")
                        ip ospf priority 255
                    </command-string>
                    <command-string>
                        #if($type == "HUB" AND $map-multicast == "true")
                        ip nhrp map multicast dynamic
                    </command-string>
                    <command-string>
                        #if($shared == "true")
                        tunnel protection ipsec profile $ipsec-profile-name shared
                        #else if($shared == "false")
                        tunnel protection ipsec profile $ipsec-profile-name
                    </command-string>
	        <command-string>[hold-queue $in-queue-length in]</command-string>
	        <command-string>[hold-queue $out-queue-length out]</command-string>
            <command-string>
            #if($tunnel-state == "UP")
                no shutdown
                #else if($tunnel-state == "DOWN")
                shutdown                
            </command-string>
                </device-operation>
		<device-operation>
                    <name>UpdateDmvpnTunnel</name>
                    <type>UPDATE</type>
                     <command-string>interface tunnel $name</command-string>
                     <command-string>
                        #if($vrf-name != null AND $vrf-name != "GLOBAL" AND $vrf-definition-mode == "false")
                        ip vrf forwarding $vrf-name
            #else if($vrf-name != null AND $vrf-name != "GLOBAL" AND $vrf-definition-mode == "true")
                        vrf forwarding $vrf-name
                    </command-string>
                    <command-string>
                        ip address $ipaddress $netmask
                    </command-string>
                    <command-string>
                        #if($mtu != $mtu.%previous)
                        ip mtu $mtu
                    </command-string>
                    <command-string>
                        #if($tcp-adjust-mss != $tcp-adjust-mss.%previous)
                        ip tcp adjust-mss $tcp-adjust-mss
                    </command-string>
                    <command-string>
                        #if($nat-name != null AND $nat-name != $nat-name.%previous)
                        ip nat $nat-name
                    </command-string>
                    <command-string>
                        #(if $bandwidth != $bandwidth.%previous)
                        bandwidth $bandwidth
                    </command-string>
                    <command-string>
                        #if($tunnel-source != $tunnel-source.%previous)
                        tunnel source $tunnel-source
                    </command-string>
                    <command-string>
                        #if($tunnel-destination != $tunnel-destination.%previous)
                        tunnel destination $tunnel-destination
                    </command-string>
                     <command-string>
                        #if($nhrp-auth-key != $nhrp-auth-key.%previous)
                        ip nhrp authentication $nhrp-auth-key
                    </command-string>
                    <command-string>
                        #if($nhrp-network-id != $nhrp-network-id.%previous)
                        ip nhrp network-id $nhrp-network-id
                    </command-string>
                    <command-string>
                        #if($nhrp-holdtime != $nhrp-holdtime.%previous)
                        ip nhrp holdtime $nhrp-holdtime
                    </command-string>
                     <command-string>
                        #if($front-vrf-name != null AND $front-vrf-name != "GLOBAL" AND $front-vrf-name != $front-vrf-name.%previous)
                        tunnel vrf $front-vrf-name
                    </command-string>
                    <command-string>
                        #if($tunnel-key != $tunnel-key.%previous)
                        tunnel key $tunnel-key
                    </command-string>
                    <command-string>
                        #if($tunnel-keepalive-period != $tunnel-keepalive-period.%previous)                     
                        [keepalive $tunnel-keepalive-period $tunnel-keepalive-retries]
                    </command-string>
                    <command-string>
                        #if($ipsec-profile-name != null AND $shared == "true" AND $ipsec-profile-name != $ipsec-profile-name.%previous)
                        tunnel protection ipsec profile $ipsec-profile-name shared
                        #else if($ipsec-profile-name != null AND $shared == "false" AND $ipsec-profile-name != $ipsec-profile-name.%previous)
                        tunnel protection ipsec profile $ipsec-profile-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteDmvpnTunnel</name>
                    <type>DELETE</type>
                    <command-string>no interface tunnel $name</command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/vrf-name</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	    <sequence-number>1</sequence-number>
            <device-operations>
                <device-operation>
                    <name>CreateDmvpnTunnelVrf</name>
                    <type>CREATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                        #if($vrf-name != null AND $vrf-name != "GLOBAL" AND $../vrf-definition-mode == "false")
                        ip vrf forwarding $vrf-name
			#else if($vrf-name != null AND $vrf-name != "GLOBAL" AND $../vrf-definition-mode == "true")
                        vrf forwarding $vrf-name
                    </command-string>
                </device-operation>
                 <device-operation>
                    <name>UpdateDmvpnTunnelVrf</name>
                    <type>UPDATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                        #if($vrf-name != null AND $vrf-name != "GLOBAL" AND $../vrf-definition-mode == "false")
                        ip vrf forwarding $vrf-name
                        #else if($vrf-name != null AND $vrf-name != "GLOBAL" AND $../vrf-definition-mode == "true")
                        vrf forwarding $vrf-name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
         <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/load-interval-delay</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateDmvpnLoadIntervalDelay</name>
                    <type>CREATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                        #if($load-interval-delay != null)
                        load-interval $load-interval-delay
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateDmvpnLoadIntervalDelay</name>
                    <type>UPDATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                        #if($load-interval-delay != null)
                        load-interval $load-interval-delay
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteDmvpnLoadIntervalDelay</name>
                    <type>DELETE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                        #if($load-interval-delay != null)
                        no load-interval $load-interval-delay
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/logging-event</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceLoggingEvent</name>
                    <type>CREATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>logging event $status</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceLoggingEvent</name>
                    <type>UPDATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>logging event $status</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceLoggingEvent</name>
                    <type>DELETE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>no logging event $status</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/ip-unnumbered</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateIpUnnumbered</name>
                    <type>CREATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                        #if($ip-unnumbered != null)
                        ip unnumbered $ip-unnumbered
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateIpUnnumbered</name>
                    <type>UPDATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                        #if($ip-unnumbered != null)
                        ip unnumbered $ip-unnumbered
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteIpUnnumbered</name>
                    <type>DELETE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                        #if($ip-unnumbered != null)
                        no ip unnumbered
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/ipaddress</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	    <sequence-number>2</sequence-number>
            <device-operations>
                <device-operation>
                    <name>CreateDmvpnTunnelIp</name>
                    <type>CREATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>ip address $ipaddress $../netmask</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateDmvpnTunnelIp</name>
                    <type>UPDATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>ip address $ipaddress $../netmask</command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/tcp-adjust-mss</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>                
                <device-operation>
                    <name>UpdateDmvpnTunnelTcpAdjustMss</name>
                    <type>UPDATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                        #if($tcp-adjust-mss != $tcp-adjust-mss.%previous)
                        ip tcp adjust-mss $tcp-adjust-mss
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/mtu</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>                
                <device-operation>
                    <name>UpdateDmvpnTunnelMtu</name>
                    <type>UPDATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                        #if($mtu != $mtu.%previous)
                        ip mtu $mtu
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/nhrp-auth-key</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>                
                <device-operation>
                    <name>UpdateDmvpnTunnelNhrpAuthKey</name>
                    <type>UPDATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                        #if ($nhrp-auth-key != $nhrp-auth-key.%previous)
                        [ip nhrp authentication $nhrp-auth-key]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/nhrp-network-id</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>                
                <device-operation>
                    <name>UpdateDmvpnTunnelNhrpNetworkId</name>
                    <type>UPDATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                        #if($nhrp-network-id != $nhrp-network-id.%previous)
                        [ip nhrp network-id $nhrp-network-id]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
         <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/nhrp-holdtime</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>UpdateDmvpnTunnelNhrpHoldtime</name>
                    <type>UPDATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                        #(if $nhrp-holdtime != $nhrp-holdtime.%previous)
                        ip nhrp holdtime $nhrp-holdtime
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/bandwidth</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>                
                <device-operation>
                    <name>UpdateDmvpnTunnelBandwidth</name>
                    <type>UPDATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                        #if($bandwidth != $bandwidth.%previous)
                        [bandwidth $bandwidth]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/tunnel-key</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>                
                <device-operation>
                    <name>UpdateDmvpnTunnelKey</name>
                    <type>UPDATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                        #if($tunnel-key != $tunnel-key.%previous)
                        tunnel key $tunnel-key
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/tunnel-destination</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <sequence-number>2</sequence-number>
            <device-operations>
                <device-operation>
                    <name>CreateDmvpnTunnelDestination</name>
                    <type>CREATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>tunnel destination $tunnel-destination</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateDmvpnTunnelDestination</name>
                    <type>UPDATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>tunnel destination $tunnel-destination</command-string>
                </device-operation>
            </device-operations>
        </operation>
         <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/front-vrf-name</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>UpdateDmvpnTunnelFVRF</name>
                    <type>UPDATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                        #if($front-vrf-name != null AND $front-vrf-name != "GLOBAL" AND $front-vrf-name != $front-vrf-name.%previous)
                        tunnel vrf $front-vrf-name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/ipsec-profile-name</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>                
                <device-operation>
                    <name>UpdateDmvpnTunnelIpsec</name>
                    <type>UPDATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                        #if($../shared == "true" AND $ipsec-profile-name != $ipsec-profile-name.%previous)
                        tunnel protection ipsec profile $ipsec-profile-name shared
                        #else if($../shared == "false" AND $ipsec-profile-name != $ipsec-profile-name.%previous)
                        tunnel protection ipsec profile $ipsec-profile-name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
         <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/tunnel-mode</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateDmvpnTunnelMode</name>
                    <type>CREATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                        #if($tunnel-mode == "gre")
                    tunnel mode $tunnel-mode multipoint
                    #else if($tunnel-mode == "mpls")
                   tunnel mode $tunnel-mode traffic-eng [$../multimode]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateDmvpnTunnelMode</name>
                    <type>UPDATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                     <command-string>
                        #if($tunnel-mode == "gre")
                    tunnel mode $tunnel-mode multipoint
                    #else if($tunnel-mode == "mpls")
                   tunnel mode $tunnel-mode traffic-eng [$../multimode]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteDmvpnTunnelMode</name>
                    <type>DELETE</type>
                    <command-string>interface Tunnel $../name</command-string>
                     <command-string>
                        #if($tunnel-mode == "gre")
                    no tunnel mode $tunnel-mode multipoint
                    #else if($tunnel-mode == "mpls")
                   no tunnel mode $tunnel-mode traffic-eng [$../multimode]
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
  <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/routing-protocol</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateDmvpnRoutingProtocol</name>
                    <type>CREATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                    #if($routing-protocol == 'ospf')
                    ip ospf network broadcast
                </command-string>
                <command-string>
                        #if($routing-protocol == 'ospf' AND $../type == "SPOKE")
                        ip ospf priority 0
                        #else if($routing-protocol == 'ospf' AND $../type == "HUB")
                        ip ospf priority 255
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateDmvpnRoutingProtocol</name>
                    <type>UPDATE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                    #if($routing-protocol == 'ospf')
                    ip ospf network broadcast
                </command-string>
                <command-string>
                        #if($routing-protocol == 'ospf' AND $../type == "SPOKE")
                        ip ospf priority 0
                        #else if($routing-protocol == 'ospf' AND $../type == "HUB")
                        ip ospf priority 255
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteDmvpnRoutingProtocol</name>
                    <type>DELETE</type>
                    <command-string>interface Tunnel $../name</command-string>
                    <command-string>
                    #if($routing-protocol == 'ospf')
                    no ip ospf network broadcast
                </command-string>
                <command-string>
                        #if($routing-protocol == 'ospf' AND $../type == "SPOKE")
                        no ip ospf priority 0
                        #else if($routing-protocol == 'ospf' AND $../type == "HUB")
                        no ip ospf priority 255
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>  
         <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/tunnel-mpls</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTunnelMpls</name>
                    <type>CREATE</type>
            <command-string>
            #if($traffic-eng != "path-option")
                interface Tunnel $../name
            </command-string>
                    <command-string>
                        #if($traffic-eng == "priority" AND $setup-priority != null AND $hold-priority != null)
                        tunnel mpls traffic-eng $traffic-eng $setup-priority $hold-priority
                        #else if($traffic-eng == "bandwidth" AND $bandwidth != null)
                        tunnel mpls traffic-eng $traffic-eng $bandwidth
                        #else if($traffic-eng == "affinity" AND $affinity != null AND $mask != null)
                        tunnel mpls traffic-eng $traffic-eng $affinity mask $mask
                        #else if($traffic-eng == "record-route")
                        tunnel mpls traffic-eng $traffic-eng
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateTunnelMpls</name>
                    <type>UPDATE</type>
                    <command-string>
            #if($traffic-eng != "path-option")
                interface Tunnel $../name
            </command-string>
            <command-string>
                        #if($traffic-eng == "priority" AND $setup-priority != null AND $hold-priority != null)
                        tunnel mpls traffic-eng $traffic-eng $setup-priority $hold-priority
                        #else if($traffic-eng == "bandwidth" AND $bandwidth != null)
                        tunnel mpls traffic-eng $traffic-eng $bandwidth
                        #else if($traffic-eng == "affinity" AND $affinity != null AND $mask != null)
                        tunnel mpls traffic-eng $traffic-eng $affinity mask $mask
                        #else if($traffic-eng == "record-route")
                        tunnel mpls traffic-eng $traffic-eng
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTunnelMpls</name>
                    <type>DELETE</type>
                    <command-string>
            #if($traffic-eng != "path-option")
                interface Tunnel $../name
            </command-string>
            <command-string>
                        #if($traffic-eng == "priority" AND $setup-priority != null AND $hold-priority != null)
                        no tunnel mpls traffic-eng $traffic-eng $setup-priority $hold-priority
                        #else if($traffic-eng == "bandwidth" AND $bandwidth != null)
                        no tunnel mpls traffic-eng $traffic-eng $bandwidth
                        #else if($traffic-eng == "affinity" AND $affinity != null AND $mask != null)
                        no tunnel mpls traffic-eng $traffic-eng $affinity mask $mask
                        #else if($traffic-eng == "record-route")
                        no tunnel mpls traffic-eng $traffic-eng
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/tunnel-mpls/path-config</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTunnelMplsPathConfig</name>
                    <type>CREATE</type>
            <command-string>interface Tunnel $../../name</command-string>
                    <command-string>
                        #if($../traffic-eng == "path-option" AND $path-number != null AND $path-type == "explicit" AND $explicit-name !=null)
                        tunnel mpls traffic-eng $../traffic-eng $path-number $path-type name $explicit-name
                        #else if($../traffic-eng == "path-option" AND $path-number != null AND $path-type == "dynamic")
                        tunnel mpls traffic-eng $../traffic-eng $path-number $path-type
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateTunnelMplsPathConfig</name>
                    <type>UPDATE</type>
            <command-string>interface Tunnel $../../name</command-string>
                    <command-string>
                        #if($../traffic-eng == "path-option" AND $path-number != null AND $path-type == "explicit" AND $explicit-name !=null)
                        tunnel mpls traffic-eng $../traffic-eng $path-number $path-type name $explicit-name
                        #else if($../traffic-eng == "path-option" AND $path-number != null AND $path-type == "dynamic")
                        tunnel mpls traffic-eng $../traffic-eng $path-number $path-type
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTunnelMplsPathConfig</name>
                    <type>DELETE</type>
            <command-string>interface Tunnel $../../name</command-string>
                    <command-string>
                        #if($../traffic-eng == "path-option" AND $path-number != null AND $path-type == "explicit" AND $explicit-name !=null)
                        no tunnel mpls traffic-eng $../traffic-eng $path-number
                        #else if($../traffic-eng == "path-option" AND $path-number != null AND $path-type == "dynamic")
                        no tunnel mpls traffic-eng $../traffic-eng $path-number $path-type
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/tunnel-mpls/setup-priority</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTunnelSetupPriority</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../traffic-eng == "priority" AND $setup-priority != null AND $../hold-priority != null)
                        tunnel mpls traffic-eng $../traffic-eng $setup-priority $../hold-priority
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateTunnelSetupPriority</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../traffic-eng == "priority" AND $setup-priority != null AND $../hold-priority != null)
                        tunnel mpls traffic-eng $../traffic-eng $setup-priority $../hold-priority
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTunnelSetupPriority</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../traffic-eng == "priority" AND $setup-priority != null AND $../hold-priority != null)
                        no tunnel mpls traffic-eng $../traffic-eng $setup-priority $../hold-priority
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/tunnel-mpls/hold-priority</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTunnelSetupPriority</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../traffic-eng == "priority" AND $../setup-priority != null AND $hold-priority != null)
                        tunnel mpls traffic-eng $../traffic-eng $../setup-priority $hold-priority
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateTunnelSetupPriority</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../traffic-eng == "priority" AND $../setup-priority != null AND $hold-priority != null)
                        tunnel mpls traffic-eng $../traffic-eng $../setup-priority $hold-priority
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTunnelSetupPriority</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../traffic-eng == "priority" AND $../setup-priority != null AND $hold-priority != null)
                        no tunnel mpls traffic-eng $../traffic-eng $../setup-priority $hold-priority
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/tunnel-mpls/bandwidth</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTunnelBandwidth</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../traffic-eng == "bandwidth" AND $bandwidth != null)
                        tunnel mpls traffic-eng $../traffic-eng $bandwidth
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateTunnelBandwidth</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../traffic-eng == "bandwidth" AND $bandwidth != null)
                        tunnel mpls traffic-eng $../traffic-eng $bandwidth
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTunnelBandwidth</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../traffic-eng == "bandwidth" AND $bandwidth != null)
                        no tunnel mpls traffic-eng $../traffic-eng $bandwidth
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/tunnel-mpls/affinity</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTunnelAffinity</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../traffic-eng == "affinity" AND $affinity != null AND $../mask != null)
                        tunnel mpls traffic-eng $../traffic-eng $affinity $../mask
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateTunnelAffinity</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../traffic-eng == "affinity" AND $affinity != null AND $../mask != null)
                        tunnel mpls traffic-eng $../traffic-eng $affinity $../mask
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTunnelAffinity</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../traffic-eng == "affinity" AND $affinity != null AND $../mask != null)
                        no tunnel mpls traffic-eng $../traffic-eng $affinity $../mask
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/tunnel-mpls/mask</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTunnelAffinity</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../traffic-eng == "affinity" AND $../affinity != null AND $mask != null)
                        tunnel mpls traffic-eng $../traffic-eng $../affinity $mask
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateTunnelAffinity</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../traffic-eng == "affinity" AND $../affinity != null AND $mask != null)
                        tunnel mpls traffic-eng $../traffic-eng $../affinity $mask
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTunnelAffinity</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../traffic-eng == "affinity" AND $../affinity != null AND $mask != null)
                        no tunnel mpls traffic-eng $../traffic-eng $../affinity $mask
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/tunnel-mpls/path-config/path-number</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTunnelPathNumber</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../../traffic-eng == "path-option" AND $path-number != null AND $../path-type == "explicit" AND $../explicit-name !=null)
                        tunnel mpls traffic-eng $../../traffic-eng $path-number $../path-type name $../explicit-name
                        #else if($../../traffic-eng == "path-option" AND $path-number != null AND $../path-type == "dynamic")
                        tunnel mpls traffic-eng $../../traffic-eng $path-number $../path-type
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateTunnelPathNumber</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../../traffic-eng == "path-option" AND $path-number != null AND $../path-type == "explicit" AND $../explicit-name !=null)
                        tunnel mpls traffic-eng $../../traffic-eng $path-number $../path-type name $../explicit-name
                        #else if($../../traffic-eng == "path-option" AND $path-number != null AND $../path-type == "dynamic")
                        tunnel mpls traffic-eng $../../traffic-eng $path-number $../path-type
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTunnelPathNumber</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../../traffic-eng == "path-option" AND $path-number != null AND $../path-type == "explicit" AND $../explicit-name !=null)
                        no tunnel mpls traffic-eng $../../traffic-eng $path-number
                        #else if($../../traffic-eng == "path-option" AND $path-number != null AND $../path-type == "dynamic")
                        np tunnel mpls traffic-eng $../../traffic-eng $path-number
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/tunnel-mpls/path-config/path-type</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTunnelPathType</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../traffic-eng == "path-option" AND $../path-number != null AND $path-type == "explicit" AND $../explicit-name !=null)
                        tunnel mpls traffic-eng $../../traffic-eng $../path-number $path-type name $../explicit-name
                        #else if($../traffic-eng == "path-option" AND $../path-number != null AND $path-type == "dynamic")
                        tunnel mpls traffic-eng $../../traffic-eng $../path-number $path-type
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateTunnelPathType</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../traffic-eng == "path-option" AND $../path-number != null AND $path-type == "explicit" AND $../explicit-name !=null)
                        tunnel mpls traffic-eng $../../traffic-eng $../path-number $path-type name $../explicit-name
                        #else if($../traffic-eng == "path-option" AND $../path-number != null AND $path-type == "dynamic")
                        tunnel mpls traffic-eng $../../traffic-eng $../path-number $path-type
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTunnelPathType</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../../traffic-eng == "path-option" AND $../path-number != null AND $path-type == "explicit" AND $../explicit-name !=null)
                        no tunnel mpls traffic-eng $../../traffic-eng $../path-number
                        #else if($../../traffic-eng == "path-option" AND $../path-number != null AND $path-type == "dynamic")
                        no tunnel mpls traffic-eng $../../traffic-eng $../path-number
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/tunnel-mpls/path-config/explicit-name</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTunnelExplicitName</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../../traffic-eng == "path-option" AND $../path-number != null AND $../path-type == "explicit" AND $explicit-name !=null)
                        tunnel mpls traffic-eng $../traffic-eng $../path-number $../path-type name $explicit-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateTunnelExplicitName</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../../traffic-eng == "path-option" AND $../path-number != null AND $../path-type == "explicit" AND $explicit-name !=null)
                        tunnel mpls traffic-eng $../../traffic-eng $../path-number $../path-type name $explicit-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTunnelExplicitName</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../../traffic-eng == "path-option" AND $../path-number != null AND $../path-type == "explicit" AND $explicit-name !=null)
                        no tunnel mpls traffic-eng $../../traffic-eng $../path-number
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/ipsec-profile-name</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>                
                <device-operation>
                    <name>UpdateDmvpnTunnelIpsec</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../shared == "true")
                        tunnel protection ipsec profile $ipsec-profile-name shared
                        #else if($../shared == "false")
                        tunnel protection ipsec profile $ipsec-profile-name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>        
        <operation>
            <target>/controller:devices/device/dmvpn:domain</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createDMVPNDomain</name>
                    <type>CREATE</type>
                    <command-string>domain $domain-name</command-string>
                    <command-string>
                        #if($vrf-name != "GLOBAL")
                        vrf $vrf-name                        
                    </command-string>
                    <command-string>
                        #if($role == "hub-master")
                        master hub
                        #else if($role == "transit")
                        master transit $transid-id
                        #else
                        border
                    </command-string>                    
                    <command-string>
                        #if($role == "mcbr")
                        master local
                    </command-string>
                    <command-string>
                        #if($role == "mcbr")
                        exit
                    </command-string>
                    <command-string>
                        #if($role == "mcbr")
                        master branch
                    </command-string>
                    <command-string>source-interface $source-interface</command-string>
                    <command-string>
                        #if($role == "hub-master" OR $role == "transit")
                        site-prefixes prefix-list $site-prefix-list
                        enterprise-prefix prefix-list $enterprise-prefix-list
                    </command-string>
                    <command-string>
                        #if($role == "mcbr" OR $role == "transit")
                        hub $hub-ip
                    </command-string>
                    <command-string>
                        #if($role == "border-router")
                        master $master-ip
                    </command-string>
                    <command-string>
                        #if($password != null)
                        password $password
                    </command-string>
                    <command-string>
                        #if($load-balance == "true")
                        load-balance
                    </command-string>
	        <command-string>
                        #if($advanced == "true")
                        advanced
                    </command-string>	        
                </device-operation>
                <device-operation>
                    <name>RemoveDMVPNDomain</name>
                    <type>DELETE</type>
                    <command-string>no domain $domain-name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:domain/mcbr</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>createDMVPNDomain</name>
                    <type>CREATE</type>
                    <command-string>domain $../domain-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL")
                        vrf $../vrf-name                        
                    </command-string>
                    <command-string>
                        #if($../role == "hub-master")
                        master hub
                        #else if($../role == "transit")
                        master transit $transid-id
                        #else
                        border
                    </command-string>
                    <command-string>
                        #if($../role == "mcbr")
                        source-interface $source-interface-border
                    </command-string>            
                    <command-string>
                        #if($password != null)
                        password $password
                    </command-string>                    	        
                </device-operation>                
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/domain-path</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateDmvpnTunnelDomain</name>
                    <type>CREATE</type>
                    <command-string>interface tunnel $../name</command-string>
                    <command-string>
                        #if($../type == "HUB" AND $domain-name != null)
                        domain $domain path $domain-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteDmvpnTunnelDomain</name>
                    <type>DELETE</type>
                    <command-string>interface tunnel $../name</command-string>
                    <command-string>
                        #if($../type == "HUB" AND $domain-name != null)
                        no domain $domain path $domain-name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/nhrp-qos-maps</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseDmvpnTunnelNhrpQosMap</name>
                    <type>PARSE</type>
                    <command-string>interface $../name</command-string>
                </device-operation>
                <device-operation>
                    <name>CreateDmvpnTunnelNhrpQosMap</name>
                    <type>CREATE</type>
                    <command-string>interface tunnel $../name</command-string>
                    <command-string>
                        #if ($../type == "HUB")
                        ip nhrp map group $name service-policy output $policy-map
                        #else
                        ip nhrp group $name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateDmvpnTunnelNhrpQosMap</name>
                    <type>UPDATE</type>
                    <command-string>interface tunnel $../name</command-string>
                    <command-string>
                        #if ($../type == "HUB")
                        ip nhrp map group $name service-policy output $policy-map
                        #else
                        ip nhrp group $name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteDmvpnTunnelNhrpQosMap</name>
                    <type>DELETE</type>
                    <command-string>interface tunnel $../name</command-string>
                    <command-string>
                        #if ($../type == "HUB")
                        no ip nhrp map group $name service-policy output $policy-map
                        #else
                        no ip nhrp group $name
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/dmvpn:dmvpntunnels/dmvpntunnel/nhrp-maps</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseDmvpnTunnelNhrpMap</name>
                    <type>PARSE</type>
                    <command-string>interface $../name</command-string>
                </device-operation>
                <device-operation>
                    <name>CreateDmvpnTunnelNhrpMap</name>
                    <type>CREATE</type>
                    <command-string>interface tunnel $../name</command-string>
                    <command-string>
                        #if($nhrp-type == "nhs")
                        ip nhrp nhs $sourceip
                    </command-string>
	        <command-string>
		#if($nhrp-type == "nhs")
		ip nhrp map $sourceip $destip
	        </command-string>
                    <command-string>
		#if($nhrp-type == "nhs")
		ip nhrp map multicast $destip
	        </command-string>
	        <command-string>
		#if($nhrp-type == "nhs-nbma")
		ip nhrp nhs $sourceip nbma $destip multicast
	        </command-string>
                </device-operation>
		<device-operation>
                    <name>DeleteDmvpnTunnelNhrpMap</name>
                    <type>DELETE</type>
                    <command-string>interface tunnel $../name</command-string>
                    <command-string>
                        #if($nhrp-type == "nhs")
                        no ip nhrp nhs $sourceip
                    </command-string>
	        <command-string>
		#if($nhrp-type == "nhs")
		no ip nhrp map $sourceip $destip
	        </command-string>
                    <command-string>
		#if($nhrp-type == "nhs")
		no ip nhrp map multicast $destip
	        </command-string>
	        <command-string>
		#if($nhrp-type == "nhs-nbma")
		no ip nhrp nhs $sourceip nbma $destip multicast
	        </command-string>
                </device-operation>
            </device-operations>
        </operation>        
        <operation>
            <target>/controller:devices/device/dmvpn:domain/monitor-interval-dscp</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateDomainMonitorIntervalDscpEntry</name>
                    <type>CREATE</type>
                    <command-string>domain $../domain-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL")
                        vrf $../vrf-name                        
                    </command-string>
                    <command-string>master hub</command-string>
                    <command-string>monitor-interval $interval dscp $dscp</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteDomainMonitorIntervalDscpEntry</name>
                    <type>DELETE</type>
                    <command-string>domain $../domain-name</command-string>
                    <command-string>
                        #if($../vrf-name != "GLOBAL")
                        vrf $../vrf-name                       
                    </command-string>
                    <command-string>master hub</command-string>
                    <command-string>no monitor-interval $interval dscp $dscp</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:logging</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateLogging</name>
                    <type>CREATE</type>
                    <command-string>[logging buffered $buffer-size]</command-string>
                    <command-string>
                        #if($no-logging-console == "true")
                        no logging console
                    </command-string>
                    <command-string>logging trap $logging-trap</command-string>
                    <command-string>logging facility $facility-name</command-string>
                    <command-string>logging source-interface $interface-name [vrf $context-name]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateLogging</name>
                    <type>UPDATE</type>
                    <command-string> </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLogging</name>
                    <type>DELETE</type>
                    <command-string>[no logging buffered $buffer-size]</command-string>
                    <command-string>
                        #if($no-logging-console == "true")
                        logging console
                    </command-string>
                    <command-string>no logging trap $logging-trap</command-string>
                    <command-string>no logging facility $facility-name</command-string>
                    <command-string>no logging source-interface $interface-name [vrf $context-name]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:logging/buffer-size</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateBufferSize</name>
                    <type>CREATE</type>
                    <command-string>[logging buffered $buffer-size]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateLogging</name>
                    <type>UPDATE</type>
                    <command-string>[logging buffered $buffer-size]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLogging</name>
                    <type>DELETE</type>
                    <command-string>[no logging buffered $buffer-size]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:logging/no-logging-console</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateNoLoggingConsole</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($no-logging-console == "true")
                        no logging console
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateNoLoggingConsole</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($no-logging-console == "true")
                        no logging console
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNoLoggingConsole</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($no-logging-console == "true")
                        logging console
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:logging/logging-trap</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateLoggingTrap</name>
                    <type>CREATE</type>
                    <command-string>logging trap $logging-trap</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateLoggingTrap</name>
                    <type>UPDATE</type>
                    <command-string>logging trap $logging-trap</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLoggingTrap</name>
                    <type>DELETE</type>
                    <command-string>no logging buffered $logging-trap</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:logging/facility-name</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateLoggingFacilityName</name>
                    <type>CREATE</type>
                    <command-string>logging facility $facility-name</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateLoggingFacilityName</name>
                    <type>UPDATE</type>
                    <command-string>logging facility $facility-name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLoggingFacilityName</name>
                    <type>DELETE</type>
                    <command-string>no logging facility $facility-name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:logging/interface-name</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateLoggingInterfaceName</name>
                    <type>CREATE</type>
                    <command-string>logging source-interface $interface-name [vrf $../context-name]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateLoggingInterfaceName</name>
                    <type>UPDATE</type>
                    <command-string>logging source-interface $interface-name [vrf $../context-name]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLoggingInterfaceName</name>
                    <type>DELETE</type>
                    <command-string>no logging source-interface $interface-name [vrf $../context-name]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:logging/logging-hosts</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseLoggingHosts</name>
                    <type>PARSE</type>
                    <command-string>logging $ip-address</command-string>
                </device-operation>
                <device-operation>
                    <name>CreateLoggingHosts</name>
                    <type>CREATE</type>
                    <!-- Below changes are due to Bug#:47328. For more information please see the Bug details!-->
                    <command-string> #if ($dont-generate-host != null)
                        logging $ip-address
                        #else
                        logging host $ip-address [vrf $../context-name]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLoggingHosts</name>
                    <type>DELETE</type>
                    <command-string>no logging host $ip-address [vrf $../context-name]</command-string>
                </device-operation>
            </device-operations>
        </operation>
      
        <operation>
            <target>/controller:devices/device/QOSClassToPolicyMap</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>AddQOSClassToPolicyMap</name>
                    <type>CREATE</type>
                    <command-string>policy-map $policyName</command-string>
                    <command-string>class $className</command-string>
                    <command-string>bandwidth percent $bandwidthPercent</command-string>
                </device-operation>
            </device-operations>
        </operation>
	<operation>
	    <target>/controller:devices/device/l3features:eem-script/eem-if-errors/interface</target>
	    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	    <device-operations>
		<device-operation>
		    <name>CreateEemIfErrors</name>
		    <type>CREATE</type>
		    <command-string>event manager applet receive_runts0</command-string>
		    <command-string>
		        #if($interface-name != null)
		        event tag $if-tag interface name $interface-name parameter receive_runts entry-op ge entry-val 10 entry-type increment poll-interval 600
		    </command-string>
		    <command-string>trigger</command-string>
		    <command-string>correlate $correlate</command-string>
		    <command-string>
		        action 1 snmp-trap strdata "INTERFACE ERRORS Receive_runts on interface $variable1 : Increment is : $variable2 during the last 10 minutes and the total nb of receive_runts is : $variable3"
		    </command-string>
		    <command-string>
		        action 2 syslog msg "INTERFACE ERRORS Receive_runts on interface $variable1 : Increment is : $variable2 during the last 10 minutes and the total nb of receive_runts is : $variable3"
		    </command-string>
		    <command-string>event manager applet input_errors_crc0</command-string>
		    <command-string>
		        #if($interface-name != null)
		        event tag $if-tag interface name $interface-name parameter input_errors_crc entry-op ge entry-val 10 entry-type increment poll-interval 600
		    </command-string>
		   <command-string>
                 #if($correlate != null)
                trigger
                correlate $correlate
            </command-string>
		    <command-string>
		        action 1 snmp-trap strdata "INTERFACE ERRORS CRC errors on interface $variable1 : Increment is : $variable2 during the last 10 minutes and the total nb of CRC errors is : $variable3"
		    </command-string>
		    <command-string>
		        action 2 syslog msg "INTERFACE ERRORS CRC errors on interface $variable1 : Increment is : $variable2 during the last 10 minutes and the total nb of CRC errors is : $variable3"
		    </command-string>
		</device-operation>
		<device-operation>
		    <name>DeleteEemIfErrors</name>
		    <type>DELETE</type>
		    <command-string>no event manager applet receive_runts0</command-string>
		    <command-string>no event manager applet input_errors_crc0</command-string>
		</device-operation>
	    </device-operations>
	</operation>
	<operation>
	    <target>/controller:devices/device/l3features:eem-script/eem-bgp-adj</target>
	    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	    <device-operations>
		<device-operation>
		    <name>CreateEemBGPAdj</name>
		    <type>CREATE</type>
		    <command-string>
		        #if($enable-bgp-adj-eem == "true")
		        event manager applet BGP1
		    </command-string>
		    <command-string>event syslog pattern "%BGP-5-ADJCHANGE"</command-string>
		    <command-string>action 100 regexp "neighbor (.*)" "$variable1" match id</command-string>
		    <command-string>action 101 if $variable2 eq "1"</command-string>
		    <command-string>action 300  wait 5</command-string>
		    <command-string>action 500  snmp-trap strdata "BGP Trap : Neighbor $variable3"</command-string>
		    <command-string>action 510  syslog msg "EEM Script : BGP State of $variable3 changed. Trap sent !"</command-string>
		    <command-string>action 999 end</command-string>
		</device-operation>
		<device-operation>
		    <name>DeleteEemBGPAdj</name>
		    <type>DELETE</type>
		    <command-string>no event manager applet BGP1</command-string>
		</device-operation>
	    </device-operations>
	</operation>
	<operation>
	    <target>/controller:devices/device/l3features:eem-script/eem-eigrp-adj</target>
	    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	    <device-operations>
		<device-operation>
		    <name>CreateEemEIGRPAdj</name>
		    <type>CREATE</type>
		    <command-string>
		        #if($enable-eigrp-adj-eem == "true")
		        event manager applet EIGRP1
		    </command-string>
		    <command-string>event syslog pattern "%DUAL-5-NBRCHANGE"</command-string>
		    <command-string>action 100 regexp "Neighbor (.*)" "$variable1" match id</command-string>
		    <command-string>action 101 if $variable2 eq "1"</command-string>
		    <command-string>action 300  wait 5</command-string>
		    <command-string>action 500  snmp-trap strdata "EIGRP Trap : Neighbor $variable3"</command-string>
		    <command-string>action 510  syslog msg "EEM Script : EIGRP State of $variable3 changed. Trap sent !"</command-string>
		    <command-string>action 999 end</command-string>
		</device-operation>
		<device-operation>
		    <name>DeleteEemEIGRPAdj</name>
		    <type>DELETE</type>
		    <command-string>no event manager applet EIGRP1</command-string>
		</device-operation>
	    </device-operations>
	</operation>
	<operation>
	    <target>/controller:devices/device/l3features:eem-script/eem-ospf-adj</target>
	    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	    <device-operations>
		<device-operation>
		    <name>CreateEemOSPFAdj</name>
		    <type>CREATE</type>
		    <command-string>
		        #if($enable-ospf-adj-eem == "true")
		        event manager applet OSPF1
		    </command-string>
		    <command-string>event syslog pattern "%OSPF-5-ADJCHG"</command-string>
		    <command-string>action 100 regexp "Nbr (.*)" "$variable1" match id</command-string>
		    <command-string>action 101 if $variable2 eq "1"</command-string>
		    <command-string>action 300  wait 5</command-string>
		    <command-string>action 500  snmp-trap strdata "OSPF Trap : Neighbor $variable3"</command-string>
		    <command-string>action 510  syslog msg "EEM Script : OSPF State of $variable3 changed. Trap sent !"</command-string>
		    <command-string>action 999 end</command-string>
		</device-operation>
		<device-operation>
		    <name>DeleteEemOSPFAdj</name>
		    <type>DELETE</type>
		    <command-string>no event manager applet OSPF1</command-string>
		</device-operation>
	    </device-operations>
	</operation>
	<operation>
	    <target>/controller:devices/device/l3features:eem-script/eem-cpu-threshold</target>
	    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	    <device-operations>
		<device-operation>
		    <name>CreateEemCPUThreshold</name>
		    <type>CREATE</type>
		    <command-string>
		        #if($rising-threshold != null AND $rising-threshold-interval != null AND $falling-threshold != null AND $falling-threshold-interval != null)
		        process cpu threshold type total rising $rising-threshold interval $rising-threshold-interval falling $falling-threshold interval $falling-threshold-interval
		    </command-string>
		    <command-string>event manager applet high_cpu1</command-string>
		    <command-string>event syslog pattern "%SYS-1-CPURISINGTHRESHOLD"</command-string>
		    <command-string>action 100 regexp "Threshold: (.*)" "variable1" match id</command-string>
		    <command-string>action 101 if $variable2 eq "1"</command-string>
		    <command-string>action 300  wait 5</command-string>
		    <command-string>action 500  snmp-trap strdata "High CPU Trap : $variable3"</command-string>
		    <command-string>action 510  syslog msg "EEM Script : $variable3 seen. Trap sent !"</command-string>
		    <command-string>action 999 end</command-string>
		</device-operation>
		<device-operation>
		    <name>DeleteEemCPUThreshold</name>
		    <type>DELETE</type>
		    <command-string>no process cpu threshold type total</command-string>
		    <command-string>no event manager applet high_cpu1</command-string>
		</device-operation>
	    </device-operations>
	</operation>
	<operation>
	    <target>/controller:devices/device/l3features:eem-script/eem-mem-threshold</target>
	    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	    <device-operations>
		<device-operation>
		    <name>CreateEemMEMThreshold</name>
		    <type>CREATE</type>
		    <command-string>
		        #if($enable-mem-threshold-eem == "true")
		        event manager applet low_memory1
		    </command-string>
		    <command-string>event snmp oid 1.3.6.1.4.1.9.9.48.1.1.1.6.1 get-type exact entry-op lt entry-val "100000000" poll-interval 10</command-string>
		    <command-string>action 300  wait 5</command-string>
		    <command-string>action 500  snmp-trap strdata "Low Memory Trap : Current available memory is $variable2 bytes"</command-string>
		    <command-string>action 510  syslog msg "EEM Script : Low Memory : Current available memory is $variable2 bytes. Trap sent !"</command-string>
		</device-operation>
		<device-operation>
		    <name>DeleteEemMEMThreshold</name>
		    <type>DELETE</type>
		    <command-string>no event manager applet low_memory1</command-string>
		</device-operation>
	    </device-operations>
	</operation>


    <operation>
        <target>/controller:devices/device/l3features:eem-applets/event-manager-applet</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateEventManagerApplet</name>
                <type>CREATE</type>
                <command-string>event manager applet $applet-name</command-string>
                <command-string>
                    #if($description != null)
                    description $description 
		    #else
		    description $applet-name
                </command-string>
            </device-operation>
            <device-operation>
                <name>DeleteEventManagerApplet</name>
                <type>DELETE</type>
                <command-string>no event manager applet $applet-name</command-string>
                
            </device-operation>
        </device-operations>
    </operation>
        <operation>
            <target>/controller:devices/device/l3features:eem-applets/event-manager-applet/trigger</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateEventManagerAppletTrigger</name>
                    <type>CREATE</type>
                    <command-string>event manager applet $../applet-name</command-string>
                    <command-string>trigger delay $delay-time</command-string>
                    <command-string>trigger occurs $occurrences-no</command-string>
                    <command-string>trigger period $period</command-string>
                    <command-string>trigger period-start $period-start</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateEventManagerAppletTrigger</name>
                    <type>UPDATE</type>
                    <command-string>event manager applet $../applet-name</command-string>
                    <command-string>trigger delay $delay-time</command-string>
                    <command-string>trigger occurs $occurrences-no</command-string>
                    <command-string>trigger period $period</command-string>
                    <command-string>trigger period-start $period-start</command-string>
                </device-operation>
                <!--device-operation>
                    <name>DeleteEventManagerAppletTrigger</name>
                    <type>DELETE</type>
                    <command-string>event manager applet $../applet-name</command-string>
                    <command-string>no trigger</command-string>
                </device-operation-->
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:eem-applets/event-manager-applet/trigger/correlate</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateEventManagerAppletCorrelate</name>
                    <type>CREATE</type>
                    <command-string>event manager applet $../../applet-name</command-string>
                    <command-string>trigger delay $../delay-time</command-string>
                    <command-string>correlate event $event1 $logic event $event2</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateEventManagerAppletCorrelate</name>
                    <type>UPDATE</type>
                    <command-string>event manager applet $../../applet-name</command-string>
                    <command-string>trigger delay $../delay-time</command-string>
                    <command-string>correlate event $event1 $logic event $event2</command-string>
                </device-operation>
                <!--device-operation>
                    <name>DeleteEventManagerAppletCorrelate</name>
                    <type>DELETE</type>
                    <command-string>event manager applet $../../applet-name</command-string>
                    <command-string>trigger delay $../delay-time</command-string>
                    <command-string>no correlate</command-string>
                </device-operation-->
            </device-operations>
        </operation>
    <operation>
        <target>/controller:devices/device/l3features:eem-applets/event-manager-applet/events/track</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateEventsTrack</name>
                <type>CREATE</type>
                <command-string>event manager applet $../../applet-name authorization bypass</command-string>
                <command-string>
                    event track $track-number [state $state]
                </command-string>
            </device-operation>
        </device-operations>
    </operation>
    <operation>
        <target>/controller:devices/device/l3features:eem-applets/event-manager-applet/events/timer</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateEventsTimer</name>
                <type>CREATE</type>
                <command-string>event manager applet $../../applet-name authorization bypass</command-string>
                <command-string>
                   event timer $timer-type time $timer
                </command-string>
            </device-operation>
        </device-operations>
    </operation>
    <operation>
        <target>/controller:devices/device/l3features:eem-applets/event-manager-applet/events</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateEventsNone</name>
                <type>CREATE</type>
                <command-string>
                     #if($none == "true")
                    event manager applet $../applet-name authorization bypass
                </command-string>
                <command-string>
                    #if($none == "true")
                    event none
                </command-string>
            </device-operation>
        </device-operations>
    </operation>
    <operation>
        <target>/controller:devices/device/l3features:eem-applets/event-manager-applet/events/tag</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateEvents</name>
                <type>CREATE</type>
                <command-string>event manager applet $../../applet-name</command-string>
                <command-string>
                    event interface name $interface-name parameter $parameter entry-op $entry-compare entry-val $entry-counter-val entry-val-is-incremen true value poll-interval $poll-interval
                </command-string>
            </device-operation>
            <!--device-operation>
                <name>DeleteEvents</name>
                <type>DELETE</type>
                <command-string>event manager applet $../../applet-name</command-string>
                <command-string>
                    no event interface name $interface-name parameter $parameter entry-op $entry-compare entry-val $entry-counter-val entry-val-is-incremen true value poll-interval $poll-interval
                </command-string>
            </device-operation-->
        </device-operations>
    </operation>

    <operation>
        <target>/controller:devices/device/l3features:eem-applets/event-manager-applet/actions/action</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>ParseActions</name>
                <type>PARSE_TEMPLATE</type>
                <command-string>event manager applet $../../applet-name</command-string>
                <command-string>
                    #if($action-statement == "cli")
                        action $label cli $cli-type $cli-string
                    #else if($action-statement == "regexp")
                        action $label regexp $regex-pattern $input-string [$match-varaible] [$submatch-variable]
                    #else if($action-statement == "syslog" and $syslog == "priority")
                        action $label syslog priority $syslog-priority [msg $syslog-msg]
                    #else if($action-statement == "syslog" and $syslog == "msg")
                        action $label syslog msg $syslog-msg [priority $syslog-priority]
                    #else if($action-statement == "if")
                        action $label if $first-operand $compare $second-operand
                    #else if($action-statement == "exit")
                        action $label exit $exit-result
                    #else if($action-statement == "comment")
                        action $label comment $comment-string
                    #else if($action-statement == "handle-error")
                        action $label handle-error type $handle-error-type
                    #else if($action-statement == "else")
                        action $label else
                    #else if($action-statement == "end")
                        action $label end
                    #else if($action-statement == "wait")
                        action $label wait $wait-time
                    #else if($action-statement == "snmp-trap")
                        action $label snmp-trap $snmp-trap-type $snmp-trap-data
                </command-string>
            </device-operation>
            <device-operation>
                <name>CreateActions</name>
                <type>CREATE</type>
                <command-string>event manager applet $../../applet-name</command-string>
                <command-string>
                    #if($action-statement == "cli")
                        action $label cli $cli-type "$cli-string"
                    #else if($action-statement == "regexp")
                        action $label regexp "$regex-pattern" "$input-string" [$match-varaible] [$submatch-variable]
                    #else if($action-statement == "syslog" and $syslog == "priority")
                        action $label syslog priority $syslog-priority [msg "$syslog-msg"]
                    #else if($action-statement == "syslog" and $syslog == "msg")
                        action $label syslog msg "$syslog-msg" [priority $syslog-priority]
                    #else if($action-statement == "if") 
                        action $label if $first-operand $compare "$second-operand"
                    #else if($action-statement == "exit")
                        action $label exit $exit-result
                    #else if($action-statement == "comment")
                        action $label comment "$comment-string"
                    #else if($action-statement == "handle-error")
                        action $label handle-error type $handle-error-type
                    #else if($action-statement == "else")
                        action $label else
                    #else if($action-statement == "end")
                        action $label end
                    #else if($action-statement == "wait")
                        action $label wait $wait-time
                    #else if($action-statement == "snmp-trap")
                        action $label snmp-trap $snmp-trap-type "$snmp-trap-data"
                </command-string>
            </device-operation>
            <!--device-operation>
                <name>DeleteActions</name>
                <type>DELETE</type>
                <command-string>event manager applet $../../applet-name</command-string>
                <command-string>
                    no action $label
                </command-string>
            </device-operation-->
        </device-operations>
    </operation>
    <operation>
        <target>/controller:devices/device/l3features:eem-applets/event-manager-applet/actions/action/label</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
                <device-operation>
                <name>ParseActions</name>
                <type>PARSE_TEMPLATE</type>
                <command-string>event manager applet $../../applet-name authorization bypass</command-string>
                <command-string>
                    #if($action-statement == "cli")
                        action $label cli $cli-type $cli-string
                    #else if($action-statement == "regexp")
                        action $label regexp $regex-pattern $input-string [$match-varaible] [$submatch-variable]
                    #else if($action-statement == "syslog" and $syslog == "priority")
                        action $label syslog priority $syslog-priority [msg $syslog-msg]
                    #else if($action-statement == "syslog" and $syslog == "msg")
                        action $label syslog msg $syslog-msg [priority $syslog-priority]
                    #else if($action-statement == "if") 
                        action $label if $first-operand $compare $second-operand
                    #else if($action-statement == "exit")
                        action $label exit $exit-result
                    #else if($action-statement == "comment")
                        action $label comment $comment-string
                    #else if($action-statement == "handle-error")
                        action $label handle-error type $handle-error-type
                    #else if($action-statement == "else")
                        action $label else
                    #else if($action-statement == "end")
                        action $label end
                    #else if($action-statement == "wait")
                        action $label wait $wait-time
                    #else if($action-statement == "snmp-trap")
                        action $label snmp-trap $snmp-trap-type $snmp-trap-data
                </command-string>
            </device-operation>
        </device-operations>
    </operation>
	<operation>
	<target>/controller:devices/device/l3features:netflow/flow-exports/flow-export</target>
	    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	    <device-operations>
		<device-operation>
		    <name>CreateNETFLOWFlowExport</name>
		    <type>CREATE</type>
		    <command-string>
		        #if($name != null)
		        flow exporter $name
		    </command-string>
		    <command-string>
		        #if($description != null)
		        description $description
		    </command-string>
		    <command-string>
		        #if($destination != null AND $vrf == null)
		        destination $destination
		    </command-string>
		    <command-string>
		        #if($destination != null AND $vrf != null)
		        destination $destination vrf $vrf
		    </command-string>
		    <command-string>
		        source $source
		    </command-string>
		    <command-string>transport udp $udp-port-value</command-string>
		    <command-string>template data timeout $template-timeout</command-string>
		    <command-string>option interface-table</command-string>
		    <command-string>option application-table</command-string>
		</device-operation>
        <device-operation>
            <name>UpdateNETFLOWFlowExport</name>
            <type>UPDATE</type>
            <command-string>
                flow exporter $name
            </command-string>
            <command-string>
                #if($description != null)
                description $description
            </command-string>
            <command-string>
                #if($destination != null AND $vrf == null)
                destination $destination
            </command-string>
            <command-string>
                #if($destination != null AND $vrf != null)
                destination $destination vrf $vrf
            </command-string>
                    <command-string>
                        #if($source != null)
                        source $source
                    </command-string>
                    <command-string>
                        #if($udp-port-value != null)
                        transport udp $udp-port-value
                    </command-string>
                    <command-string>
                        #if($template-timeout != null)
                        template data timeout $template-timeout
                    </command-string>
        </device-operation>
		<device-operation>
		    <name>DeleteNETFLOWFlowExport</name>
		    <type>DELETE</type>
                    <command-string>
                        #if($name != null)
                          no flow exporter $name
                    </command-string>
		</device-operation>
	    </device-operations>
	</operation>

        <operation>
        <target>/controller:devices/device/l3features:netflow/flow-exports</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateLegacyNETFLOWFlow</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($source != null AND $legacy-netflow == "true")
                        ip flow-export source $source
                    </command-string>
                    <command-string>
                        #if($legacy-netflow == "true" AND $version != null)
                        ip flow-export version $version
                    </command-string>
                    <command-string>
                        #if($legacy-netflow == "true" AND $interface-names == "true")
                        ip flow-export interface-names
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateLegacyNETFLOWFlow</name>
                    <type>UPDATE</type>
                    <command-string> </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLegacyNETFLOWFlow</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($source != null AND $legacy-netflow == "true")
                        no ip flow-export source $source
                    </command-string>
                    <command-string>
                        #if($legacy-netflow == "true" AND $version != null)
                        no ip flow-export version $version
                    </command-string>
                    <command-string>
                        #if($legacy-netflow == "true" AND $interface-names == "true")
                        no ip flow-export interface-names
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
        <target>/controller:devices/device/l3features:netflow/flow-exports/source</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateLegacyNETFLOWFlowSource</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($source != null AND $../legacy-netflow == "true")
                        ip flow-export source $source
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateLegacyNETFLOWFlowSource</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($source != null AND $../legacy-netflow == "true")
                        ip flow-export source $source
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLegacyNETFLOWFlowSource</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($source != null AND $../legacy-netflow == "true")
                        no ip flow-export source $source
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>


        <operation>
        <target>/controller:devices/device/l3features:netflow/flow-exports/version</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateLegacyNETFLOWFlowVersion</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($version != null AND $../legacy-netflow == "true")
                        ip flow-export version $version
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateLegacyNETFLOWFlowVersion</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($version != null AND $../legacy-netflow == "true")
                        ip flow-export version $version
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLegacyNETFLOWFlowVersion</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($version != null AND $../legacy-netflow == "true")
                        no ip flow-export version $version
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
        <target>/controller:devices/device/l3features:netflow/flow-exports/interface-names</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateLegacyNETFLOWFlowInterfaceNames</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../legacy-netflow == "true" AND $interface-names == "true")
                        ip flow-export interface-names
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateLegacyNETFLOWFlowInterfaceNames</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../legacy-netflow == "true" AND $interface-names == "true")
                        ip flow-export interface-names
                        #if($../legacy-netflow == "true" AND $interface-names == "false")
                        no ip flow-export interface-names
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteLegacyNETFLOWFlowInterfaceNames</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../legacy-netflow == "true" AND $interface-names == "true")
                        no ip flow-export interface-names
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
         <operation>
        <target>/controller:devices/device/l3features:ip-explicit-path/explicit-path</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateIpExplicitPath</name>
                <type>CREATE</type>
                <command-string>
                    #if($name != null AND $path-status != null)
                    ip explicit-path name $name $path-status
                </command-string>
            </device-operation>
            <device-operation>
                <name>UpdateIpExplicitPath</name>
                <type>UPDATE</type>
                <command-string>
                    #if($name != null AND $path-status != null)
                    ip explicit-path name $name $path-status
                </command-string>
            </device-operation>
            <device-operation>
                <name>DeleteIpExplicitPath</name>
                <type>DELETE</type>
                <command-string>
                    #if($name != null AND $path-status != null)
                    no ip explicit-path name $name $path-status
                </command-string>
            </device-operation>
        </device-operations>
    </operation>
    <operation>
        <target>/controller:devices/device/l3features:ip-explicit-path/explicit-path/path-ip-address</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>ParseIpExplicitPathIp</name>
                <type>PARSE_TEMPLATE</type>
                <command-string>
                    #if ($index != null and $target-status == null)
                    index $index next-address $path-ip
                    #else if ($target-status != null and $index == null)
                    next-address $target-status $path-ip
                    #else if ($target-status == null and $index == null)
                    next-address $path-ip
                    #else
                    index $index next-address $target-status $path-ip
                </command-string>
            </device-operation>
            <device-operation>
                <name>CreateIpExplicitPathIp</name>
                <type>CREATE</type>
        <command-string>ip explicit-path name $../name $../path-status</command-string>
                <command-string>
                    #if($path-ip != null)
                    [index $index] next-address [$target-status] $path-ip
                </command-string>
            </device-operation>
            <device-operation>
                <name>UpdateIpExplicitPathIp</name>
                <type>UPDATE</type>
                <command-string>ip explicit-path name $../name $../path-status</command-string>
            </device-operation>
            <device-operation>
                <name>DeleteIpExplicitPathIp</name>
                <type>DELETE</type>
        <command-string>
            #if($index != null)
            ip explicit-path name $../name $../path-status
        </command-string>
                <command-string>
                    #if($index != null)
                    no index $index
                </command-string>
            </device-operation>
        </device-operations>
    </operation>
    <operation>
        <target>/controller:devices/device/l3features:ip-explicit-path/explicit-path/path-ip-address/path-ip</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateIpExplicitPathIpAddress</name>
                <type>CREATE</type>
                <command-string>
                    #if($path-ip != null)
                    [index $../index] next-address [$../target-status] $path-ip
                </command-string>
            </device-operation>
            <device-operation>
                <name>UpdateIpExplicitPathIpAddress</name>
                <type>UPDATE</type>
                <command-string>
                    #if($path-ip != null)
                    [index $../index] next-address [$../target-status] $path-ip
                </command-string>
            </device-operation>
            <device-operation>
                <name>DeleteIpExplicitPathIpAddress</name>
                <type>DELETE</type>
                <command-string>
                    #if($../index != null)
                    no index $../index
                </command-string>
            </device-operation>
        </device-operations>
    </operation>



    <operation>
        <target>/controller:devices/device/l3features:ip-explicit-path/explicit-path/target-status</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateIpExplicitPathIpTagetStatus</name>
                <type>CREATE</type>
                <command-string>
                    #if($path-ip != null)
                    [index $../index] next-address [$target-status] $../path-ip
                </command-string>
            </device-operation>
            <device-operation>
                <name>UpdateIpExplicitPathIpTagetStatus</name>
                <type>UPDATE</type>
                <command-string>
                    #if($path-ip != null)
                    [index $../index] next-address [$target-status] $../path-ip
                </command-string>
            </device-operation>
            <device-operation>
                <name>DeleteIpExplicitPathIpTagetStatus</name>
                <type>DELETE</type>
                <command-string>
                    #if($../index != null)
                    no index $../index
                </command-string>
            </device-operation>
        </device-operations>
    </operation>


    <operation>
        <target>/controller:devices/device/l3features:netflow/flow-exports/flow-export/options</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateNETFLOWOption</name>
                <type>CREATE</type>
                <command-string>flow exporter $../name</command-string>
                <command-string>option $option</command-string>
            </device-operation>
            <device-operation>
                <name>DeleteNETFLOWOption</name>
                <type>DELETE</type>
                <command-string>flow exporter $../name</command-string>
                <command-string>no option $option</command-string>
            </device-operation>
        </device-operations>
    </operation>

	<operation>
	    <target>/controller:devices/device/l3features:netflow/flow-records/flow-record</target>
	    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	    <device-operations>
		<device-operation>
		    <name>CreateNETFLOWFlowRecord</name>
		    <type>CREATE</type>
		    <command-string>
		        #if($record-type != null AND $name !=null)
		        flow record type $record-type $name
			#else if($name != null)
		        flow record $name
		    </command-string>
		    <command-string>
		        #if($description != null)
		        description $description
		    </command-string>
		    <command-string>match ipv4 tos</command-string>
		    <command-string>match ipv4 protocol</command-string>
		    <command-string>match ipv4 source address</command-string>
		    <command-string>match ipv4 destination address</command-string>
		    <command-string>match transport source-port</command-string>
		    <command-string>match transport destination-port</command-string>
		    <command-string>match interface input</command-string>
		    <command-string>match flow direction</command-string>
		    <command-string>match application name</command-string>
             <command-string>collect routing next-hop address ipv4</command-string>
		</device-operation>
		<device-operation>
		    <name>DeleteNETFLOWFlowRecord</name>
		    <type>DELETE</type>
		    <command-string>no flow record [type $record-type] $name</command-string>
		</device-operation>
	    </device-operations>
	</operation>

      <operation>
        <target>/controller:devices/device/l3features:netflow/flow-records/flow-record/collect/ipv4/ipv4-options</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateRecordIpv4options</name>
                <type>CREATE</type>
		    <command-string>
			#if($../../../record-type !=null)
		        flow record type $../../../record-type $../../../name
			#else
		        flow record $../../../name
		    </command-string>
                    <command-string>
		        #if($ipv4-option == "ip" OR $ipv4-option == "dscp" OR $ipv4-option == "id")
                        collect ipv4 $ipv4-option
		    </command-string>
                    <command-string>
		        #if($ipv4-option == "source" OR $ipv4-option == "destination")
                        collect ipv4 $ipv4-option $option
		    </command-string>
            </device-operation>
            <device-operation>
                <name>DeleteRecordIpv4options</name>
                <type>DELETE</type>
		    <command-string>
		        flow record [type $../../../record-type] $../../../name
		    </command-string>
                    <command-string>
		        #if($ipv4-option == "ip" OR $ipv4-option == "dscp")
                        no collect ipv4 $ipv4-option
		    </command-string>
                    <command-string>
		        #if($ipv4-option == "source" OR $ipv4-option == "destination")
                        no collect ipv4 $ipv4-option $option
		    </command-string>
            </device-operation>
        </device-operations>
     </operation>

      <operation>
        <target>/controller:devices/device/l3features:netflow/flow-records/flow-record/collect/interface/interface-options</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateRecordInterfaceoptions</name>
                <type>CREATE</type>
		    <command-string>
			#if($../../../record-type !=null)
		        flow record type $../../../record-type $../../../name
			#else
		        flow record $../../../name
		    </command-string>
                    <command-string>collect interface $interface-option</command-string>
            </device-operation>
            <device-operation>
                <name>DeleteRecordInterfaceoptions</name>
                <type>DELETE</type>
		    <command-string>
		        flow record [type $../../../record-type] $../../../name
		    </command-string>
                    <command-string>no collect interface $interface-option</command-string>
            </device-operation>
        </device-operations>
     </operation>

      <operation>
        <target>/controller:devices/device/l3features:netflow/flow-records/flow-record/collect/application/application-options</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateRecordApplicationoptions</name>
                <type>CREATE</type>
		    <command-string>
			#if($../../../record-type !=null)
		        flow record type $../../../record-type $../../../name
			#else
		        flow record $../../../name
		    </command-string>
                    <command-string>collect application $application-option</command-string>
            </device-operation>
            <device-operation>
                <name>DeleteRecordApplicationoptions</name>
                <type>DELETE</type>
		    <command-string>
		        flow record [type $../../../record-type] $../../../name
		    </command-string>
                    <command-string>no collect application $application-option</command-string>
            </device-operation>
        </device-operations>
     </operation>

      <operation>
        <target>/controller:devices/device/l3features:netflow/flow-records/flow-record/collect/counter/counter-options</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateRecordCounteroptions</name>
                <type>CREATE</type>
		    <command-string>
			#if($../../../record-type !=null)
		        flow record type $../../../record-type $../../../name
			#else
		        flow record $../../../name
		    </command-string>
                    <command-string>collect counter $counter-option</command-string>
            </device-operation>
            <device-operation>
                <name>DeleteRecordCounteroptions</name>
                <type>DELETE</type>
		    <command-string>
		        flow record [type $../../../record-type] $../../../name
		    </command-string>
                    <command-string>no collect counter $counter-option</command-string>
            </device-operation>
        </device-operations>
     </operation>

      <operation>
        <target>/controller:devices/device/l3features:netflow/flow-records/flow-record/collect/art/art-options</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateRecordArtoptions</name>
                <type>CREATE</type>
		    <command-string>
			#if($../../../record-type !=null)
		        flow record type $../../../record-type $../../../name
			#else
		        flow record $../../../name
		    </command-string>
                    <command-string>
		        #if($art-option == "all")
                        collect art $art-option
		    </command-string>
                    <command-string>
		        #if($art-option == "packets" OR $art-option == "bytes")
                        collect art server $art-option
		    </command-string>
            </device-operation>
            <device-operation>
                <name>DeleteRecordArtoptions</name>
                <type>DELETE</type>
		    <command-string>
		        flow record [type $../../../record-type] $../../../name
		    </command-string>
                    <command-string>
		        #if($art-option == "all")
                        no collect art $art-option
		    </command-string>
                    <command-string>
		        #if($art-option == "packets" OR $art-option == "bytes")
                        no collect art server $art-option
		    </command-string>
            </device-operation>
        </device-operations>
     </operation>


      <operation>
        <target>/controller:devices/device/l3features:netflow/flow-records/flow-record/collect/transport/transport-options</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateRecordTransportoptions</name>
                <type>CREATE</type>
		    <command-string>
			#if($../../../record-type !=null)
		        flow record type $../../../record-type $../../../name
			#else
		        flow record $../../../name
		    </command-string>
                    <command-string>
		        #if($transport-option == "tcp")
                        collect transport $transport-option $tcp-options
		    </command-string>
            </device-operation>
            <device-operation>
                <name>DeleteRecordTransportoptions</name>
                <type>DELETE</type>
		    <command-string>
		        flow record [type $../../../record-type] $../../../name
		    </command-string>
                    <command-string>
		        #if($transport-option == "tcp")
                        no collect transport $transport-option $tcp-options
		    </command-string>
            </device-operation>
        </device-operations>
     </operation>

      <operation>
        <target>/controller:devices/device/l3features:netflow/flow-records/flow-record/collect/timestamp/timestamp-options</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateRecordTimeStampoptions</name>
                <type>CREATE</type>
		    <command-string>
			#if($../../../record-type !=null)
		        flow record type $../../../record-type $../../../name
			#else
		        flow record $../../../name
		    </command-string>
                    <command-string>collect timestamp $timestamp-option $timestamps-time</command-string>
            </device-operation>
            <device-operation>
                <name>DeleteRecordTimeStampsoptions</name>
                <type>DELETE</type>
		    <command-string>
		        flow record [type $../../../record-type] $../../../name
		    </command-string>
                    <command-string>no collect timestamp $timestamp-option $timestamps-time</command-string>
            </device-operation>
        </device-operations>
     </operation>

	<operation>
	    <target>/controller:devices/device/l3features:netflow/flow-monitors/flow-monitor</target>
	    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	    <device-operations>
		<device-operation>
		    <name>CreateNETFLOWFlowMonitor</name>
		    <type>CREATE</type>
		    <command-string>
		        #if($record-type != null)
		        flow monitor type $record-type $name
			#else
		        flow monitor $name
		    </command-string>
		    <command-string>
		        #if($description != null)
		        description $description
		    </command-string>
		    <command-string>cache timeout active 60</command-string>
		    <command-string>cache entries 200000</command-string>
		    <command-string>
		        #if($record != null)
		        record $record
		    </command-string>
		    <command-string>
		        exporter $exporter
		    </command-string>
		</device-operation>
		<device-operation>
		    <name>DeleteNETFLOWFlowMonitor</name>
		    <type>DELETE</type>
		    <command-string>
		        no flow monitor [type $record-type] $name
		    </command-string>
		</device-operation>
	    </device-operations>
	</operation>
	<operation>
	    <target>/controller:devices/device/l3features:netflow/flow-monitors/flow-monitor/exporters/exporter</target>
	    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	    <device-operations>
		<device-operation>
		    <name>CreateNETFLOWFlowMonitorExporter</name>
		    <type>CREATE</type>
		    <command-string>
		        #if($../../record-type != null)
		        flow monitor type $../../record-type $../../name
			#else
		        flow monitor $../../name
		    </command-string>
		    <command-string>exporter $exporter</command-string>
		</device-operation>
		<device-operation>
		    <name>DeleteNETFLOWFlowMonitorExporter</name>
		    <type>DELETE</type>
		     <command-string>flow monitor [type $../../record-type] $../../name</command-string>
            <command-string>no exporter $exporter</command-string>
		</device-operation>
	    </device-operations>
	</operation>
	<operation>
	    <target>/controller:devices/device/l3features:netflow/flow-monitors/flow-monitor/interfaces/interface</target>
	    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	    <device-operations>
		<device-operation>
		    <name>CreateNETFLOWFlowMonitorInterface</name>
		    <type>CREATE</type>
		    <command-string>interface $interface</command-string>
		    <command-string>ip flow monitor $../../name input</command-string>
		    <command-string>ip flow monitor $../../name output </command-string>
		</device-operation>
		<device-operation>
		    <name>DeleteNETFLOWFlowMonitorInterface</name>
		    <type>DELETE</type>
		    <command-string>interface $interface</command-string>
		    <command-string>no ip flow monitor $../../name input</command-string>
		    <command-string>no ip flow monitor $../../name output </command-string>
		</device-operation>
	    </device-operations>
	</operation>

	<operation>
	    <target>/controller:devices/device/l3features:netflow/flow-monitors/flow-monitor/cache/timeout</target>
	    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	    <device-operations>
		<device-operation>
		    <name>CreateNETFLOWFlowMonitorCachetimeout</name>
		    <type>CREATE</type>
		    <command-string>
		        #if($../../record-type != null)
		        flow monitor type $../../record-type $../../name
			#else
		        flow monitor $../../name
		    </command-string>
		    <command-string>cache timeout $timeout-type $timeout-value</command-string>
		</device-operation>
		<device-operation>
		    <name>DeleteNETFLOWFlowMonitorCachetimeout</name>
		    <type>DELETE</type>
		    <command-string>flow monitor [type $../../record-type] $../../name</command-string>
		    <command-string>no cache timeout $timeout-type $timeout-value</command-string>
		</device-operation>
	    </device-operations>
	</operation>

	<operation>
	    <target>/controller:devices/device/l3features:netflow/flow-monitors/flow-monitor/cache/entries</target>
	    <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
	    <device-operations>
		<device-operation>
		    <name>CreateNETFLOWFlowMonitorCachetimeout</name>
		    <type>CREATE</type>
		    <command-string>
		        #if($../../record-type != null)
		        flow monitor type $../../record-type $../../name
			#else
		        flow monitor $../../name
		    </command-string>
		    <command-string>cache entries $entry-number</command-string>
		</device-operation>
		<device-operation>
		    <name>DeleteNETFLOWFlowMonitorCachetimeout</name>
		    <type>DELETE</type>
		    <command-string>flow monitor [type $../../record-type] $../../name</command-string>
		    <command-string>no cache entries $entry-number</command-string>
		</device-operation>
	    </device-operations>
	</operation>

    <operation>
        <target>/controller:devices/device/l3features:legacy-netflow</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateLegacyNETFLOW</name>
                <type>CREATE</type>
                <command-string>
                    ip flow-export source $source
                </command-string>
                <command-string>
                    ip flow-export version $version
                </command-string>
                <command-string>
                    #if($interface-names == "true")
                    ip flow-export interface-names
                </command-string>
            </device-operation>
            <device-operation>
                <name>DeleteNETFLOWFlowExport</name>
                <type>DELETE</type>
                <command-string>
                    no ip flow-export source $source
                </command-string>
                <command-string>
                    no ip flow-export version $version
                </command-string>
                <command-string>
                    #if($interface-names == "true")
                    no ip flow-export interface-names
                </command-string>
            </device-operation>
        </device-operations>
    </operation>

    <operation>
        <target>/controller:devices/device/l3features:netflow/flow-exports/destinations</target>
        <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
        <device-operations>
            <device-operation>
                <name>CreateLegacyNETFLOWDestinations</name>
                <type>CREATE</type>
                <command-string>
		    #if($port != null)
                    ip flow-export destination $destination-ip-address $port
		    #else
                    ip flow-export destination $destination-ip-address
                </command-string>
            </device-operation>
            <device-operation>
                <name>DeleteNETFLOWFlowExportDestinations</name>
                <type>DELETE</type>
                <command-string>
		    #if($port != null)
                    no ip flow-export destination $destination-ip-address $port
		    #else
                    no ip flow-export destination $destination-ip-address
                </command-string>
            </device-operation>
        </device-operations>
        </operation>

         <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:port-security</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePortSecurity</name>
                    <type>CREATE</type>
                    <command-string>interface $../long-name</command-string>
                    <command-string>switchport port-security</command-string>
                    <command-string>switchport port-security violation $portViolation</command-string>
                    <command-string>switchport port-security aging time $aging-time</command-string>
                    <command-string>switchport port-security aging type $aging-type</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateSwitchportPortSecurity</name>
                    <type>UPDATE</type>
                    <command-string>interface $../long-name</command-string>
                    <command-string>switchport port-security</command-string>
                </device-operation>
                <device-operation>
                    <name>DisableSwitchportPortSecurity</name>
                    <type>DELETE</type>
                    <command-string>interface $../long-name</command-string>
                    <command-string>no switchport port-security violation $portViolation</command-string>
                    <command-string>no switchport port-security aging time $aging-time</command-string>
                    <command-string>no switchport port-security aging type $aging-type</command-string>
                    <command-string>no switchport port-security</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:port-security/port-security-maximum</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePortSecurityMaximum</name>
                    <type>CREATE</type>
            <command-string>interface $../../long-name</command-string>
                    <command-string>switchport port-security maximum $portSecurityMaximum [vlan $vlan]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatePortSecurityMaximum</name>
                    <type>UPDATE</type>
            <command-string>interface $../../long-name</command-string>
                    <command-string>switchport port-security maximum $portSecurityMaximum [vlan $vlan]</command-string>
                </device-operation>
                <device-operation>
                    <name>DisablePortSecurityMaximum</name>
                    <type>DELETE</type>
            <command-string>interface $../../long-name</command-string>
                    <command-string>no switchport port-security maximum $portSecurityMaximum [vlan $vlan]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:port-security/portViolation</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePortSecurityVoilation</name>
                    <type>CREATE</type>
                    <command-string>switchport port-security violation $portViolation</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatePortSecurityVoilation</name>
                    <type>UPDATE</type>
                    <command-string>switchport port-security violation $portViolation</command-string>
                </device-operation>
                <device-operation>
                    <name>DisablePortSecurityVoilation</name>
                    <type>DELETE</type>
                    <command-string>no switchport port-security violation $portViolation</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:port-security/aging-time</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePortSecurityAgingTime</name>
                    <type>CREATE</type>
                    <command-string>switchport port-security aging time $aging-time</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatePortSecurityAgingTime</name>
                    <type>UPDATE</type>
                    <command-string>switchport port-security aging time $aging-time</command-string>
                </device-operation>
                <device-operation>
                    <name>DisablePortSecurityAgingTime</name>
                    <type>DELETE</type>
                    <command-string>no switchport port-security aging time $aging-time</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:port-security/aging-type</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePortSecurityAgingType</name>
                    <type>CREATE</type>
                    <command-string>switchport port-security aging type $aging-type</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatePortSecurityAgingType</name>
                    <type>UPDATE</type>
                    <command-string>switchport port-security aging type $aging-type</command-string>
                </device-operation>
                <device-operation>
                    <name>DisablePortSecurityAgingType</name>
                    <type>DELETE</type>
                    <command-string>no switchport port-security aging type $aging-type</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:mace-enable</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>EnableMace</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($interface-ext:mace-enable == "true")
                        mace-enable
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateMace</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($interface-ext:mace-enable == "true")
                        mace-enable
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DisableMace</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($interface-ext:mace-enable == "true")
                        no mace-enable
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:interval</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceBfdInterval</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../interface-ext:bfd-options == "interval")
                        [bfd interval $interface-ext:interval min_rx $../interface-ext:min_rx multiplier $../interface-ext:multiplier]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceBfd</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../interface-ext:bfd-options == "interval")
                        bfd interval $interface-ext:interval min_rx $../interface-ext:min_rx multiplier $../interface-ext:multiplier
                        #else if($../interface-ext:bfd-options == null)
                        no bfd interval
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceBfd</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../interface-ext:bfd-options == "interval")
                        no bfd interval
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:min_rx</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceBfd</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../interface-ext:bfd-options == "interval")
                        [bfd interval $../interface-ext:interval min_rx $interface-ext:min_rx multiplier $../interface-ext:multiplier]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceBfd</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../interface-ext:bfd-options == "interval")
                        bfd interval $../interface-ext:interval min_rx $interface-ext:min_rx multiplier $../interface-ext:multiplier
                        #else if($../interface-ext:bfd-options == null)
                        no bfd interval
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceBfd</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../interface-ext:bfd-options == "interval")
                        no bfd interval
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
    <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:helper-address/helper</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateHelper</name>
                    <type>CREATE</type>
            <command-string>interface $../../name</command-string>
                    <command-string>
            #if($vrf != null AND $vrf != "GLOBAL")
            ip helper-address vrf $vrf $dest-address
            #else
            ip helper-address $dest-address
            </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateHelper</name>
                    <type>UPDATE</type>
            <command-string>interface $../../name</command-string>
                    <command-string>
            #if($vrf != null AND $vrf != "GLOBAL")
            ip helper-address vrf $vrf $dest-address
            #else
            ip helper-address $dest-address
            </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteHelper</name>
                    <type>DELETE</type>
            <command-string>interface $../../name</command-string>
                    <command-string>
            #if($vrf != null AND $vrf != "GLOBAL")
            no ip helper-address vrf $vrf $dest-address
            #else
            no ip helper-address $dest-address
            </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:multiplier</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceBfd</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../interface-ext:bfd-options == "interval")
                        [bfd interval $../interface-ext:interval min_rx $../interface-ext:min_rx multiplier $interface-ext:multiplier]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceBfd</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../interface-ext:bfd-options == "interval")
                        bfd interval $../interface-ext:interval min_rx $../interface-ext:min_rx multiplier $interface-ext:multiplier
                        #else if($../interface-ext:bfd-options == null)
                        no bfd interval
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceBfd</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($../interface-ext:bfd-options == "interval")
                        no bfd interval
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:bfd-options</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceBfd</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($interface-ext:bfd-options == "interval")
                        [bfd interval $../interface-ext:interval min_rx $../interface-ext:min_rx multiplier $../interface-ext:multiplier]
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceBfd</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($interface-ext:bfd-options == "interval")
                        bfd interval $../interface-ext:interval min_rx $../interface-ext:min_rx multiplier $../interface-ext:multiplier
                        #else if($interface-ext:bfd-options == null)
                        no bfd interval
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceBfd</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($interface-ext:bfd-options == "interval")
                        no bfd interval
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:efp-service-instances/efp-service-instance</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateServiceInstanceNumber</name>
                    <type>CREATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($trunk == "true" AND $service-instance-number != null)
                        service instance trunk $service-instance-number ethernet
                        #else if($trunk == "false" AND $service-instance-number != null)
                        service instance $service-instance-number ethernet
                    </command-string>
                    <command-string>
                        #if($encapsulation-type == "untagged")
                        encapsulation $encapsulation-type
                        #else if($encapsulation-type != null AND $vlan-id != null AND $trunk == "true")
                        encapsulation $encapsulation-type add $vlan-id
                        #else if($encapsulation-type != null AND $vlan-id != null)
                        encapsulation $encapsulation-type $vlan-id
                    </command-string>
                    <command-string>
                        #if($encapsulation-type != null AND $rewrite-type != null AND $tag-options == "pop" AND $symmetric == "true")
                        rewrite $rewrite-type tag pop $pop-options symmetric
                        #else if($encapsulation-type != null AND $rewrite-type != null AND $tag-options == "pop" AND $symmetric == "false")
                        rewrite $rewrite-type tag pop $pop-options
                        #else if($encapsulation-type != null AND $rewrite-type != null AND $tag-options == "push")
                        rewrite $rewrite-type tag push $push-options
                    </command-string>
                    <command-string>
                        #if($bridge-domain-number != null)
                        bridge-domain $bridge-domain-number
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateServiceInstanceNumber</name>
                    <type>UPDATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($trunk == "true" AND $service-instance-number != null)
                        service instance trunk $service-instance-number ethernet
                        #else if($trunk == "false" AND $service-instance-number != null)
                        service instance $service-instance-number ethernet
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteServiceInstanceNumber</name>
                    <type>DELETE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($trunk == "true" AND $service-instance-number != null)
                        no service instance trunk $service-instance-number
                        #else if($trunk == "false" AND $service-instance-number != null)
                        no service instance $service-instance-number
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:efp-service-instances/efp-service-instance/trunk</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateServiceInstanceNumber</name>
                    <type>CREATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($trunk == "true" AND $../service-instance-number != null)
                        service instance trunk $../service-instance-number ethernet
                        #else if($trunk == "false" AND $../service-instance-number != null)
                        service instance $../service-instance-number ethernet
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateServiceInstanceNumber</name>
                    <type>UPDATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($trunk == "true" AND $../service-instance-number != null)
                        service instance trunk $../service-instance-number ethernet
                        #else if($trunk == "false" AND $../service-instance-number != null)
                        service instance $../service-instance-number ethernet
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteServiceInstanceNumber</name>
                    <type>DELETE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($trunk == "true" AND $../service-instance-number != null)
                        no service instance trunk $../service-instance-number
                        #else if($trunk == "false" AND $../service-instance-number != null)
                        no service instance $../service-instance-number
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:efp-service-instances/efp-service-instance/encapsulation-type</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateServiceInstanceEncapsulation</name>
                    <type>CREATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($../trunk == "true" AND $../service-instance-number != null)
                        service instance trunk $../service-instance-number ethernet
                        #else if($../trunk == "false" AND $../service-instance-number != null)
                        service instance $../service-instance-number ethernet
                    </command-string>
                    <command-string>
                        #if($encapsulation-type == "untagged")
                        encapsulation $encapsulation-type
                        #else if($encapsulation-type != null AND $../vlan-id != null AND $../trunk == "true")
                        encapsulation $encapsulation-type add $../vlan-id
                        #else if($encapsulation-type != null AND $../vlan-id != null)
                        encapsulation $encapsulation-type $../vlan-id
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateServiceInstanceEncapsulation</name>
                    <type>UPDATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($../trunk == "true" AND $../service-instance-number != null)
                        service instance trunk $../service-instance-number ethernet
                        #else if($../trunk == "false" AND $../service-instance-number != null)
                        service instance $../service-instance-number ethernet
                    </command-string>
                    <command-string>
                        #if($encapsulation-type == "untagged")
                        encapsulation $encapsulation-type
                        #else if($encapsulation-type != null AND $../vlan-id != null AND $../trunk == "true")
                        encapsulation $encapsulation-type add $../vlan-id
                        #else if($encapsulation-type != null AND $../vlan-id != null)
                        encapsulation $encapsulation-type $../vlan-id
                        #else if($encapsulation-type == null)
                        no encapsulation
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteServiceInstanceEncapsulation</name>
                    <type>DELETE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($../trunk == "true" AND $../service-instance-number != null)
                        service instance trunk $../service-instance-number ethernet
                        #else if($../trunk == "false" AND $../service-instance-number != null)
                        service instance $../service-instance-number ethernet
                    </command-string>
                    <command-string>
                        #if($encapsulation-type != null)
                        no encapsulation
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:efp-service-instances/efp-service-instance/rewrite-type</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateServiceInstanceEncapsulationRewrite</name>
                    <type>CREATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($../trunk == "true" AND $../service-instance-number != null)
                        service instance trunk $../service-instance-number ethernet
                        #else if($../trunk == "false" AND $../service-instance-number != null)
                        service instance $../service-instance-number ethernet
                    </command-string>
                    <command-string>
                        #if($../encapsulation-type == "untagged")
                        encapsulation $../encapsulation-type
                        #else if($../encapsulation-type != null AND $../vlan-id != null AND $../trunk == "true")
                        encapsulation $../encapsulation-type add $../vlan-id
                        #else if($../encapsulation-type != null AND $../vlan-id != null)
                        encapsulation $../encapsulation-type $../vlan-id
                    </command-string>
                    <command-string>
                        #if($../encapsulation-type != null AND $rewrite-type != null AND $../tag-options == "pop" AND $symmetric == "true")
                        rewrite $rewrite-type tag pop $pop-options symmetric
                        #else if($../encapsulation-type != null AND $rewrite-type != null AND $../tag-options == "pop" AND $symmetric == "false")
                        rewrite $rewrite-type tag pop $pop-options
                        #else if($../encapsulation-type != null AND $rewrite-type != null AND $../tag-options == "push")
                        rewrite $rewrite-type tag push $push-options
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateServiceInstanceEncapsulationRewrite</name>
                    <type>UPDATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($../trunk == "true" AND $../service-instance-number != null)
                        service instance trunk $../service-instance-number ethernet
                        #else if($../trunk == "false" AND $../service-instance-number != null)
                        service instance $../service-instance-number ethernet
                    </command-string>
                    <command-string>
                        #if($../encapsulation-type == "untagged")
                        encapsulation $../encapsulation-type
                        #else if($../encapsulation-type != null AND $../vlan-id != null AND $../trunk == "true")
                        encapsulation $../encapsulation-type add $../vlan-id
                        #else if($../encapsulation-type != null AND $../vlan-id != null)
                        encapsulation $../encapsulation-type $../vlan-id
                    </command-string>
                    <command-string>
                        #if($../encapsulation-type != null AND $rewrite-type != null AND $../tag-options == "pop" AND $symmetric == "true")
                        rewrite $rewrite-type tag pop $pop-options symmetric
                        #else if($../encapsulation-type != null AND $rewrite-type != null AND $../tag-options == "pop" AND $symmetric == "false")
                        rewrite $rewrite-type tag pop $pop-options
                        #else if($../encapsulation-type != null AND $rewrite-type != null AND $../tag-options == "push")
                        rewrite $rewrite-type tag push $push-options
                        #else if($../encapsulation-type != null AND $rewrite-type == null)
                        no rewrite $rewrite-type
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteServiceInstanceEncapsulationRewrite</name>
                    <type>DELETE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($../trunk == "true" AND $../service-instance-number != null)
                        service instance trunk $../service-instance-number ethernet
                        #else if($../trunk == "false" AND $../service-instance-number != null)
                        service instance $../service-instance-number ethernet
                    </command-string>
                    <command-string>
                        #if($../encapsulation-type == "untagged")
                        encapsulation $../encapsulation-type
                        #else if($../encapsulation-type != null AND $../vlan-id != null AND $../trunk == "true")
                        encapsulation $../encapsulation-type add $../vlan-id
                        #else if($../encapsulation-type != null AND $../vlan-id != null)
                        encapsulation $../encapsulation-type $../vlan-id
                    </command-string>
                    <command-string>
                        #if($encapsulation-type != null AND $rewrite-type != null)
                        no rewrite $rewrite-type
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:efp-service-instances/efp-service-instance/bridge-domain-number</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateServiceInstanceBridgeDomainNumber</name>
                    <type>CREATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($../trunk == "true" AND $../service-instance-number != null)
                        service instance trunk $../service-instance-number ethernet
                        #else if($../trunk == "false" AND $../service-instance-number != null)
                        service instance $../service-instance-number ethernet
                    </command-string>
                    <command-string>
                        #if($../encapsulation-type == "untagged")
                        encapsulation $../encapsulation-type
                        #else if($../encapsulation-type != null AND $../vlan-id != null AND $../trunk == "true")
                        encapsulation $../encapsulation-type add $../vlan-id
                        #else if($../encapsulation-type != null AND $../vlan-id != null)
                        encapsulation $../encapsulation-type $../vlan-id
                    </command-string>
                    <command-string>
                        #if($bridge-domain-number != null)
                        bridge-domain $bridge-domain-number
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateServiceInstanceBridgeDomainNumber</name>
                    <type>UPDATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($../trunk == "true" AND $../service-instance-number != null)
                        service instance trunk $../service-instance-number ethernet
                        #else if($../trunk == "false" AND $../service-instance-number != null)
                        service instance $../service-instance-number ethernet
                    </command-string>
                    <command-string>
                        #if($../encapsulation-type == "untagged")
                        encapsulation $../encapsulation-type
                        #else if($../encapsulation-type != null AND $../vlan-id != null AND $../trunk == "true")
                        encapsulation $../encapsulation-type add $../vlan-id
                        #else if($../encapsulation-type != null AND $../vlan-id != null)
                        encapsulation $../encapsulation-type $../vlan-id
                    </command-string>
                    <command-string>
                        #if($bridge-domain-number != null)
                        bridge-domain $bridge-domain-number
                        #else if($bridge-domain-number == null)
                        no bridge-domain $bridge-domain-number
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteServiceInstanceBridgeDomainNumber</name>
                    <type>DELETE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($../trunk == "true" AND $../service-instance-number != null)
                        service instance trunk $../service-instance-number ethernet
                        #else if($../trunk == "false" AND $../service-instance-number != null)
                        service instance $../service-instance-number ethernet
                    </command-string>
                    <command-string>
                        #if($../encapsulation-type == "untagged")
                        encapsulation $../encapsulation-type
                        #else if($../encapsulation-type != null AND $../vlan-id != null AND $../trunk == "true")
                        encapsulation $../encapsulation-type add $../vlan-id
                        #else if($../encapsulation-type != null AND $../vlan-id != null)
                        encapsulation $../encapsulation-type $../vlan-id
                    </command-string>
                    <command-string>
                        #if($bridge-domain-number != null)
                        no bridge-domain $bridge-domain-number
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:carrier-delay-time</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceCarrierDelay</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($interface-ext:carrier-delay-time != null AND $../interface-ext:carrier-delay-type != null)
                        carrier-delay $../interface-ext:carrier-delay-type $interface-ext:carrier-delay-time
                        #else if($interface-ext:carrier-delay-time != null AND $../interface-ext:carrier-delay-type == null)
                        carrier-delay $interface-ext:carrier-delay-time
                    </command-string>   
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceCarrierDelay</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($interface-ext:carrier-delay-time != null AND $../interface-ext:carrier-delay-type != null)
                        carrier-delay $../interface-ext:carrier-delay-type $interface-ext:carrier-delay-time
                        #else if($interface-ext:carrier-delay-time != null AND $../interface-ext:carrier-delay-type == null)
                        carrier-delay $interface-ext:carrier-delay-time
                        #else if($interface-ext:carrier-delay-time == null)
                        no carrier-delay
                    </command-string>   
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceCarrierDelay</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($interface-ext:carrier-delay-time != null)
                        no carrier-delay
                    </command-string>   
                </device-operation>
            </device-operations>
        </operation>
       <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:storm-control/storm-control</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseStormControl</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($storm-control-options == "unicast")
                        storm-control $storm-control-options level $level
                    </command-string>
                    <command-string>
                        #if($storm-control-options == "broadcast")
                        storm-control $storm-control-options level $level
                    </command-string>
                    <command-string>
                        #if($storm-control-options == "action")
                        storm-control $storm-control-options trap
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateStormControl</name>
                    <type>CREATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($storm-control-options == "unicast")
                        storm-control unicast level $level
                    </command-string>
                    <command-string>
                        #if($storm-control-options == "broadcast")
                        storm-control broadcast level $level
                    </command-string>
                    <command-string>
                        #if($storm-control-options == "action")
                        storm-control action trap
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateStormControl</name>
                    <type>UPDATE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($storm-control-options == "unicast")
                        storm-control unicast level $level
                    </command-string>
                    <command-string>
                        #if($storm-control-options == "broadcast")
                        storm-control broadcast level $level
                    </command-string>
                    <command-string>
                        #if($storm-control-options == "action")
                        storm-control action trap
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteStormControl</name>
                    <type>DELETE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($storm-control-options == "unicast")
                        no storm-control unicast level $level
                    </command-string>
                    <command-string>
                        #if($storm-control-options == "broadcast")
                        no storm-control broadcast level $level
                    </command-string>
                    <command-string>
                        #if($storm-control-options == "action")
                        no storm-control action trap
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>

        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:storm-control/storm-control/storm-control-options</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateStormControlOptions</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($storm-control-options == "action")
                        storm-control $storm-control-options $../action-type
                        #else if($storm-control-options != null)
                        storm-control $storm-control-options level $../level
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateStormControlOptions</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($storm-control-options == "action")
                        storm-control $storm-control-options $../action-type
                        #else if($storm-control-options != null)
                        storm-control $storm-control-options level $../level
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteStormControlOptions</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($storm-control-options == "action")
                        no storm-control $storm-control-options $../action-type
                        #else if($storm-control-options != null)
                        no storm-control $storm-control-options level $../level
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:ip-redirects</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceIpRedirects</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($interface-ext:ip-redirects == "false")
                        no ip redirects
                        #if($interface-ext:ip-redirects == "true")
                        ip redirects
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceIpRedirects</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($interface-ext:ip-redirects == "false")
                        no ip redirects
                        #if($interface-ext:ip-redirects == "true")
                        ip redirects
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceIpRedirects</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($interface-ext:ip-redirects == "true")
                        no ip redirects
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:ip-unreachables</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceIpUnreachables</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($interface-ext:ip-unreachables == "false")
                        no ip unreachables
                        #if($interface-ext:ip-unreachables == "true")
                        ip unreachables
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceIpUnreachables</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($interface-ext:ip-unreachables == "false")
                        no ip unreachables
                        #if($interface-ext:ip-unreachables == "true")
                        ip unreachables
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceIpUnreachables</name>
                    <type>DELETE</type>
                    <command-string>
                        #if($interface-ext:ip-unreachables == "true")
                        no ip unreachables
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l2features:psuedo-wire/l2-vfi</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePWL2Vfi</name>
                    <type>CREATE</type>
                    <command-string>l2 vfi $vfi-name $config-mode</command-string>
                    <command-string>vpn id $vpn-id</command-string>
                    <command-string>bridge-domain $bridge-domain-id</command-string>
                    <command-string>mtu $mtu</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatePWL2VfiName</name>
                    <type>UPDATE</type>
                    <command-string>l2 vfi $vfi-name $config-mode</command-string>
                </device-operation>
                <device-operation>
                    <name>DeletePWL2Vfi</name>
                    <type>DELETE</type>
                    <command-string>no l2 vfi $vfi-name $config-mode</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l2features:psuedo-wire/pw-class</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePWClass</name>
                    <type>CREATE</type>
                    <command-string>pseudowire-class $pw-class-name</command-string>
                    <command-string>
                        #if($pw-class-options == "encapsulation" AND $encapsulation-type != null)
                        encapsulation $encapsulation-type
                    </command-string>
                    <command-string>
                        #if($inter-working != null)
                        interworking $inter-working
                    </command-string>
                    <command-string>
                        #if($disable-fallback == "true")
                        preferred-path interface $interface-name disable-fallback
                        #else if($disable-fallback == "false")
                        preferred-path interface $interface-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatePWClass</name>
                    <type>UPDATE</type>
                    <command-string>pseudowire-class $pw-class-name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeletePWClass</name>
                    <type>DELETE</type>
                    <command-string>no pseudowire-class $pw-class-name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l2features:psuedo-wire/encapsulation-type/</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePWClassEncapsulationType</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../pw-class-options == "encapsulation" AND $encapsulation-type != null)
                        encapsulation $encapsulation-type
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatePWClassEncapsulationType</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($encapsulation-type != null)
                        encapsulation $encapsulation-type
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeletePWClassEncapsulationType</name>
                    <type>DELETE</type>
                    <command-string>no encapsulation $encapsulation-type</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l2features:psuedo-wire/pw-class/inter-working</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePWClassInterWorking</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($inter-working != null)
                        interworking $inter-working
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatePWClassInterWorking</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($inter-working != null)
                        interworking $inter-working
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeletePWClassInterWorking</name>
                    <type>DELETE</type>
                    <command-string>no interworking $inter-working</command-string>
                </device-operation>
            </device-operations>
        </operation>        
        <operation>
            <target>/controller:devices/device/l2features:psuedo-wire/pw-class/interface-name</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePWPreferredPath</name>
                    <type>CREATE</type>
                    <command-string>
                        #if($../disable-fallback == "true")
                        preferred-path interface $interface-name disable-fallback
                        #else if($../disable-fallback == "false")
                        preferred-path interface $interface-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatePWPreferredPath</name>
                    <type>UPDATE</type>
                    <command-string>
                        #if($../disable-fallback == "true")
                        preferred-path interface $interface-name disable-fallback
                        #else if($../disable-fallback == "false")
                        preferred-path interface $interface-name
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeletePWPreferredPath</name>
                    <type>DELETE</type>
                    <command-string>
            #if($../disable-fallback == "true")
                        preferred-path interface $interface-name disable-fallback
                        #else if($../disable-fallback == "false")
                        preferred-path interface $interface-name
            </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l2features:psuedo-wire/l2-vfi/vfi-neighbor</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePWL2VfiNeighbor</name>
                    <type>CREATE</type>
                    <command-string>l2 vfi $../vfi-name $../config-mode</command-string>
                    <!--<command-string>vpn id $../vpn-id</command-string>-->
                    <command-string>neighbor $neighbor-router-id $vfi-neighbor-options $encapsulation-type</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatePWL2VfiNeighbor</name>
                    <type>UPDATE</type>
                    <command-string>l2 vfi $../vfi-name $../config-mode</command-string>
                    <!--<command-string>vpn id $../vpn-id</command-string>-->
                    <command-string>neighbor $neighbor-router-id $vfi-neighbor-options $encapsulation-type</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteNeighbor</name>
                    <type>DELETE</type>
                    <command-string>l2 vfi $../vfi-name $../config-mode</command-string>
                    <!--<command-string>vpn id $../vpn-id</command-string>-->
                    <command-string>no neighbor $neighbor-router-id</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l2features:psuedo-wire/l2-vfi/vpn-id</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePWL2VfiVpn</name>
                    <type>CREATE</type>
                    <command-string>l2 vfi $../vfi-name $../config-mode</command-string>
                    <command-string>vpn id $vpn-id</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatePWL2VfiVpn</name>
                    <type>UPDATE</type>
                    <command-string>l2 vfi $../vfi-name $../config-mode</command-string>
                    <command-string>
                    #if($vpn-id != null)
                    vpn id $vpn-id
                    #else if($vpn-id == null)
                    no vpn id
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeletePWL2VfiVpn</name>
                    <type>DELETE</type>
                    <command-string>l2 vfi $../vfi-name $../config-mode</command-string>
                    <command-string>no vpn id</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l2features:psuedo-wire/l2-vfi/bridge-domain-id</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePWL2VfiBridgeDomain</name>
                    <type>CREATE</type>
                    <command-string>l2 vfi $../vfi-name $../config-mode</command-string>
                    <command-string>vpn id $../vpn-id</command-string>
                    <command-string>bridge-domain $bridge-domain-id</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatePWL2VfiBridgeDomain</name>
                    <type>UPDATE</type>
                    <command-string>l2 vfi $../vfi-name $../config-mode</command-string>
                    <command-string>vpn id $../vpn-id</command-string>
                    <command-string>
                    #if($bridge-domain-id != null)
                    bridge-domain $bridge-domain-id
                    #else if($bridge-domain-id == null)
                    no bridge-domain
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeletePWL2VfiBridgeDomain</name>
                    <type>DELETE</type>
                    <command-string>l2 vfi $../vfi-name $../config-mode</command-string>
                    <command-string>vpn id $../vpn-id</command-string>
                    <command-string>no bridge-domain</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l2features:psuedo-wire/l2-vfi/mtu</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreatePWL2VfiMtu</name>
                    <type>CREATE</type>
                    <command-string>l2 vfi $../vfi-name $../config-mode</command-string>
                    <command-string>vpn id $../vpn-id</command-string>
                    <command-string>mtu $mtu</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdatePWL2VfiMtu</name>
                    <type>UPDATE</type>
                    <command-string>l2 vfi $../vfi-name $../config-mode</command-string>
                    <command-string>vpn id $../vpn-id</command-string>
                    <command-string>
                    #if($mtu != null)
                    mtu $mtu
                    #else if($mtu == null)
                    no mtu
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeletePWL2VfiMtu</name>
                    <type>DELETE</type>
                    <command-string>l2 vfi $../vfi-name $../config-mode</command-string>
                    <command-string>vpn id $../vpn-id</command-string>
                    <command-string>no mtu</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:aaa-group/tacacs-group-servers</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateAAATacacsGroupServer</name>
                    <type>CREATE</type>
                    <command-string>aaa group server tacacs+ $tacacs-server-name</command-string>
                    <command-string>ip vrf forwarding $vrf-name</command-string>
                    <command-string>ip tacacs source-interface $source-interface-name</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateAAATacacsGroupServer</name>
                    <type>UPDATE</type>
                    <command-string>aaa group server tacacs+ $tacacs-server-name</command-string>
                    <command-string>ip vrf forwarding $vrf-name</command-string>
                    <command-string>ip tacacs source-interface $source-interface-name</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteAAATacacsGroupServer</name>
                    <type>DELETE</type>
                    <command-string>no aaa group server tacacs+ $tacacs-server-name</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:aaa-group/tacacs-group-servers/tacacs-aaa-servers</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTacacsGroupServerAAAServers</name>
                    <type>CREATE</type>
                    <command-string>aaa group server tacacs+ $../tacacs-server-name</command-string>
                    <command-string>server $aaa-server</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTacacsGroupServerAAAServers</name>
                    <type>DELETE</type>
                    <command-string>aaa group server tacacs+ $../tacacs-server-name</command-string>
                    <command-string>no server $aaa-server</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/basicDeviceConfigs:aaa-group/tacacs-group-servers/tacacs-servers-private</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateTacacsGroupServerAAAPrivateServers</name>
                    <type>CREATE</type>
                    <command-string>aaa group server tacacs+ $../tacacs-server-name</command-string>
                    <command-string>server-private $server-private key [$privilege-level] $privilege-key</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateTacacsGroupServerAAAPrivateServers</name>
                    <type>UPDATE</type>
                    <command-string>aaa group server tacacs+ $../tacacs-server-name</command-string>
                    <command-string>server-private $server-private key [$privilege-level] $privilege-key</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteTacacsGroupServerAAAPrivateServers</name>
                    <type>DELETE</type>
                    <command-string>aaa group server tacacs+ $../tacacs-server-name</command-string>
                    <command-string>no server-private $server-private key [$privilege-level] $privilege-key</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:ip-sla/reaction-configuration</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseIpSlaReactionConfiguration</name>
                    <type>PARSE</type>
                        <command-string>ip sla reaction-configuration $reaction-conf-number react $reaction-conf-option [threshold-value $upper-limit $lower-limit] [threshold-type $threshold-type] [action-type $action-type]</command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
            <target>/controller:devices/device/l3features:ip-sla/reaction-configuration/reaction-conf-options</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateIpSlaReactionConfiguration</name>
                    <type>CREATE</type>
                        <command-string>ip sla reaction-configuration $../reaction-conf-number react $reaction-conf-option [threshold-value $upper-limit $lower-limit] [threshold-type $threshold-type] [action-type $action-type]</command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateIpSlaReactionConfiguration</name>
                    <type>UPDATE</type>
                        <command-string>ip sla reaction-configuration $../reaction-conf-number react $reaction-conf-option [threshold-value $upper-limit $lower-limit] [threshold-type $threshold-type] [action-type $action-type]</command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteIpSlaReactionConfiguration</name>
                    <type>DELETE</type>
                        <command-string>no ip sla reaction-configuration $../reaction-conf-number react $reaction-conf-option [threshold-value $upper-limit $lower-limit] [threshold-type $threshold-type] [action-type $action-type]</command-string>                </device-operation>
            </device-operations>
        </operation>   
    <operation>
            <target>/controller:devices/device/l3features:control-plane</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>ParseControlPlanePolicy</name>
                    <type>PARSE_TEMPLATE</type>
                    <command-string>control-plane</command-string>
                    <command-string>
                        #if ($input-service-policy != null)
                        service-policy input $input-service-policy
                    </command-string>
                    <command-string>
                        #if ($output-service-policy != null)
                        service-policy input $input-service-policy
                    </command-string>
                </device-operation>
                 <device-operation>
                    <name>CreateControlPlanePolicy</name>
                    <type>CREATE</type>
                    <command-string>control-plane</command-string>
                    <command-string>
                        #if ($input-service-policy != null)
                        service-policy input $input-service-policy
                    </command-string>
                    <command-string>
                        #if ($output-service-policy != null)
                        service-policy output $output-service-policy
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateControlPlanePolicy</name>
                    <type>UPDATE</type>
                    <command-string>control-plane</command-string>
                    <command-string>
                        #if($input-service-policy == null AND $input-service-policy.%previous != null)
                        no service-policy input $input-service-policy.%previous
                        #else if ($input-service-policy != null)
                        service-policy input $input-service-policy
                    </command-string>
                    <command-string>
                        #if($output-service-policy == null AND $output-service-policy.%previous != null)
                        no service-policy output $output-service-policy.%previous
                        #else if ($output-service-policy != null)
                        service-policy output $output-service-policy
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteControlPlanePolicy</name>
                    <type>DELETE</type>
                    <command-string>control-plane</command-string>
                    <command-string>
                        #if ($input-service-policy != null)
                        no service-policy input $input-service-policy
                    </command-string>
                    <command-string>
                        #if ($output-service-policy != null)
                        no service-policy output $output-service-policy
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
             <target>/controller:devices/device/l3features:control-plane/input-service-policy</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                     <name>CreateControlPlaneInputPolicy</name>
                    <type>CREATE</type>
                    <command-string>control-plane</command-string>
                    <command-string>
                        #if ($input-service-policy != null)
                        service-policy input $input-service-policy
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateControlPlaneInputPolicy</name>
                    <type>UPDATE</type>
                    <command-string>control-plane</command-string>
                    <command-string>
                        #if($input-service-policy == null AND $input-service-policy.%previous != null)
                        no service-policy input $input-service-policy.%previous
                        #else if ($input-service-policy != null)
                        service-policy input $input-service-policy
                    </command-string>
                </device-operation>
                 <device-operation>
                    <name>DeleteControlPlaneInputPolicy</name>
                    <type>DELETE</type>
                    <command-string>control-plane</command-string>
                    <command-string>
                        #if ($input-service-policy != null)
                        no service-policy input $input-service-policy
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        <operation>
             <target>/controller:devices/device/l3features:control-plane/output-service-policy</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                     <name>CreateControlPlaneOutputPolicy</name>
                    <type>CREATE</type>
                    <command-string>control-plane</command-string>
                    <command-string>
                        #if ($output-service-policy != null)
                        service-policy output $output-service-policy
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateControlPlaneOutputPolicy</name>
                    <type>UPDATE</type>
                    <command-string>control-plane</command-string>
                   <command-string>
                        #if($output-service-policy == null AND $output-service-policy.%previous != null)
                        no service-policy output $output-service-policy.%previous
                        #else if ($output-service-policy != null)
                        service-policy output $output-service-policy
                    </command-string>
                </device-operation>
                 <device-operation>
                    <name>DeleteControlPlaneOutputPolicy</name>
                    <type>DELETE</type>
                    <command-string>control-plane</command-string>
                    <command-string>
                        #if ($output-service-policy != null)
                        no service-policy output $output-service-policy
                    </command-string>
                </device-operation>
            </device-operations>
        </operation>
        
        <operation>
            <target>/controller:devices/device/interface:interfaces/interface/interface-ext:secondary-ip-addresses/secondary-ip-address</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
                <device-operation>
                    <name>CreateInterfaceSecondaryAddress</name>
                    <type>CREATE</type>
                     <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($ip-address != null AND $netmask != null)
                        ip address $ip-address $netmask secondary
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>UpdateInterfaceSecondaryAddress</name>
                    <type>UPDATE</type>
                    <command-string>interface $../../name</command-string>
                     <command-string>
                        #if($ip-address != null AND $netmask != null)
                        ip address $ip-address $netmask secondary
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteInterfaceSecondaryAddress</name>
                    <type>DELETE</type>
                    <command-string>interface $../../name</command-string>
                    <command-string>
                        #if($ip-address != null AND $netmask != null)
                        no ip address $ip-address $netmask secondary
                    </command-string>
                </device-operation>
            </device-operations>
        </operation> 
         <operation>
            <target>/controller:devices/device/qos:nbar-custom-signatures/nbar-custom-signature</target>
            <platform>ALL|ALL|ALL|IOS|Cisco Systems</platform>
            <device-operations>
              <device-operation>
                    <name>ParseCustomNbarSignature</name>
                    <type>PARSE_TEMPLATE</type>
                     <command-string>
                        #if($custom-nbar-type == "transport" AND $transport-type != null)
                        ip nbar custom $name $custom-nbar-type $transport-type id $id
                        #else if($custom-nbar-type == "ssl" AND $ssl-sni != null)
                        ip nbar custom $name $custom-nbar-type unique-name $ssl-sni id $id 
                        #else if($custom-nbar-type == "http" AND $http-url != null)
                        ip nbar custom $name $custom-nbar-type url $http-url [user-agent $http-user-agent] [method $http-method] id $id
                    </command-string>
                         <command-string>
                        #if($custom-nbar-type == "transport" AND $ip-address != null)
                        ip address $ip-address
                    </command-string>
                    <command-string>
                        #if($custom-nbar-type == "transport" AND $subnet-address != null AND $subnet-length != null)
                        ip subnet $subnet-address $subnet-length
                    </command-string>
                         <command-string>
                        #if($custom-nbar-type == "transport" AND $port-number != null)
                        port $port-number
                    </command-string>
                    <command-string>
                        #if($custom-nbar-type == "transport" AND $start-port != null AND $end-port != null)
                        port range $start-port $end-port
                    </command-string>
                     <command-string>
                        #if($custom-nbar-type == "transport" AND $direction != null)
                        direction $direction
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>CreateCustomNbarSignature</name>
                    <type>CREATE</type>
                   <command-string>
                        #if($custom-nbar-type == "transport" AND $transport-type != null)
                        ip nbar custom $name $custom-nbar-type $transport-type id $id
                        #else if($custom-nbar-type == "ssl" AND $ssl-sni != null)
                        ip nbar custom $name $custom-nbar-type unique-name $ssl-sni id $id 
                        #else if($custom-nbar-type == "http" AND $http-url != null)
                        ip nbar custom $name $custom-nbar-type url $http-url [user-agent $http-user-agent] [method $http-method] id $id
                    </command-string>
                         <command-string>
                        #if($custom-nbar-type == "transport" AND $ip-address != null)
                        ip address $ip-address
                    </command-string>
                    <command-string>
                        #if($custom-nbar-type == "transport" AND $subnet-address != null AND $subnet-length != null)
                        ip subnet $subnet-address $subnet-length
                    </command-string>
                         <command-string>
                        #if($custom-nbar-type == "transport" AND $port-number != null)
                        port $port-number
                    </command-string>
                    <command-string>
                        #if($custom-nbar-type == "transport" AND $start-port != null AND $end-port != null)
                        port range $start-port $end-port
                    </command-string>
                     <command-string>
                        #if($custom-nbar-type == "transport" AND $direction != null)
                        direction $direction
                    </command-string>
                </device-operation>
                <device-operation>
                    <name>DeleteCustomNbarSignature</name>
                    <type>DELETE</type>
                    <command-string>no ip nbar custom $name</command-string>
                </device-operation>
            </device-operations>
        </operation>    
    </operations>
</device-support>

